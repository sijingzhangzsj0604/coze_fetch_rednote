/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import test from 'ava';
import sinon from 'sinon';
import { uuid4, setTraceContext, setVolTraceContext } from '../http/trace';
import { getGetLatestEntryByName } from '../http/util';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('getGetLatestEntryByName', function (t) {
    var mockPerformance = {
        getEntriesByName: function (name) {
            if (name === 'xxx')
                return [];
            return Array.from(Array(3), function (_, i) { return ({
                name: name,
                startTime: i,
            }); });
        },
    };
    var getLatestEntryByName = getGetLatestEntryByName(mockPerformance);
    t.deepEqual(getLatestEntryByName('ppp'), {
        name: 'ppp',
        startTime: 2,
    });
    t.is(getLatestEntryByName('xxx'), undefined);
});
test('setTraceContext', function (t) {
    t.is(setTraceContext(undefined), undefined);
    t.is(setTraceContext(false), undefined);
    t.is(setTraceContext({ sampleRate: 0 }), undefined);
    var setHeader = setTraceContext({ sampleRate: 1 });
    t.is(typeof setHeader, 'function');
    var fnHitLog = sinon.fake();
    var setHeaderHitOrigin = setTraceContext({ sampleRate: 1, origins: ['test'] });
    setHeaderHitOrigin('test/a', fnHitLog);
    t.true(fnHitLog.calledOnce);
    t.is(fnHitLog.args[0][0], 'traceparent');
    t.true(new RegExp('^([0-9]{2})-([0-9a-f]{32})-([0-9a-f]{16})-01').test(fnHitLog.args[0][1]));
    var fnMissLog = sinon.fake();
    var setHeaderMissOrigin = setTraceContext({ sampleRate: 1, origins: ['test'] });
    setHeaderMissOrigin('miss/a', fnMissLog);
    t.true(fnMissLog.notCalled);
});
test('setVolTraceContext', function (t) {
    t.is(setVolTraceContext(undefined, ''), undefined);
    t.is(setVolTraceContext(false, ''), undefined);
    t.is(setVolTraceContext({ sampleRate: 0 }, ''), undefined);
    var setHeader = setVolTraceContext({ sampleRate: 1 }, '');
    t.is(typeof setHeader, 'function');
    var fnHitLog = sinon.fake();
    var setHeaderHitOrigin = setVolTraceContext({ sampleRate: 1, origins: ['test'] }, 'xx');
    setHeaderHitOrigin('test/a', fnHitLog);
    t.true(fnHitLog.calledTwice);
    t.is(fnHitLog.args[0][0], 'x-rum-traceparent');
    t.true(new RegExp('^00-([0-9a-f]{32})-([0-9a-f]{16})-01').test(fnHitLog.args[0][1]));
    t.is(fnHitLog.args[1][0], 'x-rum-tracestate');
    t.is(fnHitLog.args[1][1], 'xx');
    var fnMissLog = sinon.fake();
    var setHeaderMissOrigin = setVolTraceContext({ sampleRate: 1, origins: ['test'] }, 'xx');
    setHeaderMissOrigin('miss/a', fnMissLog);
    t.true(fnMissLog.notCalled);
});
test('uuid4', function (t) {
    t.true(new RegExp('^([0-9a-f]{32})').test(uuid4()));
    Object.defineProperty(window, 'crypto', {
        value: {
            getRandomValues: function () {
                // eslint-disable-next-line compat/compat
                new Uint16Array(8);
            },
        },
    });
    t.true(new RegExp('^([0-9a-f]{32})').test(uuid4()));
});
//# sourceMappingURL=http.spec.js.map