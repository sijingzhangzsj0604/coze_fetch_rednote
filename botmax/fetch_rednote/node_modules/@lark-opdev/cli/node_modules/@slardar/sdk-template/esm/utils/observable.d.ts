export declare type ParametersForFn<T extends (args: any) => any> = T extends (args: infer P) => any ? P : never;
export declare type Observable<T extends (args: any) => any> = {
    subscribe: (f: T) => () => void;
    unsubscribe: (f: T) => void;
    next: (args: ParametersForFn<T>) => ReturnType<NextLink<T>>;
    attach: (disconnect: () => void, onSubscribe?: (f: T) => void) => void;
    complete: (f: () => void) => void;
};
export declare type SafeObservable<T> = [(f: T) => () => void, (f: T) => void];
export declare type Observer<T extends (args: any) => any> = (next: (args: ParametersForFn<T>) => ReturnType<NextLink<T>>, attach: (disconnect: () => void, onSubscribe?: (f: T) => void) => void) => void;
export declare type NextLink<T extends (args: any) => any> = (args: ParametersForFn<T>, cb: T[]) => NextLink<ReturnType<T>>;
export declare const nextLink: <T extends (args: any) => any>(args: ParametersForFn<T>, cb: T[]) => (nextArgs: ParametersForFn<ReturnType<T>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<T>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<T>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>>>>>) => (nextArgs: ParametersForFn<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<ReturnType<T>>>>>>>>>>>>) => any;
export declare const toObservable: <T extends (args: any) => any>(bufferTime?: number) => Observable<T>;
export declare const createSafeObserver: <T extends (args: any) => any>(observer: Observer<T>, completeCb?: (() => void) | undefined, bufferTime?: number | undefined) => SafeObservable<T>;
