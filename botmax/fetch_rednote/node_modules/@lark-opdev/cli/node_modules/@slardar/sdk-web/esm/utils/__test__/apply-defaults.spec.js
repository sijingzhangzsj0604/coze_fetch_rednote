import { __read, __spreadArray } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { applyAnimationFrame, applyMonitor, applyMutationObserver, applyPerformance, applyPerformanceObserver, applyUpdate, } from '../apply-defaults';
test('applyMutationObserver', function (t) {
    var ctor = sinon.fake();
    var observe = sinon.fake();
    var disconnect = sinon.fake();
    var MockMo = /** @class */ (function () {
        function MockMo() {
            ctor.apply(void 0, __spreadArray([], __read(arguments), false));
        }
        MockMo.prototype.observe = function (target, options) {
            observe(target, options);
        };
        MockMo.prototype.disconnect = function () {
            disconnect();
        };
        return MockMo;
    }());
    var cb = function () { };
    var _a = __read(applyMutationObserver(MockMo, cb), 2), ob = _a[0], disc = _a[1];
    t.assert(ctor.calledOnce);
    t.is(ctor.args[0][0], cb);
    ob(null);
    t.assert(observe.notCalled);
    ob({ isNode: true });
    t.assert(observe.calledOnce);
    t.deepEqual(observe.args[0][0], { isNode: true });
    disc();
    t.assert(disconnect.calledOnce);
});
test('applyAnimationFrame - no origin', function (t) {
    var _a = __read(applyAnimationFrame(), 3), schedule = _a[0], raf = _a[1], caf = _a[2];
    var cb = sinon.fake();
    raf(cb);
    t.assert(cb.calledOnce);
    t.is(cb.args[0][0], 0);
    t.notThrows(function () {
        caf(0);
        schedule(cb);
    });
});
test('applyAnimationFrame', function (t) {
    var cbs = 0;
    var mockRaf = sinon.spy(function (_cb) {
        return ++cbs;
    });
    var mockCaf = sinon.fake();
    var _a = __read(applyAnimationFrame({}, mockRaf, mockCaf), 3), schedule = _a[0], raf = _a[1], caf = _a[2];
    var cb = sinon.fake();
    t.is(raf(cb), 1);
    t.assert(mockRaf.calledOnce);
    caf(33);
    t.assert(mockCaf.calledOnce);
    t.is(mockCaf.args[0][0], 33);
    schedule(cb);
    t.assert(mockCaf.calledOnce);
    t.assert(mockRaf.calledTwice);
    schedule(cb);
    t.assert(mockCaf.calledTwice);
    t.assert(mockRaf.calledThrice);
    t.is(mockCaf.args[1][0], 2);
});
test.serial('applyPerformance - no now', function (t) {
    var clock = sinon.useFakeTimers({
        now: 1000,
    });
    var mockPerformance = {
        timing: {
            navigationStart: 333,
        },
    };
    var _a = __read(applyPerformance(mockPerformance), 2), now = _a[1];
    t.is(now(), 1000 - 333);
    clock.restore();
});
test('applyPerformance', function (t) {
    var mockPerformance = {
        timing: {
            connectEnd: 1619074166602,
            connectStart: 1619074166602,
            domComplete: 1619074166862,
            domContentLoadedEventEnd: 1619074166849,
            domContentLoadedEventStart: 1619074166835,
            domInteractive: 1619074166812,
            domLoading: 1619074166744,
            domainLookupEnd: 1619074166602,
            domainLookupStart: 1619074166602,
            fetchStart: 1619074166602,
            loadEventEnd: 1619074166863,
            loadEventStart: 1619074166863,
            navigationStart: 1619074166599,
            redirectEnd: 0,
            redirectStart: 0,
            requestStart: 1619074166608,
            responseEnd: 1619074166737,
            responseStart: 1619074166735,
            secureConnectionStart: 0,
            unloadEventEnd: 1619074166742,
            unloadEventStart: 1619074166742,
        },
        now: sinon.fake(),
        getEntriesByType: sinon.fake(),
        clearResourceTimings: sinon.fake(),
        getEntriesByName: sinon.fake(),
    };
    var _a = __read(applyPerformance(mockPerformance), 5), timing = _a[0], now = _a[1], getEntriesByType = _a[2], clearResourceTimings = _a[3], getEntriesByName = _a[4];
    t.like(timing, mockPerformance.timing);
    now();
    getEntriesByType('navigation');
    clearResourceTimings();
    getEntriesByName('some-resource');
    t.assert(mockPerformance.now.calledOnce);
    t.assert(mockPerformance.getEntriesByType.calledOnce);
    t.is(mockPerformance.getEntriesByType.args[0][0], 'navigation');
    t.assert(mockPerformance.clearResourceTimings.calledOnce);
    t.assert(mockPerformance.getEntriesByName.calledOnce);
    t.is(mockPerformance.getEntriesByName.args[0][0], 'some-resource');
});
test('applyPerformanceObserver', function (t) {
    var ctor = sinon.fake();
    var observe = sinon.fake();
    var disconnect = sinon.fake();
    var MockPo = /** @class */ (function () {
        function MockPo() {
            ctor.apply(void 0, __spreadArray([], __read(arguments), false));
        }
        MockPo.prototype.observe = function (options) {
            observe(options);
            if (options && options.type === 'throw') {
                throw new Error();
            }
        };
        MockPo.prototype.disconnect = function () {
            disconnect();
        };
        MockPo.supportedEntryTypes = ['resource', 'throw'];
        return MockPo;
    }());
    var cb = sinon.fake();
    var onFail = sinon.fake();
    var _a = __read(applyPerformanceObserver(MockPo, cb, true, onFail), 2), ob = _a[0], disc = _a[1];
    t.assert(ctor.calledOnce);
    ob('paint');
    t.assert(observe.notCalled);
    ob('resource');
    t.assert(observe.calledOnce);
    t.deepEqual(observe.args[0][0], {
        type: 'resource',
        buffered: false,
    });
    ob('throw');
    t.assert(observe.calledThrice);
    t.deepEqual(observe.args[1][0], {
        type: 'throw',
        buffered: false,
    });
    t.deepEqual(observe.args[2][0], {
        entryTypes: ['throw'],
    });
    var observerFn = ctor.args[0][0];
    var mockList = {
        getEntries: function () {
            return ['entry data'];
        },
    };
    var mockOb = {
        disconnect: sinon.fake(),
    };
    observerFn(mockList, mockOb);
    t.assert(cb.calledOnce);
    t.is(cb.args[0][0], 'entry data');
    t.assert(mockOb.disconnect.calledOnce);
    observerFn({}, mockOb);
    t.assert(onFail.calledOnce);
    t.assert(mockOb.disconnect.calledTwice);
    disc();
    t.assert(disconnect.calledOnce);
});
test('applyMonitor', function (t) {
    var MockMonitor = function (dep1, dep2) {
        return function (props, cb) {
            cb === null || cb === void 0 ? void 0 : cb({
                ev_type: 'mock',
            });
            var report = function () {
                return props.prop1 + dep1 + dep2;
            };
            return [report];
        };
    };
    var onReport = sinon.fake();
    var _a = __read(applyMonitor(MockMonitor, { prop1: 'prop1' }, onReport, ['val1', 'val2']), 1), report = _a[0];
    t.assert(onReport.calledOnce);
    t.deepEqual(onReport.args[0][0], {
        ev_type: 'mock',
    });
    t.assert(report);
    t.is(report(), 'prop1' + 'val1' + 'val2');
});
test('applyMonitor - failed', function (t) {
    var ErrorMonitor = function () {
        throw new Error();
    };
    t.notThrows(function () {
        t.deepEqual(applyMonitor(ErrorMonitor), []);
    });
});
test('applyUpdate', function (t) {
    var origin = {
        a: '123',
        b: '456',
    };
    var _a = __read(applyUpdate(origin), 2), obj = _a[0], update = _a[1];
    t.is(obj.a, '123');
    t.is(obj.b, '456');
    update({ a: '789' });
    t.is(obj.a, '789');
    t.is(obj.b, '456');
});
//# sourceMappingURL=apply-defaults.spec.js.map