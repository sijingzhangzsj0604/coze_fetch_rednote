import { WebReport, WebClient, SampleConfig, EventSampleRule, ConditionalSampleRule, Filter } from '../types';
interface HitBySampleRateFn {
    (sampleRate: number): boolean;
}
interface HitByRandomFn {
    (random: number, sampleRate: number): boolean;
}
declare type EventHitRule = Omit<EventSampleRule, 'name' | 'conditional_sample_rules'> & {
    hit: () => boolean;
    effectiveSampleRate: number;
    conditional_hit_rules?: ConditionalHitRule[];
};
declare type ConditionalHitRule = ConditionalSampleRule & {
    hit: () => boolean;
    effectiveSampleRate: number;
};
declare type SendEvent = WebReport & {
    common?: any;
};
export declare const parseValues: (values: string[], type: string) => (string | number | boolean)[];
export declare const checkVal: (val: any, values: any[], op: string) => boolean;
export declare const checkFilter: (ev: SendEvent, field: string, op: string, values: string[]) => boolean;
export declare const matchFilter: (ev: SendEvent, filter: Filter) => boolean;
export declare const getHitMap: (rules: SampleConfig['rules'], preCalcHit: boolean, baseRate: number, isHitBySampleRate: HitBySampleRateFn, random: number, isHitByRandom: HitByRandomFn) => Record<string, EventHitRule>;
export declare const getSampler: (userId: string, config: SampleConfig | undefined, isHitBySampleRate: HitBySampleRateFn, isHitByRandom: HitByRandomFn) => (ev: SendEvent) => SendEvent | false;
export declare const SamplePlugin: <C extends WebClient>(client: C) => void;
export {};
