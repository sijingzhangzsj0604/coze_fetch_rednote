import { From, CmdEnum, EventMap, CmdMap, CmdCompile, CompileOpt } from '../../protocol/compile';
import BaseModule from '../../common/Module';
import { ModuleName } from '../../types/protocol';
import { AppType, AppInfoList } from '../../types/commonData';
import Compile from './compile';
import GadgetCompile from './help/gadget';
export default class CompileModule extends BaseModule<ModuleName.compile, EventMap> implements CmdMap {
    protected compileMap: Map<number, Compile>;
    protected compilePath: string;
    protected compileTaskId: number;
    constructor();
    private findTaskId;
    private getOutputPath;
    private compile;
    [CmdEnum.Compile](opt: CompileOpt): ReturnType<CmdCompile>;
    [CmdEnum.SetPath](compilePath: string): Promise<boolean>;
    [CmdEnum.GetPath](): void | string;
    [CmdEnum.ListPath](appType?: AppType): Promise<AppInfoList>;
    [CmdEnum.Unpack](path: string, targetPath: string): Promise<void>;
    [CmdEnum.ClearByPath](compilePath: string, from?: From | 'all'): void;
    [CmdEnum.Clear](taskId?: number): void;
    getCompile(appType: AppType): typeof GadgetCompile;
}
