var PAGE_ACTIVITY_DELAY = 100;
var MAX_PAGE_ACTIVITY_DELAY = 10000;
var ROOT_TAGS = ['BODY', 'HTML', 'HEAD'];
/**
 * 控制等待策略和强制结算
 * 结算策略: 没有进行中的请求, 没有dom变更, 没有resource or longTask
 */
export var waitActionComplete = function (cb, forceClear, win) {
    var idleTimer;
    var maxIdleTimer;
    var started = false;
    var notify = function () {
        win.clearTimeout(idleTimer);
        started &&
            (idleTimer = win.setTimeout(function () {
                cb();
            }, PAGE_ACTIVITY_DELAY));
    };
    var start = function () {
        started = true;
        win.clearTimeout(maxIdleTimer);
        maxIdleTimer = win.setTimeout(function () {
            cb();
            forceClear();
        }, MAX_PAGE_ACTIVITY_DELAY);
        notify();
    };
    var complete = function () {
        started = false;
        win.clearTimeout(idleTimer);
        win.clearTimeout(maxIdleTimer);
    };
    return [start, notify, complete];
};
/**
 * 从target中获取path
 */
export var getDomPath = function (element) {
    var el = element;
    var stack = [];
    try {
        while (el.parentNode !== null) {
            var sibCount = 0;
            var sibIndex = 0;
            // eslint-disable-next-line @typescript-eslint/prefer-for-of
            for (var i = 0; i < el.parentNode.childNodes.length; i++) {
                var sib = el.parentNode.childNodes[i];
                if (sib.nodeName === el.nodeName) {
                    if (sib === el) {
                        sibIndex = sibCount;
                    }
                    sibCount++;
                }
            }
            if (el.hasAttribute('id') && el.id !== '') {
                stack.unshift(el.nodeName + '#' + el.id);
            }
            else if (sibCount > 1) {
                stack.unshift(el.nodeName + ':eq(' + sibIndex + ')');
            }
            else {
                stack.unshift(el.nodeName);
            }
            el = el.parentNode;
        }
        // removes the html element
        return stack.slice(1).join('>');
    }
    catch (_a) {
        return;
    }
};
export var isSupportsElementClosest = (function () {
    var supportsElementClosest;
    return function () {
        return supportsElementClosest === undefined
            ? (supportsElementClosest = 'closest' in HTMLElement.prototype)
            : supportsElementClosest;
    };
})();
export var findElementWithAttributeByParents = function (target, attribute, maxParentLoops) {
    if (maxParentLoops === void 0) { maxParentLoops = 10; }
    var element = target;
    for (var i = 0; i < maxParentLoops && element; i++) {
        if (~ROOT_TAGS.indexOf(element.nodeName))
            return;
        if (element.hasAttribute(attribute)) {
            return element;
        }
        element = element.parentElement;
    }
};
export var getActionNameByAttribute = function (target, attribute) {
    var elementWithAttribute;
    if (isSupportsElementClosest()) {
        elementWithAttribute = target.closest("[" + attribute + "]");
    }
    else {
        elementWithAttribute = findElementWithAttributeByParents(target, attribute);
    }
    if (!elementWithAttribute)
        return;
    var name = elementWithAttribute.getAttribute(attribute);
    // Possibly length of name is too long to be stored on backend.Let it go for now.Add truncation if someone oncalled
    return name.trim();
};
export var getActionName = function (target, attribute) {
    return getActionNameByAttribute(target, attribute) || target.innerText;
};
//# sourceMappingURL=util.js.map