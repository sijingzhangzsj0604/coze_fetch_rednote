import test from 'ava';
import sinon from 'sinon';
import { ContextPlugin } from '@slardar/sdk-template';
import { captureCurrentContext, syncReportWithCapturedContext } from '../capture';
import { createTestWebClient } from './util';
test('captureCurentContext', function (t) {
    var _a;
    var client = createTestWebClient();
    ContextPlugin(client);
    var c1 = captureCurrentContext(client);
    t.like(c1, {
        context: {},
    });
    client.init({ pid: 'init-pid' });
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('key', 'value');
    var c2 = captureCurrentContext(client);
    t.like(c2, {
        pid: 'init-pid',
        context: {
            key: 'value',
        },
    });
});
test('syncReportWithCapturedContext', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    ContextPlugin(client);
    client.init({ pid: 'init-pid' });
    client.start();
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('key', 'init-value');
    var c = captureCurrentContext(client);
    client.config({ pid: 'pid' });
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.set('key', 'value');
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    syncReportWithCapturedContext(client, c)(function () {
        client.report({
            ev_type: 'pageview',
            payload: {
                pid: 'payload-pid',
                source: 'user-set',
            },
        });
    });
    t.assert(onBuild.calledOnce);
    t.like(onBuild.args[0][0], {
        ev_type: 'pageview',
        payload: {
            pid: 'payload-pid',
            source: 'user-set',
        },
        overrides: {
            pid: 'init-pid',
            context: {
                key: 'init-value',
            },
        },
    });
});
//# sourceMappingURL=capture.spec.js.map