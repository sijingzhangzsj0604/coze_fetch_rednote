/** ******************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { PreferenceScope } from './preference-scope';
export interface PreferenceSchema {
    [name: string]: any;
    scope?: 'application' | 'window' | 'resource' | PreferenceScope;
    overridable?: boolean;
    overrideIdentifier?: string;
    properties: PreferenceSchemaProperties;
}
export declare namespace PreferenceSchema {
    function is(obj: any): obj is PreferenceSchema;
    function getDefaultScope(schema: PreferenceSchema): PreferenceScope;
}
export interface PreferenceSchemaProperties {
    [name: string]: PreferenceSchemaProperty;
}
export declare namespace PreferenceSchemaProperties {
    function is(obj: any): obj is PreferenceSchemaProperties;
}
export interface PreferenceDataSchema {
    [name: string]: any;
    scope?: PreferenceScope;
    properties: {
        [name: string]: PreferenceDataProperty;
    };
    patternProperties: {
        [name: string]: PreferenceDataProperty;
    };
}
export interface PreferenceItem {
    type?: PreferencePropertyType | PreferencePropertyType[];
    minimum?: number;
    /**
     * content assist (UI) default value
     */
    default?: any;
    /**
     * preference default value, if `undefined` then `default`
     */
    defaultValue?: any;
    enum?: Array<string | number | boolean>;
    enumDescriptions?: Array<string>;
    items?: PreferenceItem;
    properties?: {
        [name: string]: PreferenceItem;
    };
    additionalProperties?: object;
    overridable?: boolean;
    description?: string;
    markdownDescription?: string;
    deprecationMessage?: string;
    markdownDeprecationMessage?: string;
    [name: string]: any;
}
export interface PreferenceSchemaProperty extends PreferenceItem {
    description?: string;
    scope?: 'application' | 'window' | 'resource' | PreferenceScope;
}
export interface PreferenceDataProperty extends PreferenceItem {
    description?: string;
    scope?: PreferenceScope;
}
export declare namespace PreferenceDataProperty {
    function fromPreferenceSchemaProperty(schemaProps: PreferenceSchemaProperty, defaultScope?: PreferenceScope): PreferenceDataProperty;
}
export declare const PREFERENCE_PROPERTY_TYPE: {
    readonly STRING: "string";
    readonly ARRAY: "array";
    readonly INT: "integer";
    readonly NUMBER: "number";
    readonly OBJECT: "object";
    readonly BOOLEAN: "boolean";
    readonly NULL: "null";
    readonly STRING_ARRAY: "string[]";
};
export type PreferencePropertyType = typeof PREFERENCE_PROPERTY_TYPE[keyof typeof PREFERENCE_PROPERTY_TYPE];
//# sourceMappingURL=preference-schema.d.ts.map