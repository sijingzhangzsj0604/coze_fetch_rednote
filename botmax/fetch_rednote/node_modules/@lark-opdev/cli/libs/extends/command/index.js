"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const cli_ux_1 = require("cli-ux");
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const ora_1 = __importDefault(require("ora"));
const Parse = __importStar(require("../parser"));
const error_1 = require("../../utils/error");
const env_1 = __importDefault(require("../../utils/env"));
class default_1 extends command_1.Command {
    parse(options, argv = this.argv) {
        if (!options) {
            options = this.constructor;
        }
        return Parse.parse(argv, Object.assign({ context: this }, options));
    }
    _version() {
        let version = this.config.version;
        if (env_1.default.private) {
            version += ' ' + env_1.default.name.toLowerCase();
        }
        this.log(version);
        return this.exit(0);
    }
    exit(code) {
        (0, errors_1.exit)(code || process.exitCode);
    }
    notify(options) {
    }
    success(text) {
        return chalk_1.default.green(text);
    }
    catch(error) {
        if (error.code === 'EEXIT') {
            return Promise.resolve();
        }
        if (error.message.match(/Unexpected arguments?: (-h|--help)(,|\n)/)) {
            return this._help();
        }
        if (error.message.match(/Unexpected arguments?: (-v|--version)(,|\n)/)) {
            return this._version();
        }
        cli_ux_1.cli.action.stop(chalk_1.default.bold.red('!'));
        (0, error_1.showError)(error);
        return Promise.resolve();
    }
    createLoading({ text = 'Loading' }) {
        return (0, ora_1.default)({ text });
    }
}
exports.default = default_1;
