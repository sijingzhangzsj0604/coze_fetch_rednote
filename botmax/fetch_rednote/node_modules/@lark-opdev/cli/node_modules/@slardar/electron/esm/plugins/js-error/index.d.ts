import { JsErrorReport, MonitorConstructor } from '@slardar/sdk-web';
import { ElectronClient } from '../../types';
export declare const JS_ERR_PLUGIN_NAME = "jsError";
export declare const JS_ERROR_EV_TYPE = "js_error";
export declare type ReportJsError = (ex: any, extra?: Record<string, string>) => void;
export interface JSErrorConfig {
    ignoreErrors?: (string | RegExp)[];
    uncaughtException: boolean;
    unhandledRejection: boolean;
    dedupe?: boolean;
}
export interface JSErrorMonitorPluginConfig {
    [JS_ERR_PLUGIN_NAME]?: Partial<JSErrorConfig> | boolean;
}
export declare type WithCaptureException<C extends ElectronClient> = C & {
    captureException?: ReportJsError;
};
export declare function JsErrorMonitorPlugin<C extends ElectronClient>(client: C): void;
interface TearDown {
    (): void;
}
export declare type JsErrorMonitorConstructor = MonitorConstructor<JSErrorConfig, JsErrorReport, [
    _process: NodeJS.Process
], [
    ReportJsError,
    TearDown
]>;
export declare const JsErrorMonitor: JsErrorMonitorConstructor;
export {};
