import { Event } from '@opensumi/ide-utils';
export declare enum LogLevel {
    Verbose = 0,
    Debug = 1,
    Info = 2,
    Warning = 3,
    Error = 4,
    Critical = 5,
    Off = 6
}
export declare enum SupportLogNamespace {
    Main = "main",
    Render = "render",
    Node = "node",
    Browser = "browser",
    ExtensionHost = "extHost",
    App = "app",
    OTHER = "other"
}
interface ICoreLogger {
    verbose(...args: any[]): void;
    debug(...args: any[]): void;
    log(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
}
export interface BaseLogServiceOptions {
    /**
     * 对应存储日志的文件名
     */
    namespace?: string;
    /**
     * 设置落盘级别，默认 LogLevel.Info
     */
    logLevel?: LogLevel;
    /**
     * 进程的PID，会作为日志内容的前缀
     */
    pid?: number;
    /**
     * 落盘日志的存储文件夹
     * 例如： ~/.sumi/logs/20180909/
     */
    logDir?: string;
}
export interface ILogServiceOptions extends BaseLogServiceOptions {
    logServiceManager: ILogServiceManager;
    namespace: string;
    logLevel?: LogLevel;
    pid?: number;
    isShowConsoleLog?: boolean;
}
export interface Archive {
    /**
     * 将压缩的zip文件，写入流；通过该方法可以将zip文件写入本地或上传服务器
     * @param writeStream fs.WriteStream
     */
    pipe(writeStream: any): any;
}
export declare const ILogServiceManager: unique symbol;
export interface ILogServiceManager {
    onDidChangeLogLevel: Event<LogLevel>;
    getLogger(namespace: SupportLogNamespace, loggerOptions?: BaseLogServiceOptions): ILogService;
    getGlobalLogLevel(): LogLevel;
    removeLogger(namespace: SupportLogNamespace): any;
    setGlobalLogLevel(level: LogLevel): any;
    /**
     * 返回当前日志存放的目录
     */
    getLogFolder(): string;
    /**
     * 返回保存日志的根目录，为 getLogFolder() 的父目录
     */
    getRootLogFolder(): string;
    /**
     * 清理 getRootLogFolder() 中最近5天前的日志，仅保留最近5天日志
     */
    cleanOldLogs(): Promise<void>;
    /**
     * 清理 getRootLogFolder() 中的所有日志
     */
    cleanAllLogs(): Promise<void>;
    /**
     * 清理 day 之前的日志目录
     * @param day --格式为： 20190807
     */
    cleanExpiredLogs(day: number): Promise<void>;
    /**
     * @param day --格式为： 20190807
     */
    getLogZipArchiveByDay(day: number): Promise<Archive>;
    getLogZipArchiveByFolder(foldPath: string): Promise<Archive>;
    dispose(): any;
}
export interface IBaseLogService extends ICoreLogger {
    /**
     * 获取当前的log level
     */
    getLevel(): LogLevel;
    /**
     * 设置 log level
     */
    setLevel(level: LogLevel): void;
    critical(...args: any[]): void;
    /**
     * 直接发送log 消息，在此函数内部分发到上面的 log、error方法
     * @param level
     * @param message
     */
    sendLog(level: LogLevel, message: string): void;
    /**
     * 释放spdlog对象
     */
    drop(): Promise<void>;
    /**
     * 立即写入数据
     */
    flush(): Promise<void>;
    /**
     * 销毁当前实例
     */
    dispose(): void;
}
export interface ILogService extends IBaseLogService {
    /**
     * 设置 logger 信息，用于初始化后，更新 logger 设置
     */
    setOptions(options: BaseLogServiceOptions): any;
}
export declare const LogServiceForClientPath = "LogServiceForClientPath";
export interface ILogServiceClient extends ICoreLogger {
    getLevel(): Promise<LogLevel>;
    setLevel(level: LogLevel): Promise<void>;
    critical(...args: any[]): void;
    dispose(): Promise<void>;
}
export type IExtensionLogger = ICoreLogger;
export declare const ILoggerManagerClient: unique symbol;
export interface ILoggerManagerClient {
    onDidChangeLogLevel: Event<LogLevel>;
    getLogger(namespace: SupportLogNamespace, pid?: number): ILogServiceClient;
    setGlobalLogLevel(level: LogLevel): Promise<void>;
    getGlobalLogLevel(): Promise<LogLevel>;
    onDidLogLevelChanged(level: LogLevel): any;
    dispose(): Promise<void>;
    getLogFolder(): Promise<string>;
}
/**
 * DebugLog
 */
export interface IDebugLog extends ICoreLogger {
    info(...args: any[]): void;
    destroy(): void;
}
export declare class DebugLog implements IDebugLog {
    private namespace;
    private isEnable;
    constructor(namespace?: string);
    private getPre;
    private getColor;
    verbose: (...args: any[]) => void;
    debug: (...args: any[]) => void;
    log: (...args: any[]) => void;
    error: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    info: (...args: any[]) => void;
    destroy(): void;
}
/**
 * 兼容旧logger 提供的类型，同 ILogServiceClient
 */
export declare const ILogger: unique symbol;
export type ILogger = ILogServiceClient;
/**
 * 只输出在控制台，不会落盘
 */
export declare function getDebugLogger(namespace?: string): IDebugLog;
export {};
//# sourceMappingURL=log.d.ts.map