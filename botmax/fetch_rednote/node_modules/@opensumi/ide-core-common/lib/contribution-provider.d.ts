import { Injector, Domain, ConstructorOf } from '@opensumi/di';
export declare const ContributionProvider: unique symbol;
export interface ContributionProvider<T extends object> {
    getContributions(): T[];
    addContribution(...contributionsCls: ConstructorOf<any>[]): void;
    reload(): T[];
}
export declare class BaseContributionProvider<T extends object> implements ContributionProvider<T> {
    protected readonly domain: Domain;
    protected readonly injector: Injector;
    protected services: T[] | undefined;
    constructor(domain: Domain, injector: Injector);
    addContribution(...contributionsCls: ConstructorOf<T>[]): void;
    getContributions(): T[];
    reload(): T[];
}
/**
 * 使用工厂函数创建 ContributionProvider
 * @param injector 全局唯一的 injector，用来获取当前 Domain 的 Contribution、并注册 ContributionProvider
 * @param domain 用来区分 Contribution 的标识，也是 ContributionProvider 的 Token
 */
export declare function createContributionProvider(injector: Injector, domain: Domain): void;
//# sourceMappingURL=contribution-provider.d.ts.map