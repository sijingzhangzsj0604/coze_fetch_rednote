import { ModuleDesc, ModuleName, ModuleEventMap, ModuleCmdMap, CmdFun } from '../types/protocol';
import { AutoOptions } from '../types/auto';
export declare enum EventEnum {
}
export declare type EventMap = ModuleEventMap<never>;
export declare enum CmdEnum {
    Start = "Auto.start",
    Close = "Auto.close"
}
export declare type CmdStart = (m: ModuleName.auto, cmd: CmdEnum.Start, options: AutoOptions) => Promise<number>;
export declare type CmdClose = (m: ModuleName.auto, cmd: CmdEnum.Close) => void;
export declare type Command = CmdStart & CmdClose;
export interface CmdMap extends ModuleCmdMap<CmdEnum> {
    [CmdEnum.Start]: CmdFun<CmdStart>;
    [CmdEnum.Close]: CmdFun<CmdClose>;
}
declare type ModuleDependencies = ModuleName.storage | ModuleName.ui | ModuleName.service | ModuleName.eventTracker | ModuleName.sniffer | ModuleName.devtools | ModuleName.simulator | ModuleName.compile;
export declare const AutoDesc: ModuleDesc<EventMap, CmdMap, ModuleDependencies>;
export {};
