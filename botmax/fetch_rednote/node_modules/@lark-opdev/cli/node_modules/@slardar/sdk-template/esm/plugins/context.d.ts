import { AnyClient, Client } from '../types';
import { ContextAgent } from '../utils';
export declare type ContextualEvent = {
    extra?: {
        context?: Record<string, string>;
    };
};
export declare type WithContext<C extends AnyClient> = C & {
    context?: ContextAgent;
};
export declare type WithCommandContext<C extends AnyClient> = C & {
    'context.set': (k: string, v: any) => ContextAgent;
    'context.merge': (ctx: Record<string, any>) => ContextAgent;
    'context.delete': (k: string) => ContextAgent;
    'context.clear': () => ContextAgent;
    'context.get': (k: string) => string;
    'context.toString': () => Record<string, string>;
};
export declare const ContextPlugin: <E extends ContextualEvent>(client: Client<E, any, any, any, any, any, any>) => void;
