export declare type State = 'pause' | 'running' | 'stop';
export declare type SampleUserConfig = {
    collectInterval: number;
    sampleRate: number;
    collectCb: (() => any) | (() => Promise<any>);
    reportCb: (...args: any[]) => void;
    transSucCb?: (lastState: State, curState: State) => void;
    async?: {
        isWaitTillReturn: boolean;
    };
};
export declare type SampleConfig<Name> = SampleUserConfig & {
    name: Name;
};
export declare type SampleConfigList<Name> = SampleConfig<Name>[];
/**
 *
 *[pause state]-<startAction>->[running state]-<stopAction>->[stop state]
 *       | 个------<pauseAction>--------| 个-----<startAction>----| 个
 *       |                                                          |
 *       -----------------------------<stopAction>------------------
 */
export declare function createSampleController<Name extends string>(initConfigList: SampleConfigList<Name>): {
    startAction: (name: Name, options?: {
        isImmediately: boolean;
    }) => boolean;
    stopAction: (name: Name, options?: {
        isReportAll: boolean;
    }) => boolean;
    pauseAction: (name: Name, options?: {
        capacity: number;
    }) => boolean;
    update: (name: Name, updateConfig: Partial<SampleUserConfig>, options?: {
        isReStartImmediately?: boolean | undefined;
        startOptions?: {
            isImmediately: boolean;
        } | undefined;
        stopOptions?: {
            isReportAll: boolean;
        } | undefined;
    }) => void;
    getState: (name: Name) => State;
    getQueueSize: (name: Name) => number;
};
