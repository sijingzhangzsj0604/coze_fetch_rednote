export declare type CallBack<P> = (params: P) => void;
export declare type TearDown = () => void;
export declare type Setup<O, P, R> = (props: O, cb?: CallBack<P>, ...other: any[]) => R;
export declare type MabyTuple<T extends [...any[]]> = {
    [Index in keyof T]?: T[Index] | null;
};
export interface MonitorConstructor<Option = any, SendParam = any, Deps extends [...any[]] = any[], Returns extends any[] | undefined | void = void> {
    name: string;
    (...dep: MabyTuple<Deps> | []): Setup<Option, SendParam, Returns> | undefined;
}
export declare type MonitorReturn<M extends MonitorConstructor<any, any, any, any>> = M extends MonitorConstructor<any, any, any, infer R> ? R : never;
