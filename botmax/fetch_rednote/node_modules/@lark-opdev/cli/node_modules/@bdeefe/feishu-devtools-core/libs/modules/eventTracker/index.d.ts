import BaseModule from '../../common/Module';
import { CmdEnum, CmdMap, EventMap } from '../../protocol/eventTracker';
import { CounterEventMap, FlexibleEventParams, FlexibleLogParams, InitConfig, NormalCounterKey, PerformanceTrackEvent, PerformanceTrackEventParams, SlardarLogParam, SlardarTimelineParam, TimerEventMap, TrackItem } from '../../types/eventTracker';
import { ModuleName } from '../../types/protocol';
import Request from '../service/help/Request';
export { EventTrack } from './eventTrackDef';
export default abstract class EventTracker extends BaseModule<ModuleName.eventTracker, EventMap> implements CmdMap {
    private timingStore;
    request: Request;
    constructor(config: InitConfig);
    config: InitConfig | undefined;
    reportedOpen: boolean;
    commonTags: Record<string, string>;
    teaSDK: any;
    protected created(): void;
    [CmdEnum.Init](): void;
    protected abstract initSlardar({ uuid }: {
        uuid: string;
    }): void;
    protected abstract initTea(commonTags: Record<string, any>): void;
    teaCollect(name: any, event: any): void;
    protected abstract commonSend(param: FlexibleEventParams | FlexibleLogParams): void;
    protected abstract reportError(e: Error): void;
    [CmdEnum.Track](eventName: any, params: any): void;
    [CmdEnum.Counter]<K extends NormalCounterKey, Args extends CounterEventMap[K]>(eventName: K, opt?: Args): void;
    [CmdEnum.Counter]<K extends NormalCounterKey, Args extends CounterEventMap[K]>(m: ModuleName.eventTracker, cmd: CmdEnum.Counter, eventName: K, opt?: Args): void;
    [CmdEnum.PerformanceTrack](event_name: PerformanceTrackEvent, params: PerformanceTrackEventParams): void;
    [CmdEnum.Timer]<K extends keyof TimerEventMap, Args extends TimerEventMap[K]>(event_name: K, opt: Args): void;
    [CmdEnum.Log](param: SlardarLogParam): void;
    [CmdEnum.PerformanceTrackV2](eventName: string, tags?: TrackItem['tags'], traceId?: string, timingName?: string): void;
    [CmdEnum.ResultReport](eventName: string, result: 'success' | 'fail', tags?: Record<string, string>, traceId?: string): void;
    abstract [CmdEnum.TimeLine](param: SlardarTimelineParam): void;
    abstract [CmdEnum.End](): void;
}
