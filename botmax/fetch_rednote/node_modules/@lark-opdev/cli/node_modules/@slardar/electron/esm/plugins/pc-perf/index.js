/**
 * report cpu and memory as a custom event
 *
 */
import { __assign, __read } from "tslib";
import { applyMonitor } from '@slardar/sdk-web';
import { getPluginConfig } from '../utils';
import { createSampleController } from './sampleController';
export var PC_PERF_PLUGIN_NAME = 'pcPerf';
var DEFAULT_COLLECT_INTERVAL = 60 * 1000;
var DEFAULT_SAMPLE_RATE = 1;
var defaultConfig = {
    cpu: {
        collectInterval: DEFAULT_COLLECT_INTERVAL,
        sampleRate: DEFAULT_SAMPLE_RATE,
        dataGetter: function () { return ({}); },
    },
    memory: {
        collectInterval: DEFAULT_COLLECT_INTERVAL,
        sampleRate: DEFAULT_SAMPLE_RATE,
        dataGetter: function () { return ({}); },
    },
};
export function PcPerfMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, PC_PERF_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var _a = __read(applyMonitor(PcPerfMonitor, config, function (ev) {
            client.report(ev);
        }, []), 2), action = _a[0], tearDown = _a[1];
        client.on('beforeDestroy', tearDown);
        client.provide('sampleController', action);
    });
}
// just use to ts type
var wrapperFunc = function () { return createSampleController({}); };
export var PcPerfMonitor = function () {
    return function (props, cb) {
        var _a, _b, _c, _d;
        var cpu = props.cpu, memory = props.memory;
        var report = function (name, metrics, categories) {
            if (cb) {
                cb({
                    ev_type: 'custom',
                    payload: {
                        name: name,
                        metrics: metrics,
                        categories: categories,
                        type: 'event',
                    },
                });
            }
        };
        var initConfigList = [];
        if (cpu) {
            initConfigList.push({
                name: 'cpu',
                collectInterval: (_a = cpu.collectInterval) !== null && _a !== void 0 ? _a : DEFAULT_COLLECT_INTERVAL,
                sampleRate: (_b = cpu.sampleRate) !== null && _b !== void 0 ? _b : DEFAULT_SAMPLE_RATE,
                transSucCb: cpu.transSucCb,
                async: cpu.async,
                collectCb: cpu.dataGetter,
                reportCb: function (collectData) {
                    return report('cpu', __assign(__assign({}, collectData), cpu.extraMetrics), cpu.categories);
                },
            });
        }
        if (memory) {
            initConfigList.push({
                name: 'memory',
                collectInterval: (_c = memory.collectInterval) !== null && _c !== void 0 ? _c : DEFAULT_COLLECT_INTERVAL,
                sampleRate: (_d = memory.sampleRate) !== null && _d !== void 0 ? _d : DEFAULT_SAMPLE_RATE,
                transSucCb: memory.transSucCb,
                async: memory.async,
                collectCb: memory.dataGetter,
                reportCb: function (collectData) {
                    return report('memory', __assign(__assign({}, collectData), memory.extraMetrics), memory.categories);
                },
            });
        }
        var action = createSampleController(initConfigList);
        // start all
        initConfigList.forEach(function (_a) {
            var name = _a.name;
            return action.startAction(name);
        });
        var tearDown = function () {
            action.stopAction('cpu', { isReportAll: true });
            action.stopAction('memory', { isReportAll: true });
        };
        return [action, tearDown];
    };
};
//# sourceMappingURL=index.js.map