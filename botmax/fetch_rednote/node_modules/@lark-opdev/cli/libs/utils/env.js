"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initEnvironments = exports.environment = exports.isDev = exports.getEnvironmentConfig = exports.setEnv = exports.getEnv = exports.default = void 0;
const env_1 = require("@bdeefe/feishu-devtools-core/libs/config/env");
var env_2 = require("@bdeefe/feishu-devtools-core/libs/config/env");
Object.defineProperty(exports, "default", { enumerable: true, get: function () { return __importDefault(env_2).default; } });
Object.defineProperty(exports, "getEnv", { enumerable: true, get: function () { return env_2.getEnv; } });
Object.defineProperty(exports, "setEnv", { enumerable: true, get: function () { return env_2.setEnv; } });
var environment_1 = require("@bdeefe/feishu-devtools-core/libs/config/environment");
Object.defineProperty(exports, "getEnvironmentConfig", { enumerable: true, get: function () { return environment_1.getEnvironmentConfig; } });
exports.isDev = process.env.CLI_ENV === 'development';
exports.environment = [];
const initEnvironments = function (env) {
    return __awaiter(this, void 0, void 0, function* () {
        const defaultEnv = yield (0, env_1.getEnv)();
        (env || defaultEnv).environments.forEach((item) => exports.environment.push(item.id));
    });
};
exports.initEnvironments = initEnvironments;
