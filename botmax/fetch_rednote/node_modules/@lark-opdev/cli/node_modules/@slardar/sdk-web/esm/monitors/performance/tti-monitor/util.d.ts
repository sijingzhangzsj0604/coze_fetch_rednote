import { NEWPerformanceLongTask, ObserverItem, BeforeCb, AfterCb, NewXMLHttpRequest } from './type';
/**
 * start 方法开启一个调度器，传入回调和调度时间
 * reschedule 重新以一个更长的时间调度
 * stop 停止调度
 */
export declare const applyScheduler: (now: typeof performance['now']) => readonly [(cb: () => void, earliestTime: number) => void, () => void, (earliestTime: number) => void];
/**
 * Computes the time (in milliseconds since requestStart) that the network was
 * last known to have >2 requests in-flight.
 */
export declare const calcLastNet2Busy: (undoneReqStarts: number[], observedResReqs: ObserverItem[], now: typeof performance['now']) => number;
export declare const getRequestTimes: (requestTimes: Record<number, number>) => number[];
/**
 * 监听包含 ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'] 标签的 dom 变更
 */
export declare const observeResFetchMutations: (MutationObserver: false | {
    new (callback: MutationCallback): MutationObserver;
    prototype: MutationObserver;
} | null | undefined, callback: (mutation: MutationRecord) => void) => readonly [() => void, () => false | void | null | undefined];
/**
 * Returns either a manually set min value or the time since
 * domContentLoadedEventEnd and navigationStart. If the
 * domContentLoadedEventEnd data isn't available, `null` is returned.
 * @return {number|null}
 */
export declare const getMinValue: (timing?: PerformanceTiming | undefined) => number | null;
/**
 * Computes the TTI value...
 * @param {number} searchStart
 * @param {number} minValue
 * @param {number} lastKnownNetwork2Busy
 * @param {number} currentTime
 * @param {!Array<{start: (number), end: (number)}>} longTasks
 * @return {number|null}
 */
export declare const computeTTI: (searchStart: number, minValue: number, lastKnownNetwork2Busy: number, currentTime: number, longTasks: Array<{
    start: number;
    end: number;
}>) => number | null;
/**
 * 劫持 XHR.open 方法, 记录 method
 */
export declare const hookXHROpen: (open: XMLHttpRequest['open']) => any;
/**
 * 劫持 XHR.send 方法，回调 uniqId 为偶数
 */
export declare const hookXHRSend: (send: XMLHttpRequest['send'], before: BeforeCb, after: AfterCb) => (this: NewXMLHttpRequest, body?: Document | XMLHttpRequestBodyInit | null | undefined) => void;
/**
 * 劫持 fetch，回调 uniqId 为奇数
 */
export declare const hookFetch: (_fetch: typeof window.fetch, before: BeforeCb, after: AfterCb) => (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;
/**
 * 返回的 iterEntries 方法用于迭代监听到的 longtask 和 resource entries，
 * 将缓存监听到的 longTasks 和 network
 */
export declare const gatherLongTaskAndNetworks: () => readonly [NEWPerformanceLongTask[] & {
    notSupport?: boolean | undefined;
}, ObserverItem[], (longTaskCb?: ((entry: PerformanceEntry) => void) | undefined, resourceCb?: ((entry: PerformanceEntry) => void) | undefined) => (entry: PerformanceEntry) => void];
