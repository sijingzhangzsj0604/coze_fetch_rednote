import { __assign } from "tslib";
import { id, initSubjectInGlobal, createSafeObserver } from '@slardar/sdk-template';
import { fetchSubject, hookFetch } from '../../collector/http';
import { resourceSubject } from '../../collector/pref';
import { httpGetterWithFetchObserver } from '../../monitors/http/fetch';
import { setTraceContext, setVolTraceContext } from '../../monitors/http/trace';
import { getCbHook } from './ajax';
import { getPluginConfig } from './utils';
export var FETCH_MONITOR_PLUGIN_NAME = 'fetch';
var defaultConfig = {
    autoWrap: true,
    hookCbAtReq: id,
    ignoreUrls: [],
    collectBodyOnError: false,
};
export function FetchMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, FETCH_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var fetchConfig = __assign(__assign({}, config), { hookCbAtReq: getCbHook(client), setTraceHeader: setTraceContext(config.trace) });
        var getResourceObserver = function () { return initSubjectInGlobal(client, resourceSubject); };
        fetchConfig.autoWrap &&
            httpGetterWithFetchObserver(client.report.bind(client), tearDownGroup, [initSubjectInGlobal(client, fetchSubject), getResourceObserver], fetchConfig);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
        client.provide('wrapFetch', function (f) {
            var newFetch = undefined;
            httpGetterWithFetchObserver(client.report.bind(client), tearDownGroup, [
                createSafeObserver(function (next) {
                    newFetch = hookFetch(f, next);
                }),
                getResourceObserver,
            ], fetchConfig);
            return newFetch;
        });
    });
}
export function FetchMonitorVolPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = getPluginConfig(client, FETCH_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var fetchConfig = __assign(__assign({}, config), { hookCbAtReq: getCbHook(client), setTraceHeader: setVolTraceContext(config.trace, "app_id=" + ((_a = client.config()) === null || _a === void 0 ? void 0 : _a.aid) + ",origin=web") });
        fetchConfig.autoWrap &&
            httpGetterWithFetchObserver(client.report.bind(client), tearDownGroup, [initSubjectInGlobal(client, fetchSubject), function () { return initSubjectInGlobal(client, resourceSubject); }], fetchConfig);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
    });
}
//# sourceMappingURL=fetch.js.map