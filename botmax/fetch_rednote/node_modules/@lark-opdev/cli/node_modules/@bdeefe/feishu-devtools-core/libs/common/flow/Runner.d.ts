import { AppType, SDKInfo } from '../../types/commonData';
import { CompilePathType } from '../../types/simulator';
import { StorageStruct, DiffPaths, AppMap } from '../../types/storage';
import Storage from '../../modules/storage';
interface KeyMap {
    root: 'projects' | 'blocks' | 'h5OfflineList' | 'h5InBlockList';
    config: Exclude<keyof StorageStruct['ideConfig'], 'sdkRootPath'>;
}
interface BaseOpt<A extends AppType> {
    isApp: (compilePath: string) => Promise<CompilePathType>;
    fetchSdkList: () => Promise<SDKInfo[]>;
    listCompilePaths: () => {
        compilePath: string;
        type: AppType;
        projectName: string;
    }[];
    getStorageKey: <K extends keyof KeyMap>(key: K) => KeyMap[K];
    getHtmlName: (compilePath?: string) => string;
    initProjectData: (compilePath: string, basePath: string, data: StorageStruct, environment: string) => Promise<AppMap[A]>;
    getProjectData: <K extends keyof AppMap[A]>(compilePath: string, k: K, data: StorageStruct) => AppMap[A][K] | void;
    setProjectData: <K extends keyof AppMap[A]>(compilePaht: string, k: K, data: AppMap[A][K], allData: StorageStruct) => DiffPaths;
    saveProject: (key: string, data: unknown, storage: Storage) => void;
}
interface Option<A extends AppType> extends BaseOpt<A> {
    init: (compilePath: string) => void;
}
declare class Runner {
    private plugins;
    use<A extends AppType>(type: A, opt: BaseOpt<A> & Partial<Option<A>>): void;
    get appTypes(): AppType[];
    run<A extends AppType, K extends keyof Option<A>>(type: AppType, hook: K, ...args: Parameters<Option<A>[K]>): ReturnType<Option<A>[K]>;
    runWithContext<A extends AppType, K extends keyof Option<A>>(context: unknown, type: A, hook: K, ...args: Parameters<Option<A>[K]>): ReturnType<Option<A>[K]>;
}
declare const _default: Runner;
export default _default;
