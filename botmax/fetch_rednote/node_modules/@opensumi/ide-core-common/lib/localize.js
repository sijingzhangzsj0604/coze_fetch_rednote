"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFormatLocalizedStr = exports.createLocalizedStr = exports.replaceNlsField = exports.replaceLocalizePlaceholder = exports.getAvailableLanguages = exports.setLanguageId = exports.getCurrentLanguageInfo = exports.getCodeLanguage = exports.getLanguageId = exports.registerLocalizationBundle = exports.formatLocalize = exports.localize = exports.localizationRegistryMap = void 0;
const ide_utils_1 = require("@opensumi/ide-utils");
const { format, mnemonicButtonLabel } = ide_utils_1.strings;
let _currentLanguageId = 'zh-CN';
exports.localizationRegistryMap = new ide_utils_1.CaseInsensitiveMap();
function localize(symbol, defaultMessage, scope = 'host', language = _currentLanguageId) {
    const localizationRegistry = getLocalizationRegistry(scope);
    return localizationRegistry.getLocalizeString(symbol, defaultMessage, language);
}
exports.localize = localize;
function formatLocalize(symbol, ...args) {
    return format(localize(symbol), ...args);
}
exports.formatLocalize = formatLocalize;
function registerLocalizationBundle(bundle, scope = 'host') {
    return getLocalizationRegistry(scope).registerLocalizationBundle(bundle);
}
exports.registerLocalizationBundle = registerLocalizationBundle;
function isExtensionLocalizationValue(thing) {
    return typeof thing === 'object' && thing.message;
}
class LocalizationRegistry {
    constructor() {
        this.localizationMap = new ide_utils_1.CaseInsensitiveMap();
        this.localizationInfo = new ide_utils_1.CaseInsensitiveMap();
    }
    registerLocalizationBundle(bundle) {
        const languageId = bundle.languageId;
        if (!languageId) {
            return;
        }
        const existingMessages = this.getContents(languageId);
        Object.keys(bundle.contents).forEach((key) => {
            const rawContent = bundle.contents[key];
            let content;
            if (isExtensionLocalizationValue(rawContent)) {
                content = rawContent.message;
            }
            else {
                content = rawContent;
            }
            existingMessages[key] = mnemonicButtonLabel(content, true); // 暂时去除所有注记符
        });
        if (!this.localizationInfo.has(languageId)) {
            this.localizationInfo.set(languageId, Object.assign({}, bundle, { contents: undefined }));
        }
    }
    getLocalizeString(key, defaultValue, languageId = _currentLanguageId) {
        return this.getContents(languageId)[key] || this.getContents('default')[key] || defaultValue || '';
    }
    getContents(languageId = 'zh-CN') {
        if (!languageId) {
            return {};
        }
        if (!this.localizationMap.has(languageId)) {
            this.localizationMap.set(languageId, {});
        }
        return this.localizationMap.get(languageId);
    }
    getAllLanguages() {
        return Array.from(this.localizationInfo.values());
    }
}
/**
 * 获取当前语言 ID，默认为中文
 * @returns 当前语言 ID
 */
function getLanguageId() {
    return _currentLanguageId;
}
exports.getLanguageId = getLanguageId;
/**
 * for vscode extension use.
 *
 * vscode consider that `en` and `en-us` are the same language(you can search for `en-us` in their code base).
 * and their default language is `en`, so we should transform the language id to the vscode language id.
 *
 * and vscode fetch the language id from the browser (`navigator.language`) or electron's [`app.getLocale()`](https://www.electronjs.org/zh/docs/latest/api/app#appgetlocale).
 * they both using Chromium's l10n_util library. Possible values are here: https://source.chromium.org/chromium/chromium/src/+/master:ui/base/l10n/l10n_util.cc
 *
 * The language used for the user interface. The format of the string is all lower case (e.g. zh-tw for Traditional Chinese)
 * see: [language](https://github.com/microsoft/vscode/blob/32b031eeefc4fd27a21659d35070967bfe965bcc/src/vs/base/common/platform.ts#L165)
 */
function getCodeLanguage() {
    var _a;
    const languageId = _currentLanguageId.toLowerCase();
    return ((_a = {
        'en-us': 'en',
    }[languageId]) !== null && _a !== void 0 ? _a : languageId);
}
exports.getCodeLanguage = getCodeLanguage;
function getCurrentLanguageInfo(scope = 'host') {
    return getLocalizationRegistry(scope).localizationInfo.get(_currentLanguageId);
}
exports.getCurrentLanguageInfo = getCurrentLanguageInfo;
function setLanguageId(languageId) {
    _currentLanguageId = languageId;
}
exports.setLanguageId = setLanguageId;
function getAvailableLanguages(scope = 'host') {
    return getLocalizationRegistry(scope).getAllLanguages();
}
exports.getAvailableLanguages = getAvailableLanguages;
function getLocalizationRegistry(scope) {
    if (!exports.localizationRegistryMap.has(scope)) {
        exports.localizationRegistryMap.set(scope, new LocalizationRegistry());
    }
    return exports.localizationRegistryMap.get(scope);
}
/**
 * 将整段字符串中所有的占位符标识的做一遍转换，
 * 标识符转换失败则返回该字符串本身：
 * ```js
 * "%abcd%1 %1234%2".replace(/%(.*?)%/g, (c, a)=>{return c;})
 * -> "%abcd%1 %1234%2"
 * ```
 * @param label 要转换的字段
 * @param scope 默认为 host
 */
function replaceLocalizePlaceholder(label, scope) {
    if (label) {
        return label.replace(/%(.*?)%/g, (w, p) => localize(p, w, scope).replace(/\"/g, '\\"'));
    }
    return label;
}
exports.replaceLocalizePlaceholder = replaceLocalizePlaceholder;
function replaceNlsField(label, scope, fallback = undefined, language = _currentLanguageId) {
    if (label) {
        const nlsRegex = /^%([\w\d.-]+)%$/i;
        const result = nlsRegex.exec(label);
        if (result) {
            return localize(result[1], fallback, scope, language);
        }
    }
    return label;
}
exports.replaceNlsField = replaceNlsField;
function createLocalizedStr(raw, scope, fallback, language, defaultLanguageId = 'en-US') {
    const localized = replaceNlsField(raw, scope, fallback, language) || raw;
    const alias = replaceNlsField(raw, scope, undefined, defaultLanguageId);
    return {
        raw,
        localized,
        alias: alias || localized,
    };
}
exports.createLocalizedStr = createLocalizedStr;
function createFormatLocalizedStr(raw, ...args) {
    const defaultLanguageId = 'en-US';
    const localized = format(localize(raw, raw, undefined), ...args) || raw;
    const alias = format(localize(raw, raw, undefined, defaultLanguageId), ...args);
    return {
        raw,
        localized,
        alias: alias || localized,
    };
}
exports.createFormatLocalizedStr = createFormatLocalizedStr;
//# sourceMappingURL=localize.js.map