"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllDeps = exports.addDeps = void 0;
var util_1 = require("./util");
var parameter_helper_1 = require("./parameter-helper");
var reflect_helper_1 = require("./reflect-helper");
var DEP_KEY = Symbol('DEP_KEY');
var depMeta = (0, reflect_helper_1.createConstructorMetadataManager)(DEP_KEY);
function getDeps(target) {
    return depMeta.get(target) || [];
}
function addDeps(target) {
    var tokens = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        tokens[_i - 1] = arguments[_i];
    }
    var deps = getDeps(target);
    return depMeta.set(deps.concat(tokens), target);
}
exports.addDeps = addDeps;
function getAllDepsWithScanned(targets, scanned) {
    var e_1, _a;
    var deps = [];
    try {
        for (var targets_1 = __values(targets), targets_1_1 = targets_1.next(); !targets_1_1.done; targets_1_1 = targets_1.next()) {
            var target = targets_1_1.value;
            // only function types has dependency
            if (typeof target !== 'function' || scanned.includes(target)) {
                continue;
            }
            else {
                scanned.push(target);
            }
            // Find the dependencies of the target, the dependencies of the constructor, and the dependencies of the dependencies
            var targetDeps = getDeps(target);
            var parameters = (0, parameter_helper_1.getParameterDeps)(target);
            var spreadDeeps = getAllDepsWithScanned(targetDeps, scanned);
            deps.push.apply(deps, __spreadArray(__spreadArray(__spreadArray([], __read(targetDeps), false), __read(parameters), false), __read(spreadDeeps), false));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (targets_1_1 && !targets_1_1.done && (_a = targets_1.return)) _a.call(targets_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return deps;
}
function getDepsWithCache(target, cache) {
    if (cache.has(target)) {
        return cache.get(target);
    }
    var scanned = [];
    var deps = (0, util_1.uniq)(getAllDepsWithScanned([target], scanned));
    cache.set(target, deps);
    return deps;
}
var allDepsCache = new Map();
/**
 * get all dependencies of input tokens.
 * @param tokens
 */
function getAllDeps() {
    var tokens = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tokens[_i] = arguments[_i];
    }
    var depsArr = tokens.map(function (item) { return getDepsWithCache(item, allDepsCache); });
    return (0, util_1.uniq)((0, util_1.flatten)(depsArr));
}
exports.getAllDeps = getAllDeps;
