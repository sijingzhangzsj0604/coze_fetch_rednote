import { MonitorConstructor } from '../../../types';
import { PerformanceReport } from '../../../types/report';
import { PerformanceLongtask } from '../../../types/thrift/browser/collector_v2/performance_longtask';
import { PerformancePrecollect } from '../type';
export interface ObserverItem {
    start: number;
    end: number;
}
export interface NEWPerformanceLongTask extends PerformanceLongtask {
    start: number;
    end: number;
}
export interface NewXMLHttpRequest extends XMLHttpRequest {
    _method: string;
}
export declare type BeforeCb = (id: number, val: number) => void;
export declare type AfterCb = (id: number, err?: Error) => void;
export interface TTIMonitorConfig {
    minValue?: number;
    isAsync?: number;
    precollect: PerformancePrecollect;
}
export interface NodeWithChildren extends Node {
    children: NodeList;
}
export declare type GetTTISync = () => number;
export declare type TTIMonitorConstructor = MonitorConstructor<TTIMonitorConfig, PerformanceReport, [
    XMLHttpRequest: typeof XMLHttpRequest,
    window: Window,
    PerformanceObserver: typeof PerformanceObserver,
    MutationObserver: typeof MutationObserver,
    performance: Performance
], [
    GetTTISync
]>;
export interface NewXMLHttpRequest extends XMLHttpRequest {
    _method: string;
}
