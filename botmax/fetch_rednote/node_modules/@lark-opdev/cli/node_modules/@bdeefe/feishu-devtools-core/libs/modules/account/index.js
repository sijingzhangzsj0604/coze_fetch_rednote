"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o);var i=Object.getOwnPropertyDescriptor(t,o);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,n,i)}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__awaiter=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,r){function s(e){try{c(n.next(e))}catch(e){r(e)}}function a(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const node_1=__importDefault(require("@lark-opdev/i18n/libs/node")),clear_1=require("../../biz/clear"),Error_1=__importStar(require("../../common/Error")),Module_1=__importDefault(require("../../common/Module")),api_1=require("../../config/api"),common_1=require("../../config/common"),env_1=__importDefault(require("../../config/env")),protocol_1=require("../../protocol"),account_1=require("../../protocol/account"),protocol_2=require("../../types/protocol"),lang_1=require("../../utils/lang"),Server_1=__importDefault(require("./help/Server")),isbrandInEnv=(e,t)=>!!env_1.default.private||(!("feishu"!==e||!["feishu","feishu-boe","feishu-pre"].includes(t))||!("lark"!==e||!["lark","lark-boe","lark-pre"].includes(t)));class AccountModule extends Module_1.default{constructor(){super(protocol_2.ModuleName.account)}created(){return __awaiter(this,void 0,void 0,(function*(){const e=this.log.bind(this,"info","created"),t=this["Account.info"]();t&&t.user&&!t.user.env&&(e("refreshAccountInfo","start"),yield this.refreshAccountInfo(t),e("refreshAccountInfo","end"))}))}getLoginUrl(e,t,o){const n=this.log.bind(this,"info","getLoginUrl"),{v5URLList:i=[]}=this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.GetV5URLList);let r;r=api_1.API.OAuthCallback.key&&(0,common_1.featureGating)("opdev.request.v5")&&i.includes(api_1.API.OAuthCallback.key)&&api_1.newAPI[api_1.API.OAuthCallback.key]?(0,api_1.getBaseURL)(o,api_1.newAPI[api_1.API.OAuthCallback.key].type,api_1.SubDomain.open):(0,api_1.getBaseURL)(o,api_1.API.OAuthCallback.type,api_1.SubDomain.open);const s=encodeURIComponent(`${r}${api_1.API.OAuthCallback.url}?token=${t}&redirect=`+encodeURIComponent(e+"/succeed")),a=(0,api_1.getDomain)(o),c=`https://${api_1.SubDomain.passport}.${a}/accounts/page/login?app_id=${api_1.OPEN_PLATFORM_APP_ID}&redirect_uri=${s}&lang=`;return n("getLoginUrl","result",{loginUrl:c}),{redirectUrl:e+"/login",loginUrl:c}}checkLogin(e,t,o=0){return __awaiter(this,void 0,void 0,(function*(){const n=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.checkLogin,{token:e},{responseHeader:!0}),i=n.headers["set-cookie"];let r="";if(!n.data||"number"==typeof n.data.error&&0!==n.data.error||0!==n.data.code){if(o>1)return{cookie:r,environment:t};const n="feishu"===t?"lark":"feishu";return this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:n}),o++,this.checkLogin(e,n,o)}return Array.isArray(i)&&i.forEach(e=>{e.includes("miniprogram-session=")&&(r=e.split(";")[0])}),{cookie:r,environment:t}}))}chooseEnvironment(e,t){const o=env_1.default.environments.map(e=>({name:e.name,value:e.id})),n=env_1.default.environments.map(e=>e.id);if(t){if(n.includes(t))return Promise.resolve(t);throw new Error_1.default({code:Error_1.CoreErrorCode.PARAM_ERROR,message:node_1.default.t("PARAM_ERROR_ENVIRONMENT_INVALID"),advise:node_1.default.t("PARAM_ERROR_ENVIRONMENT_ADVISE",{suggestEnvironments:n.join(", ")})})}return 1===env_1.default.environments.length?Promise.resolve(env_1.default.environments[0].id):this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.pick,o,e)}formatTenantList(e,t){return e.map(e=>({user:{id:e.user.id,name:e.user.name,avatar:e.user.avatar_url,loginCredentialId:e.user.login_credential_id,env:t},tenant:{id:e.user.tenant.id,name:e.user.tenant.name,avatar:e.user.tenant.icon_url,isLogin:e.is_login}}))}requestUserInfo(){return __awaiter(this,void 0,void 0,(function*(){const e=this.getPassportWebHeader();return yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.userInfo,{app_id:api_1.OPEN_PLATFORM_APP_ID},{headers:e})}))}requestLoginTenantList(){return __awaiter(this,void 0,void 0,(function*(){try{const e=this.getPassportWebHeader(),t=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.tenantList,{app_id:api_1.OPEN_PLATFORM_APP_ID},{headers:e});if(Array.isArray(t)&&t.length)return t;throw Error()}catch(e){return this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.showInfo,{content:"Failed to request tenant list",type:"warn"}),[]}}))}parseCredentialBindingIdentities(e=[],t){const o="lark"===t?[2,1,32]:[1,2,32],n=e.reduce((e,t)=>{const o=t.credential.credential;return e[o]||(e[o]={credential:{credential:t.credential.credential,credential_type:t.credential.credential_type},user_list:[]}),e[o].user_list=[...e[o].user_list,...t.user_list.map(e=>(e.credential=t.credential,e))],e},{}),i=Object.values(n).sort((e,t)=>o.indexOf(e.credential.credential_type)-o.indexOf(t.credential.credential_type)),r=new Set,s=[];return i.forEach(e=>{const{credential:t,user_list:o}=e,n=[];o.forEach(e=>{const t=e.user.id;r.has(t)||(r.add(t),n.push(e))}),n.length>0&&s.push({credential:t,user_list:n})}),s}requestAllTenantList(e,t="feishu"){return __awaiter(this,void 0,void 0,(function*(){const o=new Set(e.map(({user:e})=>e.id));try{const n=this.getPassportWebHeader(),i=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.getAllTenant,{app_id:api_1.OPEN_PLATFORM_APP_ID},{headers:n}),{step_info:r}=i,{credential_binding_identities:s}=r,a=this.parseCredentialBindingIdentities(s,t).map(({user_list:e})=>e).reduce((e,t)=>e.concat(t),[]),c=e.map(e=>Object.assign(e,{is_login:!0}));for(let e=0;e<a.length;++e){const t=a[e];o.has(t.user.id)||c.push(Object.assign(t,{is_login:!1}))}return c}catch(t){return this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.showInfo,{content:"Failed to request all tenant list",type:"warn"}),e.map(e=>Object.assign(e,{is_login:!0}))}}))}closeLoginChrome(){setTimeout(()=>{this.closeBrowser()},300)}reInitEventTracker(){this.execute(protocol_2.ModuleName.eventTracker,protocol_1.EventTrackerCmdEnum.Init)}[account_1.CmdEnum.Login](e){return"cli"!==env_1.default.renderType?this.loginV2(e):this.loginV1(e)}loginV1(e){return new Promise((t,o)=>__awaiter(this,void 0,void 0,(function*(){const n=this.log.bind(this,"info",account_1.CmdEnum.Login);try{const i=this[account_1.CmdEnum.Info](e.environment);if(n("login","start","当前登录",null==i?void 0:i.user.id,"参数",e),i&&!e.skipConfirm){const e=yield this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.confirm,{content:"Already logged in, do you want to log in again?"});if(!e)return;n("reloginConfirm","end","重新登录",{confirm:e})}const r=yield this.chooseEnvironment("Choose an environment to login",e.environment);this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:r});let{locale:s="default"}=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.GetFromDisk,"settings");n("getLoginLocale","end",{locale:s}),"default"===s&&(s=(0,lang_1.getSystemLang)(),n("adjustLocale","end",{locale:s})),n("chooseEnvironment","end",{environment:r});const a=new Server_1.default({language:s,showSuccessPage:e.showSuccessPage}),c=yield a.start(),{token:u}=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.getToken),{redirectUrl:l,loginUrl:d}=this.getLoginUrl(c,u,r);n("server","start",{loginUrl:d,redirectUrl:l}),a.loginUrl=d,this.openLoginBrowser(l,a),n("openLoginBrowser","end",{redirectUrl:l});const m=e=>__awaiter(this,void 0,void 0,(function*(){const{cookie:o,environment:i}=e;if(!o)return this.closeLoginChrome(),void this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.dialog,{content:node_1.default.t("account_not_support"),type:"error"});n("checkLogin","success");const r=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.getUserInfo,{},{headers:{Cookie:o}});if(!r.session)return this.closeLoginChrome(),void this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.dialog,{content:node_1.default.t("account_not_support"),type:"error"});n("getUserInfo","success",{userInfo:r}),this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:i,larkSession:r.session,larkSessionList:r.session_list});const s=yield this.requestUserInfo(),a=yield this.requestLoginTenantList();n("requestTenantList","end",{tenantList:a});const c=(yield this.requestAllTenantList(a)).filter(e=>isbrandInEnv(e.user.tenant.tenant_brand,i)),u=a.find(e=>e.user.id===r.uid);u&&(r.avatar=u.user.avatar_url,r.tenant_avatar=u.user.tenant.icon_url,r.env=i);const l={mpSession:o,env:i,larkSession:r.session,larkSessionList:r.session_list,user:{id:r.uid,name:r.name,avatar:r.avatar,displayName:s.user.display_name,i18nNames:s.user.i18n_names,i18nDisplayNames:s.user.i18n_display_names,loginCredentialId:(null==u?void 0:u.user.login_credential_id)||"",env:i},tenant:{id:r.tenant_id,name:r.tenant_name,avatar:r.tenant_avatar,isLogin:!0},tenantList:this.formatTenantList(c,i)};this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",l);const d=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfoMap")||{};d[i]=l,this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfoMap",d),this.reInitEventTracker(),n("updateFeatureGating","start"),yield this.updateFeatureGating(),n("updateFeatureGating","end"),this.clearCompileProcess(),this.closeLoginChrome(),n("login","success",l.env,l.user.id),this.emit(account_1.EventEnum.Logined,l),t()})),_=()=>{a.isTimeout=!0,this.emit(account_1.EventEnum.loginTimeout,{}),this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.showInfo,{content:"Login timed out, try it again",type:"error"}),this.closeLoginChrome(),n("login","timeout"),o(new Error("login timeout"))},p=18e4;let g=null;a.onSuccess(e=>__awaiter(this,void 0,void 0,(function*(){n("login","success",{query:e}),g&&clearTimeout(g);const t=yield this.checkLogin(e.token,r);yield m(t)}))),a.onError(e=>{this.closeLoginChrome(),o(e)}),g=setTimeout(()=>{_()},p)}catch(e){this.log("error",account_1.CmdEnum.Logout,"common","fail",e),o(e)}})))}loginV2(e){return new Promise((t,o)=>__awaiter(this,void 0,void 0,(function*(){const t=this.log.bind(this,"info","loginV2");try{const n=this[account_1.CmdEnum.Info](e.environment);if(t("login","start","当前登录",null==n?void 0:n.user.id,"参数",e),n&&!e.skipConfirm){const e=yield this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.confirm,{content:"Already logged in, do you want to log in again?"});if(!e)return;t("reloginConfirm","end","重新登录",{confirm:e})}const i=yield this.chooseEnvironment("Choose an environment to login",e.environment);this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:i});let{locale:r="default"}=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.GetFromDisk,"settings");t("getLoginLocale","end",{locale:r}),"default"===r&&(r=(0,lang_1.getSystemLang)(),t("adjustLocale","end",{locale:r})),t("chooseEnvironment","end",{environment:i});const s=(0,api_1.getDomain)(i),a=encodeURIComponent(`https://${api_1.SubDomain.open}.${s}/miniprogram/api/v4/opdev_ide/pages/success.html?lang=${r}`),c=`https://${api_1.SubDomain.passport}.${s}/accounts/page/login?app_id=${api_1.OPEN_PLATFORM_APP_ID}&redirect_uri=${a}&lang=${r}`;t("getLoginUrl","end",{loginUrl:c});let u=null;u=setTimeout(()=>{u&&(this.emit(account_1.EventEnum.loginTimeout,{}),this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.showInfo,{content:"Login timed out, try it again",type:"error"}),this.closeLoginChrome(),t("login","timeout"),o(new Error("login timeout")))},18e4),t("openLoginBrowser","start",{loginUrl:c});const l=yield this.openLoginBrowser(c,{close:()=>{u&&clearTimeout(u),u=null}});if(t("openLoginBrowser","end",l),null==l?void 0:l.session){t("login","success",l);const{session:e,session_list:o}=l;this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:i,larkSession:e,larkSessionList:o});const{user:n}=yield this.requestUserInfo(),r=yield this.requestLoginTenantList();t("requestTenantList","end",{tenantList:r});const s=(yield this.requestAllTenantList(r)).filter(e=>isbrandInEnv(e.user.tenant.tenant_brand,i)),a={mpSession:"",env:i,larkSession:e,larkSessionList:o,user:{id:n.id,name:n.name,avatar:n.avatar_url,displayName:n.display_name,i18nNames:n.i18n_names,i18nDisplayNames:n.i18n_display_names,loginCredentialId:n.login_credential_id||"",env:i},tenant:{id:n.tenant.id,name:n.tenant.name,avatar:n.tenant.icon_url,isLogin:!0},tenantList:this.formatTenantList(s,i)};this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",a);const c=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfoMap")||{};c[i]=a,this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfoMap",c),this.reInitEventTracker(),t("updateFeatureGating","start"),yield this.updateFeatureGating(),t("updateFeatureGating","end"),this.clearCompileProcess(),this.closeLoginChrome(),t("login","success",a.env,a.user.id),this.emit(account_1.EventEnum.Logined,a),u&&clearTimeout(u),u=null}else o(new Error("login session not found"))}catch(e){this.log("error",account_1.CmdEnum.Login,"common","fail",e),o(e)}})))}[account_1.CmdEnum.Logout](e){var t;return __awaiter(this,void 0,void 0,(function*(){const o=this.log.bind(this,"info",account_1.CmdEnum.Logout);if(!e.skipConfirm){const e=yield this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.confirm,{content:"Are you sure to sign out?"});if(o("logoutConfirm","finish",{confirm:e}),!e)return}const n=()=>{this.execute(protocol_2.ModuleName.ui,protocol_1.UICmdEnum.showInfo,{content:"Need to log in first",type:"error"}),o("notLogin","finish")};try{let i=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfoMap")||{};const r=this[account_1.CmdEnum.Info](e.environment);let s=this[account_1.CmdEnum.Info]();if(o("currentAccountInfo","end",{accountInfo:s}),e.environment){if(!r)return n()}else if(!i&&!s)return n();o("logout","start",{id:null==r?void 0:r.user.id,name:null==r?void 0:r.user.name}),e.environment?(delete i[e.environment],e.environment===(null==s?void 0:s.env)&&(s=void 0)):(i={},s=void 0),void 0===s&&this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",void 0),this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfoMap",i),this.reInitEventTracker(),this.clearUserData(),o("updateFeatureGating","start"),yield this.updateFeatureGating(),o("updateFeatureGating","end"),(0,clear_1.clearDebugInfo)(this.execute),this.clearCompileProcess(),this.emit(account_1.EventEnum.Logouted,{sessionExpired:null!==(t=e.sessionExpired)&&void 0!==t&&t}),o("logout","success")}catch(e){this.log("error",account_1.CmdEnum.Logout,"common","fail",e)}}))}[account_1.CmdEnum.Info](e){if(e){const t=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfoMap");if(!t)return;return t[e]}return this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfo")}[account_1.CmdEnum.IsLogin](e){return Boolean(this[account_1.CmdEnum.Info](e))}[account_1.CmdEnum.tenantList](){var e,t;return __awaiter(this,void 0,void 0,(function*(){const o=this.log.bind(this,"info",account_1.CmdEnum.tenantList),n=this[account_1.CmdEnum.Info]();if(o("getAccountInfo","end",{accountInfo:n}),n){if(n.tenantList)return n.tenantList;const{larkSession:i,env:r,larkSessionList:s}=n;this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:r,larkSession:i,larkSessionList:s});const a=yield this.requestLoginTenantList();o("requestTenantList","end",{tenantList:a});const c=a.find(e=>e.user.id===n.user.id),u=(yield this.requestAllTenantList(a,null===(t=null===(e=null==c?void 0:c.user)||void 0===e?void 0:e.tenant)||void 0===t?void 0:t.tenant_brand)).filter(e=>isbrandInEnv(e.user.tenant.tenant_brand,r));c&&(n.user.avatar=c.user.avatar_url,n.tenant.avatar=c.user.tenant.icon_url),o("findCurrentUser","end",{currentUser:c});const l=this.formatTenantList(u,r);return this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",Object.assign(Object.assign({},n),{tenantList:l})),l}}))}[account_1.CmdEnum.switchTenant](e){return __awaiter(this,void 0,void 0,(function*(){const t=this.log.bind(this,"info",account_1.CmdEnum.tenantList);t("receiveParams","end",{account:e});const o=this[account_1.CmdEnum.Info]();if(t("getAccountInfo","end",{currentAccount:o}),o){const{user:n,larkSession:i,larkSessionList:r,env:s,tenantList:a}=o,c=e.user.env;if(this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:s,larkSession:i,larkSessionList:r}),n.id===e.user.id)return{result:"noneed"};{const o=this.getPassportWebHeader(),n=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.switchTenant,{user_id:e.user.id,credential_id:e.user.loginCredentialId},{responseHeader:!0,headers:o});t("switchTenantRequest","end",{responseData:n.data,rawSetCookie:n.headers["set-cookie"]});const{session:i,session_list:s}=n.setCookie||{};if(i&&r){this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:c,larkSession:i,larkSessionList:s.split("_")});const o=yield this.requestUserInfo();e.user.displayName=o.user.display_name,e.user.i18nDisplayNames=o.user.i18n_display_names;const n=Object.assign({mpSession:"",env:c,larkSession:i,larkSessionList:s.split("_"),tenantList:a},e);return this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",n),t("updateFeatureGating","start"),yield this.updateFeatureGating(),t("updateFeatureGating","end"),(0,clear_1.clearDebugInfo)(this.execute),this.clearCompileProcess(),this.emit(account_1.EventEnum.switchedTenant,{success:!0,type:"default"}),{result:"success"}}}}return{result:"fail",msg:node_1.default.t("SWITCH_TENANT_FAIL")}}))}[account_1.CmdEnum.switchDebugTenant](e,t,o){return __awaiter(this,void 0,void 0,(function*(){const n=this.log.bind(this,"info",account_1.CmdEnum.switchDebugTenant);n("receiveParams","end",{account:e});const i=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,t,o,"simulatorConfig"),{debugAccountInfo:r}=i;if(n("getDebugAccountInfo","end",{debugAccountInfo:r}),r){const{user:s,larkSessionList:a}=r,c=e.user.env;if(s.id===e.user.id)return{result:"noneed"};{const r=yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Request,api_1.API.switchTenant,{user_id:e.user.id,credential_id:e.user.loginCredentialId},{responseHeader:!0,headers:{"X-Api-Version":"1.0.0","X-App-Id":"7","X-Device-Info":"platform=websdk","X-locale":"zh-CN","X-Terminal-Type":"2"}});n("switchDebugTenantRequest","end",{responseData:r.data,rawSetCookie:r.headers["set-cookie"]});const{session:s,session_list:u}=r.setCookie||{};if(s&&a){this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:c,larkSession:s,larkSessionList:u.split("_"),type:"debug"});const n=Object.assign({env:c,larkSession:s,larkSessionList:u.split("_")},e);return this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,t,o,"simulatorConfig",Object.assign(Object.assign({},i),{debugAccountInfo:n})),this.emit(account_1.EventEnum.switchedTenant,{success:!0,type:"debug"}),{result:"success"}}}}return{result:"fail",msg:node_1.default.t("SWITCH_TENANT_FAIL")}}))}[account_1.CmdEnum.switchEnv](e){return __awaiter(this,void 0,void 0,(function*(){try{const t=this.log.bind(this,"info",account_1.CmdEnum.Login);let o=e.environment;e.environment||(t("chooseEnvironment","start"),o=yield this.chooseEnvironment("Choose an environment to switch"),t("chooseEnvironment","end",o));const n=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfoMap")||{};t("accountInfoMap","end",n);let i=n[o];return i?this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",i):(yield this[account_1.CmdEnum.Login]({environment:o}),i=this[account_1.CmdEnum.Info]()),this.emit(account_1.EventEnum.switchedEnv,{accountInfo:i}),{accountInfo:i}}catch(e){throw this.log("error","switchEnv","end",e),e}}))}[account_1.CmdEnum.updateDebugTenant](e){const{cookie:t,compilePath:o,appType:n,userId:i}=e,r=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,o,n,"simulatorConfig"),s=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Get,"accountInfo"),{debugAccountInfo:a,debugTenantList:c}=r,{session:u,session_list:l}=t;if((null==s?void 0:s.tenantList)&&c){const{tenantList:e}=s,t=e.find(e=>e.user.id===i),d=c.find(e=>e.user.id===i);if(a&&d&&t){const e=a.user.env;t.tenant.isLogin=!0,d.tenant.isLogin=!0,this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:e,larkSession:u,larkSessionList:l.split("_"),type:"debug"});const i=Object.assign({env:e,larkSession:u,larkSessionList:l.split("_")},d);this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,o,n,"simulatorConfig",Object.assign(Object.assign({},r),{debugAccountInfo:i,debugTenantList:c})),this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",Object.assign(Object.assign({},s),{larkSessionList:l.split("_")})),this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:s.user.env,larkSession:s.larkSession,larkSessionList:l.split("_")}),this.emit(account_1.EventEnum.switchedTenant,{success:!0,type:"debug"})}}}[account_1.CmdEnum.updateAccount](e){return __awaiter(this,void 0,void 0,(function*(){const{cookie:t,userId:o}=e,n=this[account_1.CmdEnum.Info]();if(!n)return;const{tenantList:i}=n;if(!i)return;const r=i.find(e=>e.user.id===o);if(!r)return;const s=r.user.env;r.tenant.isLogin=!0;const{session:a,session_list:c}=t;if(a&&c){this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{environment:s,larkSession:a,larkSessionList:c.split("_")});const e=yield this.requestUserInfo();r.user.displayName=e.user.display_name,r.user.i18nDisplayNames=e.user.i18n_display_names;const t=Object.assign({mpSession:"",env:s,larkSession:a,larkSessionList:c.split("_"),tenantList:i},r);this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",t),yield this.updateFeatureGating(),(0,clear_1.clearDebugInfo)(this.execute),this.clearCompileProcess(),this.emit(account_1.EventEnum.switchedTenant,{success:!0,type:"needRecompile"})}}))}[account_1.CmdEnum.updateStatus](){return __awaiter(this,void 0,void 0,(function*(){const e=this.log.bind(this,"info",account_1.CmdEnum.updateStatus);try{yield this.requestUserInfo(),e("requestUserInfo","end","succeed")}catch(t){401===t.status&&this[account_1.CmdEnum.Logout]({skipConfirm:!0,sessionExpired:!0}),e("updateStatus","end","fail",{error:t})}}))}clearCompileProcess(){this.execute(protocol_2.ModuleName.compile,protocol_1.CompileCmdEnum.Clear)}refreshAccountInfo(e){var t,o;return __awaiter(this,void 0,void 0,(function*(){const n=this.log.bind(this,"info","refreshAccountInfo");yield this.execute(protocol_2.ModuleName.service,protocol_1.ServiceCmdEnum.Update,{larkSession:e.larkSession,larkSessionList:e.larkSessionList});const i=yield this.requestLoginTenantList();n("requestTenantList","end",{tenantList:i});const r=i.find(t=>t.user.id===e.user.id),s=(null==r?void 0:r.user.tenant.tenant_brand)||"feishu",a=(yield this.requestAllTenantList(i,null===(o=null===(t=null==r?void 0:r.user)||void 0===t?void 0:t.tenant)||void 0===o?void 0:o.tenant_brand)).filter(e=>isbrandInEnv(e.user.tenant.tenant_brand,s));if(n("getCurrentUser","end",{currentUser:r}),!r)return;const c=this.formatTenantList(a,s);this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.Set,"accountInfo",Object.assign(Object.assign({},e),{user:Object.assign(Object.assign({},e.user),{env:s}),tenantList:c}))}))}getPassportWebHeader(){let{locale:e="default"}=this.execute(protocol_2.ModuleName.storage,protocol_1.StorageCmdEnum.GetFromDisk,"settings");return"default"===e&&(e=(0,lang_1.getSystemLang)()),{"X-Api-Version":"1.0.0","X-App-Id":"7","X-Device-Info":"platform=websdk","X-locale":e,"X-Terminal-Type":"2"}}}exports.default=AccountModule;