import { __read } from "tslib";
import { applyPerformance, getDefaultPerformance } from '../../utils';
import { applySendOnceAndTearDown } from './util';
export var TIMING_METRIC_NAME = "timing" /* timing */;
var getTiming = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 2), loadObserver = _b[0], unloadObserver = _b[1];
    var performance = getDefaultPerformance();
    var _c = __read(applyPerformance(performance), 3), getEntriesByType = _c[2];
    var wrapTiming = function (isBounced) {
        var timing = (performance && performance.timing) || undefined;
        var navigation = getEntriesByType('navigation')[0];
        return {
            ev_type: 'performance_timing',
            payload: {
                isBounced: isBounced,
                timing: timing,
                navigation_timing: navigation,
            },
        };
    };
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapTiming, report, tearDownGroup);
    tearDownGroup.push(loadObserver[0](function () {
        sendOnceAndTearDown(false);
    }));
    tearDownGroup.push(unloadObserver[0](function () {
        sendOnceAndTearDown(true);
    }));
};
export var TIMING = [TIMING_METRIC_NAME, getTiming];
//# sourceMappingURL=timing.js.map