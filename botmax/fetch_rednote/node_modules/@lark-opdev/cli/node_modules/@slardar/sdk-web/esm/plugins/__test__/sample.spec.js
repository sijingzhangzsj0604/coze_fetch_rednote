import { __assign } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../utils/__test__/util';
import { checkFilter, checkVal, getSampler, matchFilter, parseValues, SamplePlugin } from '../sample';
var ev = {
    ev_type: 'pageview',
    payload: {
        pid: 'index',
        source: 'init',
    },
};
test('parseValues', function (t) {
    t.deepEqual(parseValues(['123', 'xxx'], 'number'), [123, NaN]);
    t.deepEqual(parseValues(['1', '0', 'xxx'], 'boolean'), [true, false, false]);
    t.deepEqual(parseValues(['1', '0', 'some value', null], 'string'), ['1', '0', 'some value', 'null']);
    t.deepEqual(parseValues(['1', true], 'date'), ['1', 'true']);
});
test('checkVal', function (t) {
    t.assert(checkVal('a', ['a'], 'eq'));
    t.false(checkVal('a', ['b'], 'eq'));
    t.assert(checkVal('a', ['b'], 'neq'));
    t.false(checkVal('a', ['a'], 'neq'));
    t.assert(checkVal(3, [2.5], 'gt'));
    t.false(checkVal(3, [5], 'gt'));
    t.assert(checkVal(3, [3], 'gte'));
    t.false(checkVal(3, [5], 'gte'));
    t.assert(checkVal(3, [3.5], 'lt'));
    t.false(checkVal(3, [2], 'lt'));
    t.assert(checkVal(3, [3], 'lte'));
    t.false(checkVal(3, [2], 'lte'));
    t.assert(checkVal(3, [3, 2, 1], 'eq'));
    t.false(checkVal(3, [2, 4, 6], 'eq'));
    t.assert(checkVal(3, [2, 4, 6], 'neq'));
    t.false(checkVal(3, [1, 2, 3], 'neq'));
    t.assert(checkVal('hello', ['^h'], 'regex'));
    t.false(checkVal('hello', ['h$'], 'regex'));
    t.assert(checkVal('hello', ['h$'], 'not_regex'));
    t.false(checkVal('hello', ['^h'], 'not_regex'));
    t.assert(checkVal('script', ['script', 'img'], 'regex'));
    t.assert(checkVal('img', ['script', 'img'], 'regex'));
    t.false(checkVal('hello', ['script', 'img'], 'regex'));
    t.assert(checkVal('hello', ['script', 'img'], 'not_regex'));
    t.false(checkVal('script', ['script', 'img'], 'not_regex'));
    t.false(checkVal('img', ['script', 'img'], 'not_regex'));
    t.false(checkVal('whatever', ['value'], 'unknown'));
});
test('checkFilter', function (t) {
    t.false(checkFilter(null, 'a', 'eq', ['a']));
    t.false(checkFilter(ev, 'a', 'eq', ['a']));
    t.assert(checkFilter(ev, 'payload.pid', 'eq', ['index']));
    t.assert(checkFilter(ev, 'payload.pid', 'eq', ['login', 'index']));
});
test('matchFilter', function (t) {
    t.assert(matchFilter(ev, {
        type: 'rule',
        field: 'payload.pid',
        op: 'eq',
        values: ['index'],
    }));
    t.assert(matchFilter(ev, {
        type: 'and',
        children: [
            {
                type: 'rule',
                field: 'payload.pid',
                op: 'eq',
                values: ['index'],
            },
            {
                type: 'rule',
                field: 'payload.source',
                op: 'eq',
                values: ['init'],
            },
        ],
    }));
    t.assert(matchFilter(ev, {
        type: 'or',
        children: [
            {
                type: 'rule',
                field: 'payload.pid',
                op: 'eq',
                values: ['login'],
            },
            {
                type: 'rule',
                field: 'payload.source',
                op: 'eq',
                values: ['init'],
            },
        ],
    }));
});
test('sampler - user hit', function (t) {
    var sampler = getSampler('hituser', {
        sample_rate: 0,
        sample_granularity: 'session',
        include_users: ['hituser'],
        rules: {},
    }, function () { return false; }, function () { return false; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 1,
        } }));
});
test('sampler - base rate', function (t) {
    var config = {
        sample_rate: 0.3,
        sample_granularity: 'session',
        include_users: [],
        rules: {},
    };
    var sampler = getSampler('user', config, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.3,
        } }));
    t.falsy(getSampler('user', config, function () { return false; }, function () { return false; })(__assign({}, ev)));
});
test('sampler - ev_type not configed', function (t) {
    var sampler = getSampler('user', {
        sample_rate: 0.6,
        sample_granularity: 'session',
        include_users: [],
        rules: {},
    }, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.6,
        } }));
});
test('sampler - ev_type disabled', function (t) {
    var sampler = getSampler('user', {
        sample_rate: 0.6,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    }, function () { return true; }, function () { return true; });
    t.falsy(sampler(ev));
});
test('sampler - ev_type default rate', function (t) {
    var config = {
        sample_rate: 0.5,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [],
            },
        },
    };
    var sampler = getSampler('user', config, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.1,
        } }));
});
test('sampler - by event', function (t) {
    var sampler = getSampler('user', {
        sample_rate: 0.5,
        sample_granularity: 'event',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [],
            },
        },
    }, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.1,
        } }));
});
test('sampler - pre-sampled', function (t) {
    var sampler = getSampler('user', {
        sample_rate: 0.5,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [],
            },
        },
    }, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign(__assign({}, ev), { common: { sample_rate: 3 } })), __assign(__assign({}, ev), { common: {
            sample_rate: 3,
        } }));
});
test('sampler - ev_type conditional rate', function (t) {
    var config = {
        sample_rate: 0.5,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [
                    {
                        sample_rate: 0.5,
                        filter: {
                            type: 'or',
                            children: [
                                {
                                    type: 'rule',
                                    field: 'payload.pid',
                                    op: 'eq',
                                    values: ['index'],
                                },
                                {
                                    type: 'or',
                                    children: [
                                        {
                                            type: 'rule',
                                            field: 'payload.source',
                                            op: 'in',
                                            values: ['init'],
                                        },
                                        {
                                            type: 'rule',
                                            field: 'payload.timestamp',
                                            op: 'gt',
                                            values: ['0'],
                                        },
                                    ],
                                },
                            ],
                        },
                    },
                ],
            },
        },
    };
    var sampler = getSampler('user', config, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.25,
        } }));
    t.falsy(getSampler('user', config, function () { return false; }, function () { return false; })(ev));
});
test('sampler - ev_type condition not matched', function (t) {
    var config = {
        sample_rate: 0.5,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [
                    {
                        sample_rate: 0.5,
                        filter: {
                            type: 'rule',
                            field: 'payload.pid',
                            op: 'eq',
                            values: ['login'],
                        },
                    },
                ],
            },
        },
    };
    var sampler = getSampler('user', config, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.1,
        } }));
    t.falsy(getSampler('user', config, function () { return false; }, function () { return false; })(ev));
});
test('sampler - ev_type condition prioritized', function (t) {
    var config = {
        sample_rate: 0.5,
        sample_granularity: 'session',
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.2,
                conditional_sample_rules: [
                    {
                        sample_rate: 0.01,
                        filter: {
                            type: 'rule',
                            field: 'payload.pid',
                            op: 'eq',
                            values: ['index'],
                        },
                    },
                    {
                        sample_rate: 0.5,
                        filter: {
                            type: 'rule',
                            field: 'payload.pid',
                            op: 'eq',
                            values: ['index'],
                        },
                    },
                ],
            },
        },
    };
    var sampler = getSampler('user', config, function () { return true; }, function () { return true; });
    t.deepEqual(sampler(__assign({}, ev)), __assign(__assign({}, ev), { common: {
            sample_rate: 0.005,
        } }));
});
test('SamplePlugin', function (t) {
    var client = createTestWebClient();
    SamplePlugin(client);
    var onBeforeSend = sinon.fake();
    client.on('beforeSend', onBeforeSend);
    client.init({
        sample: {
            sample_rate: 1,
            sample_granularity: 'session',
            include_users: [],
            rules: {},
        },
    });
    client.report(ev);
    client.start();
    t.assert(onBeforeSend.calledOnce);
    t.deepEqual(onBeforeSend.args[0][0].payload, {
        pid: 'index',
        source: 'init',
    });
    t.deepEqual(onBeforeSend.args[0][0].common, {
        sample_rate: 1,
    });
});
//# sourceMappingURL=sample.spec.js.map