"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const feishu_devtools_core_1 = require("@bdeefe/feishu-devtools-core");
const types_1 = require("@bdeefe/feishu-devtools-core/libs/modules/creator/generator/types");
const lang_1 = require("../utils/lang");
const update_1 = __importDefault(require("../utils/update"));
const base_1 = __importDefault(require("./base"));
function isTemplateInFg(fgKey) {
    var _a;
    if (!fgKey)
        return true;
    const data = update_1.default.getFGData();
    const features = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.features;
    return features.includes(fgKey);
}
class Creator extends base_1.default {
    constructor() {
        super([feishu_devtools_core_1.ModuleName.creator, feishu_devtools_core_1.ModuleName.static, feishu_devtools_core_1.ModuleName.ui]);
        this.appItems = [];
    }
    static getAvaliableAppItems() {
        const { list = [] } = update_1.default.getUpdateData().cli.templateMeta || {};
        return list.filter((item) => isTemplateInFg(item.fg));
    }
    enterProjectPath() {
        return this.manager.execute(feishu_devtools_core_1.ModuleName.ui, types_1.UICmdEnum.input, {
            placeholder: 'Please enter project path',
            default: 'my-demo',
            checker: this.checkProjectPath,
        });
    }
    checkProjectPath(projectPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const absoluteProjectPath = path_1.default.resolve(projectPath);
            try {
                yield fs_extra_1.default.ensureDir(absoluteProjectPath);
            }
            catch (e) {
                return true;
            }
            const hasFile = !!(yield fs_extra_1.default.readdir(absoluteProjectPath)).length;
            if (hasFile) {
                throw new Error(`${absoluteProjectPath} is not empty`);
            }
            return true;
        });
    }
    chooseAppType(appType) {
        return __awaiter(this, void 0, void 0, function* () {
            const appItems = Creator.getAvaliableAppItems();
            if (!appItems.length) {
                throw new Error('no avaliable template');
            }
            if (appType) {
                const result = appItems.find((item) => item.type === appType);
                if (result) {
                    return result;
                }
                else {
                    throw new Error(`appType ${appType} is not valid`);
                }
            }
            else {
                if (appItems.length > 1) {
                    const lang = (0, lang_1.getLang)();
                    const typeIndex = yield this.manager.execute(feishu_devtools_core_1.ModuleName.ui, types_1.UICmdEnum.pick, appItems.map((t, index) => {
                        return {
                            name: t.type +
                                (t.desc[lang] && lang === 'zh-CN' ? `(${t.desc[lang]})` : ''),
                            value: index,
                        };
                    }), 'Please select app type');
                    return appItems[typeIndex];
                }
                else {
                    return appItems[0];
                }
            }
        });
    }
    chooseSubtype(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const subtypes = (((_a = options.appType) === null || _a === void 0 ? void 0 : _a.subtypes) || []).filter((item) => isTemplateInFg(item.fg));
            if (!subtypes.length) {
                return undefined;
            }
            if (options.subtype) {
                const subtypeItem = subtypes.find((subtype) => subtype.type === options.subtype);
                if (subtypeItem) {
                    return subtypeItem;
                }
                else {
                    throw new Error(`subtype ${options.subtype} is not valid`);
                }
            }
            else {
                if (subtypes.length > 1) {
                    const lang = (0, lang_1.getLang)();
                    const subtypeIndex = yield this.manager.execute(feishu_devtools_core_1.ModuleName.ui, types_1.UICmdEnum.pick, subtypes.map((meta, index) => {
                        return {
                            name: meta.type +
                                (meta.desc[lang] && lang === 'zh-CN'
                                    ? `(${meta.desc[lang]})`
                                    : ''),
                            value: index,
                        };
                    }), 'Please select subtype');
                    const subtypeItem = subtypes[subtypeIndex];
                    if (!subtypeItem) {
                        throw new Error(`subtype ${options.subtype} is not valid`);
                    }
                    return subtypeItem;
                }
                else {
                    return subtypes[0];
                }
            }
        });
    }
    chooseTemplate(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const lang = (0, lang_1.getLang)();
            const templates = options.templateCate.templates.filter((item) => isTemplateInFg(item.fg));
            if (!templates.length) {
                throw new Error('no avaliable template');
            }
            if (options.templateName) {
                const templateItem = templates.find((t) => t.name === options.templateName);
                if (templateItem) {
                    return templateItem;
                }
                else {
                    throw new Error(`template ${options.templateName} is not valid`);
                }
            }
            else {
                if (templates.length > 1) {
                    const templateIndex = yield this.manager.execute(feishu_devtools_core_1.ModuleName.ui, types_1.UICmdEnum.pick, templates.map((meta, index) => {
                        return {
                            name: meta.name + (meta.desc[lang] ? `(${meta.desc[lang]})` : ''),
                            value: index,
                        };
                    }), 'please select template');
                    const templateItem = templates[templateIndex];
                    if (!templateItem) {
                        throw new Error(`template ${options.templateName} name is not valid`);
                    }
                    return templateItem;
                }
                else {
                    return templates[0];
                }
            }
        });
    }
    generate(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.manager.execute(feishu_devtools_core_1.ModuleName.creator, feishu_devtools_core_1.CreatorCmdEnum.generateV2, {
                templateCate: options.templateCate,
                projectPath: options.projectPath,
                templateConfig: options.templateConfig,
            });
        });
    }
    isLogin() {
        return this.manager.execute(feishu_devtools_core_1.ModuleName.account, feishu_devtools_core_1.AccountCmdEnum.IsLogin);
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            yield new Promise((resolve) => {
                this.manager.addEventListener(feishu_devtools_core_1.ModuleName.account, feishu_devtools_core_1.AccountEventEnum.Logined, () => {
                    resolve();
                });
                this.manager.execute(feishu_devtools_core_1.ModuleName.account, feishu_devtools_core_1.AccountCmdEnum.Login, {
                    showSuccessPage: true,
                    skipConfirm: true,
                });
            });
        });
    }
}
exports.default = Creator;
