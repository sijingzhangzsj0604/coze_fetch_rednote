import { __assign } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { mockTransport } from '../../__test__/utils/mockTransport';
import { createMinimalElectronClient } from '../../client';
import { defaultPlugins, getDefaultConfig } from '../../utils';
function createMockClient() {
    var client = createMinimalElectronClient({
        createDefaultConfig: function () { return (__assign(__assign({}, getDefaultConfig({})), { bid: 'bid', pid: 'pid', version: 'version', viewId: 'viewId', userId: 'userId', deviceId: 'deviceId', sessionId: 'sessionId', release: 'release', env: 'env' })); },
    });
    client.init({
        bid: 'bid',
        useLocalConfig: true,
        transport: mockTransport(),
        plugins: __assign(__assign({}, defaultPlugins), { crash: {
                crashReporter: null,
            } }),
    });
    var mockBuild = sinon.stub();
    client.on('build', mockBuild);
    return { client: client, mockBuild: mockBuild };
}
function createMockReport(name) {
    return {
        ev_type: 'custom',
        payload: {
            type: 'event',
            name: name,
        },
    };
}
test('should inject config into extra', function (t) {
    var _a = createMockClient(), client = _a.client, mockBuild = _a.mockBuild;
    client.start();
    client.report(createMockReport('1'));
    var args = mockBuild.getCall(0).args;
    delete args[0].common.timestamp;
    t.deepEqual(mockBuild.getCall(0).args, [
        {
            common: {
                bid: 'bid',
                context: {},
                device_id: 'deviceId',
                env: 'env',
                pid: 'pid',
                release: 'release',
                sdk_name: 'SDK_SLARDAR_ELECTRON',
                sdk_version: '',
                session_id: 'sessionId',
                user_id: 'userId',
                view_id: 'viewId',
            },
            ev_type: 'custom',
            payload: {
                name: '1',
                type: 'event',
            },
        },
    ]);
});
//# sourceMappingURL=inject-config.spec.js.map