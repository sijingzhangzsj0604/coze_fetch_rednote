import { __assign } from "tslib";
import { initSubjectInGlobal, id, createSafeObserver } from '@slardar/sdk-template';
import { applyXHR, XHR_SUBJECT_NAME } from '../../collector/http';
import { resourceSubject } from '../../collector/pref';
import { setTraceContext, setVolTraceContext } from '../../monitors/http/trace';
import { httpGetterWithXhrObserver } from '../../monitors/http/xhr';
import { getLocationUrl } from '../../utils';
import { getPluginConfig } from './utils';
export var AJAX_MONITOR_PLUGIN_NAME = 'ajax';
var defaultConfig = {
    autoWrap: true,
    hookCbAtReq: id,
    ignoreUrls: [],
    collectBodyOnError: false,
};
export var getCbHook = function (client) { return function (cb) {
    var _a;
    if (!cb)
        return cb;
    var clientConfig = client.config();
    var common = {
        url: getLocationUrl(),
        pid: clientConfig.pid,
        view_id: clientConfig.viewId,
        context: (_a = client.context) === null || _a === void 0 ? void 0 : _a.toString(),
    };
    return function (ev) {
        cb(__assign(__assign({}, ev), { overrides: __assign(__assign({}, common), { timestamp: ev.payload.request.timestamp }) }));
    };
}; };
export function AjaxMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, AJAX_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var xhrConfig = __assign(__assign({}, config), { hookCbAtReq: getCbHook(client), setTraceHeader: setTraceContext(config.trace) });
        var getResourceSubject = function () { return initSubjectInGlobal(client, resourceSubject); };
        xhrConfig.autoWrap &&
            httpGetterWithXhrObserver(client.report.bind(client), tearDownGroup, [
                initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
                getResourceSubject,
            ], xhrConfig);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
        client.provide('wrapXhr', function (Xhr) {
            function Ctor() {
                var xhr = new Xhr();
                httpGetterWithXhrObserver(client.report.bind(client), tearDownGroup, [createSafeObserver(applyXHR(xhr)), getResourceSubject], xhrConfig);
                return xhr;
            }
            Ctor.prototype = new Xhr();
            ['DONE', 'HEADERS_RECIEVED', 'LOADING', 'OPENED', 'UNSENT'].forEach(function (key) {
                Ctor[key] = Xhr[key];
            });
            return Ctor;
        });
    });
}
export function AjaxMonitorVolPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = getPluginConfig(client, AJAX_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var xhrConfig = __assign(__assign({}, config), { hookCbAtReq: getCbHook(client), setTraceHeader: setVolTraceContext(config.trace, "app_id=" + ((_a = client.config()) === null || _a === void 0 ? void 0 : _a.aid) + ",origin=web") });
        var getResourceSubject = function () { return initSubjectInGlobal(client, resourceSubject); };
        xhrConfig.autoWrap &&
            httpGetterWithXhrObserver(client.report.bind(client), tearDownGroup, [
                initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
                getResourceSubject,
            ], xhrConfig);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
    });
}
//# sourceMappingURL=ajax.js.map