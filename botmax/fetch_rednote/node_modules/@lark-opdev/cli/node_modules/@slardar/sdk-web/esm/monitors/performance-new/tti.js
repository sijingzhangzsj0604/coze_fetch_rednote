import { __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-for-of */
/* eslint-disable @typescript-eslint/prefer-optional-chain */
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { applyRecord, arrayIncludes, noop } from '@slardar/sdk-template';
import { LONGTASK_TYPE } from '../../collector/pref';
import { applyPerformance, getDefaultMutationObserver, applyMutationObserver, now as absoluteNow, getDefaultPerformance, } from '../../utils';
import { getFetchMethod } from '../http/fetch';
import { initMetric } from '../performance/util';
import { FCP_ENTRY_NAME } from './paint';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
var TTI_METRIC_NAME = 'tti';
var GET_METHOD = 'get';
var QUIET_TIME_LIMIT = 5000;
/**
 * start 方法开启一个调度器，传入回调和调度时间
 * reschedule 重新以一个更长的时间调度
 * stop 停止调度
 */
export var applyScheduler = function (now) {
    var timerActiveTime = -Infinity;
    var timerId = undefined;
    var callback;
    var clearTime = function () { return window.clearTimeout(timerId); };
    var reschedule = function (futureTime) {
        if (timerActiveTime > futureTime || !callback) {
            return;
        }
        clearTime();
        timerId = window.setTimeout(callback, futureTime - now());
        timerActiveTime = futureTime;
    };
    var start = function (cb, futureTime) {
        callback = cb;
        reschedule(futureTime);
    };
    var stop = function () {
        clearTime();
        callback = undefined;
    };
    return [start, stop, reschedule];
};
/**
 * Computes the time (in milliseconds since requestStart) that the network was
 * last known to have >2 requests in-flight.
 */
export var calcLastNet2Busy = function (undoneReqStarts, observedResReqs, now) {
    if (undoneReqStarts.length > 2) {
        return now();
    }
    var endpoints = [];
    for (var i = 0; i < observedResReqs.length; i++) {
        endpoints.push([observedResReqs[i].start, 0 /* S */], [observedResReqs[i].end, 1 /* E */]);
    }
    for (var i = 0; i < undoneReqStarts.length; i++) {
        endpoints.push([undoneReqStarts[i], 0 /* S */]);
    }
    endpoints.sort(function (a, b) { return a[0] - b[0]; });
    var currentActive = undoneReqStarts.length;
    for (var i = endpoints.length - 1; i >= 0; i--) {
        var _a = __read(endpoints[i], 2), timestamp = _a[0], type = _a[1];
        switch (type) {
            case 0 /* S */:
                currentActive--;
                break;
            case 1 /* E */:
                currentActive++;
                if (currentActive > 2) {
                    return timestamp;
                }
                break;
        }
    }
    // If we reach here, we were never network 2-busy.
    return 0;
};
export var getRequestTimes = function (requestTimes) {
    var keys = Object.keys(requestTimes);
    var result = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (var i = 0; i < keys.length; i++) {
        var val = requestTimes[keys[i]];
        if (typeof val === 'number') {
            result.push(val);
        }
    }
    return result;
};
/**
 * 监听包含 ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'] 标签的 dom 变更
 */
export var observeResFetchMutations = function (MutationObserver, callback) {
    var requestCreatingNodeNames = ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'];
    function subtreeContainsNodeName(nodes, nodeNames) {
        for (var i = 0; i < nodes.length; i++) {
            if (arrayIncludes(nodeNames, nodes[i].nodeName.toLowerCase()) ||
                (nodes[i].children &&
                    subtreeContainsNodeName(nodes[i].children, nodeNames))) {
                return true;
            }
        }
        return false;
    }
    var _a = __read(applyMutationObserver(MutationObserver, function (mutations) {
        for (var i = 0; i < mutations.length; i++) {
            if ((mutations[i].type === 'childList' &&
                subtreeContainsNodeName(mutations[i].addedNodes, requestCreatingNodeNames)) ||
                (mutations[i].type === 'attributes' &&
                    arrayIncludes(requestCreatingNodeNames, mutations[i].target.nodeName.toLowerCase()))) {
                callback(mutations[i]);
            }
        }
    }), 2), observe = _a[0], disconnect = _a[1];
    return [
        function () {
            return observe(document, {
                attributes: true,
                childList: true,
                subtree: true,
                attributeFilter: ['href', 'src'],
            });
        },
        disconnect,
    ];
};
/**
 * Returns either a manually set min value or the time since
 * domContentLoadedEventEnd and navigationStart. If the
 * domContentLoadedEventEnd data isn't available, `null` is returned.
 * @return {number|null}
 */
export var getMinValue = function (timing) {
    var _a = timing || {}, domContentLoadedEventEnd = _a.domContentLoadedEventEnd, _b = _a.navigationStart, navigationStart = _b === void 0 ? 0 : _b;
    return domContentLoadedEventEnd ? domContentLoadedEventEnd - navigationStart : null;
};
/**
 * Computes the TTI value...
 * @param {number} searchStart
 * @param {number} minValue
 * @param {number} lastKnownNetwork2Busy
 * @param {number} currentTime
 * @param {!Array<{start: (number), end: (number)}>} longTasks
 * @return {number|null}
 */
export var computeTTI = function (searchStart, minValue, lastKnownNetwork2Busy, currentTime, longTasks) {
    // Have not reached network 2-quiet yet.
    if (currentTime - lastKnownNetwork2Busy < QUIET_TIME_LIMIT) {
        return null;
    }
    var maybeFCI = longTasks.length === 0 ? searchStart : longTasks[longTasks.length - 1].end;
    // Main thread has not been quiet for long enough.
    if (currentTime - maybeFCI < QUIET_TIME_LIMIT) {
        return null;
    }
    return Math.max(maybeFCI, minValue);
};
var pushLongTaskIntoList = function (entry, list) {
    var startTime = entry.startTime, duration = entry.duration;
    entry.start = startTime;
    entry.end = startTime + duration;
    list.push(entry);
};
export var getLastBusyAndLongTasks = function (tearDownGroup, _a, entries) {
    var _b = __read(_a, 5), xhrObserver = _b[0], fetchObserver = _b[1], longtaskObserver = _b[2], resourceObserver = _b[3], MutationObserver = _b[4];
    return function (reschedule, now) {
        var longTasks = [];
        var networkRequests = [];
        var _a = __read(applyRecord(), 3), incompleteInitReqStartTimes = _a[0], before = _a[1], after = _a[2];
        entries.forEach(function (entry) {
            if (entry.entryType === LONGTASK_TYPE[0]) {
                pushLongTaskIntoList(entry, longTasks);
            }
        });
        var uniqId = 0;
        tearDownGroup.push(xhrObserver[0](function (_a) {
            var _b = __read(_a, 1), _method = _b[0];
            if ((_method || '').toLowerCase() !== GET_METHOD)
                return noop;
            var requestId = (uniqId += 1);
            before(requestId, absoluteNow());
            return function () {
                after(requestId);
            };
        }));
        tearDownGroup.push(fetchObserver[0](function (_a) {
            var _b = __read(_a, 2), req = _b[0], options = _b[1];
            if (!window.Request || getFetchMethod(req, options, window.Request) !== GET_METHOD)
                return noop;
            var requestId = (uniqId += 1);
            before(requestId, absoluteNow());
            return function () {
                after(requestId);
            };
        }));
        var _b = __read((MutationObserver && observeResFetchMutations(MutationObserver, function () { return reschedule(now() + QUIET_TIME_LIMIT); })) || [], 2), observeRes = _b[0], stopObserveRes = _b[1];
        observeRes && observeRes();
        var getLastBusy = function () { return calcLastNet2Busy(getRequestTimes(incompleteInitReqStartTimes), networkRequests, now); };
        stopObserveRes && tearDownGroup.push(stopObserveRes);
        tearDownGroup.push(longtaskObserver[0](function (entry) {
            pushLongTaskIntoList(entry, longTasks);
            var startTime = entry.startTime, duration = entry.duration;
            // 遇到 longTask 则在 longTask 5秒后 checkTTI
            reschedule(startTime + duration + QUIET_TIME_LIMIT);
        }));
        tearDownGroup.push(resourceObserver[0](function (_a) {
            var fetchStart = _a.fetchStart, responseEnd = _a.responseEnd;
            networkRequests.push({
                start: fetchStart,
                end: responseEnd,
            });
            // 遇到 resource 加载，则在最后一次 busy 5 秒后 checkTTI
            reschedule(getLastBusy() + QUIET_TIME_LIMIT);
        }));
        tearDownGroup.push(function () {
            longTasks.length = 0;
            networkRequests.length = 0;
        });
        return [longTasks, getLastBusy];
    };
};
export var getTTI = function (report, tearDownGroup, _a, config) {
    var _b = __read(_a, 5), xhrObserver = _b[0], fetchObserver = _b[1], longtaskObserver = _b[2], resourceObserver = _b[3], pvObserver = _b[4];
    var metric = initMetric(TTI_METRIC_NAME, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    var performance = getDefaultPerformance();
    var _c = config || {}, _d = _c.entries, entries = _d === void 0 ? [] : _d, snippetObserver = _c.observer;
    tearDownGroup.push(function () {
        snippetObserver && snippetObserver.disconnect();
        entries.length = 0;
    });
    if (!window ||
        !XMLHttpRequest ||
        !performance ||
        !PerformanceObserver ||
        (PerformanceObserver.supportedEntryTypes &&
            !arrayIncludes(PerformanceObserver.supportedEntryTypes || [], LONGTASK_TYPE[0]))) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    var _e = __read(applyPerformance(performance), 5), timing = _e[0], now = _e[1], getEntriesByName = _e[4];
    var _f = __read(applyScheduler(now), 3), startSchedule = _f[0], stopSchedule = _f[1], reschedule = _f[2];
    var _g = __read(getLastBusyAndLongTasks(tearDownGroup, [xhrObserver, fetchObserver, longtaskObserver, resourceObserver, getDefaultMutationObserver()], entries)(reschedule, now), 2), longTasks = _g[0], getLastBusy = _g[1];
    tearDownGroup.push(stopSchedule);
    var checkTTI = function (ttiCallback) {
        var firstContentfulPaint = getEntriesByName(FCP_ENTRY_NAME)[0];
        var maybeFCI = computeTTI((firstContentfulPaint ? firstContentfulPaint.startTime : getMinValue(timing)) || 0, getMinValue(timing) || 0, getLastBusy(), now(), longTasks);
        if (!maybeFCI)
            return reschedule(now() + 1000);
        ttiCallback(maybeFCI);
    };
    var reportTTI = function (value) {
        metric.value = value;
        sendOnceAndTearDown(metric);
    };
    var lastLongTask = longTasks[longTasks.length - 1];
    startSchedule(function () { return checkTTI(reportTTI); }, Math.max(getLastBusy() + QUIET_TIME_LIMIT, lastLongTask ? lastLongTask.end : 0));
    tearDownGroup.push(pvObserver[0](function () {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
    }));
};
//# sourceMappingURL=tti.js.map