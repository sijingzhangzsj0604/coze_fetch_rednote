import { Params, Logger as ILogger } from '../types/log';
import { CommonModule, ModuleName } from '../types/protocol';
declare class Logger<M extends ModuleName | CommonModule> implements ILogger<M> {
    static isInit: boolean;
    static Config: {
        appenders: string[];
        logPath: string;
    };
    static configure: () => void;
    private logger?;
    private debugLogger?;
    constructor(module: string);
    private log;
    trace(...args: any): void;
    debug(...args: any): void;
    info(...params: Params<M>): void;
    warn(...params: Params<M>): void;
    error(...params: Params<M>): void;
    fatal(...params: Params<M>): void;
    getLogs(day: Date): Promise<string[]>;
}
export default Logger;
export declare const logger: () => Logger<'Common'>;
