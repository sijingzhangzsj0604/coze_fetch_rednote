import * as web_base from '../web_base';
export { web_base };
export declare const sample_granularity_session = "session";
export declare const sample_granularity_event = "event";
export declare const event_sample_rule_name_js_err = "js_error";
export declare const event_sample_rule_name_http = "http";
export declare const event_sample_rule_name_perf = "performance";
export declare const event_sample_rule_name_resource_err = "resource_error";
export declare const event_sample_rule_name_resource = "resource";
export declare const event_sample_rule_name_custom = "custom";
export declare const event_sample_rule_name_performance_timing = "performance_timing";
export declare const event_sample_rule_name_performance_longtask = "performance_longtask";
export declare const event_sample_rule_name_action = "action";
export declare const event_sample_rule_name_page_view = "pageview";
export declare const event_sample_rule_name_blank_screen = "blank_screen";
export interface BrowserSetting {
    sample: SampleConfig;
    /** 后端下发配置时返回user_id */
    user_id?: string;
    /** 后端下发配置时返回user_id */
    plugins?: PluginConfig;
    /** 超量采样率 */
    quota_rate: number;
    timestamp: number;
}
export interface PluginConfig {
    heatmap?: HeatMapConfig;
}
export interface HeatMapConfig {
    open_list: Array<HeatMapItem>;
    url: string;
}
export interface HeatMapItem {
    heat_map_id: number;
    /** 监控热力图的url,模糊匹配 */
    monitor_url: string;
}
export interface SampleConfig {
    sample_rate: number;
    include_users: Array<string>;
    /** session | event */
    sample_granularity: string;
    rules: Array<EventSampleRule>;
}
export interface EventSampleRule {
    name: string;
    enable: boolean;
    sample_rate: number;
    conditional_sample_rules: Array<ConditionalSampleRule>;
    label?: string;
}
export interface ConditionalSampleRule {
    sample_rate: number;
    filter: web_base.FilterCondition;
}
export interface BrowserSdkSettingsRequest {
    common: web_base.CommonParams;
}
export interface BrowserSdkSettingResponse {
    data: BrowserSetting;
    errmsg: string;
    errno: number;
}
export interface UpdateBrowserSdkSettingRequest {
    common: web_base.CommonParams;
    setting: BrowserSetting;
    userName?: string;
}
export interface UpdateBrowserSdkSettingResponse {
    errmsg: string;
    errno: number;
    data?: string;
}
export declare class WebSdkSettingService {
    /** L2 级别 */
    BrowserSdkSetting(req: BrowserSdkSettingsRequest): Promise<BrowserSdkSettingResponse>;
    /** L2 级别 */
    UpdateBrowserSdkSetting(req: UpdateBrowserSdkSettingRequest): Promise<UpdateBrowserSdkSettingResponse>;
}
