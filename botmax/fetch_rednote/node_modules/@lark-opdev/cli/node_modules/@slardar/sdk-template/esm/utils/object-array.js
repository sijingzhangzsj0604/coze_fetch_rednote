import { __assign, __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-optional-chain */
import { isArray, isFunction, isObject, isPlainObject } from './is';
// eslint-disable-next-line @typescript-eslint/ban-types
export function omit(object) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    if (isObject(object)) {
        var res_1 = {};
        objectForIn(object, function (k, v) {
            if (!arrayIncludes(keys, k)) {
                res_1[k] = v;
            }
        });
        return res_1;
    }
    return object;
}
export function hasKey(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
}
export function objectForIn(object, callback) {
    if (isObject(object)) {
        for (var i in object) {
            if (hasKey(object, i)) {
                callback.call(null, i, object[i]);
            }
        }
    }
}
export function filterObjectValueBy(obj, p) {
    if (!isObject(obj)) {
        return obj;
    }
    if (!isFunction(p)) {
        return obj;
    }
    var res = {};
    objectForIn(obj, function (key, value) {
        if (p(value)) {
            res[key] = value;
        }
    });
    return res;
}
// 把source对象中的内容深度赋给target, 数组覆盖
export function mergeDeepCopyArray() {
    var source = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        source[_i] = arguments[_i];
    }
    var result = {};
    var k = 0;
    while (k < source.length) {
        result = _mergeDeepCopyArray(result, source[k++]);
    }
    return result;
}
// 把source对象中的内容深度赋给target, 数组合并
export function mergeDeepConcatArray() {
    var source = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        source[_i] = arguments[_i];
    }
    var result = {};
    var k = 0;
    while (k < source.length) {
        result = _mergeDeepMergeArray(result, source[k++]);
    }
    return result;
}
function _mergeDeepCopyArray(target, source) {
    var result = __assign({}, target);
    for (var key in source) {
        if (hasKey(source, key) && source[key] !== undefined) {
            if (isObject(source[key]) && isPlainObject(source[key])) {
                result[key] = _mergeDeepCopyArray(isObject(target[key]) ? target[key] : {}, source[key]);
            }
            else if (isArray(source[key])) {
                result[key] = cloneArray(source[key]);
            }
            else {
                result[key] = source[key];
            }
        }
    }
    return result;
}
// 递归赋值
function _mergeDeepMergeArray(target, source) {
    var result = __assign({}, target);
    for (var key in source) {
        if (hasKey(source, key) && source[key] !== undefined) {
            if (isObject(source[key]) && isPlainObject(source[key])) {
                result[key] = _mergeDeepMergeArray(isObject(target[key]) ? target[key] : {}, source[key]);
            }
            else if (isArray(source[key]) && isArray(target[key])) {
                result[key] = _mergeDeepArray(target[key], source[key]);
            }
            else {
                result[key] = source[key];
            }
        }
    }
    return result;
}
function _mergeDeepArray(target, source) {
    var _target = isArray(target) ? target : [];
    var _source = isArray(source) ? source : [];
    return Array.prototype.concat.call(_target, _source).map(function (v) {
        if (v instanceof RegExp) {
            return v;
        }
        else if (isObject(v) && isPlainObject(v)) {
            return _mergeDeepMergeArray({}, v);
        }
        else if (isArray(v)) {
            return _mergeDeepArray([], v);
        }
        else {
            return v;
        }
    });
}
export function cloneArray(array) {
    return array.slice();
}
// 检查数组中是否有元素
export function arrayIncludes(array, value) {
    if (!isArray(array)) {
        return false;
    }
    if (array.length === 0) {
        return false;
    }
    var k = 0;
    while (k < array.length) {
        if (array[k] === value) {
            return true;
        }
        k++;
    }
    return false;
}
export var arrayRemove = function (arr, e) {
    if (!isArray(arr)) {
        return arr;
    }
    var i = arr.indexOf(e);
    if (i >= 0) {
        var arr_ = arr.slice();
        arr_.splice(i, 1);
        return arr_;
    }
    return arr;
};
/**
 * 按路径访问对象属性
 * @param target 待访问对象
 * @param property 访问属性路径
 * @param { (target: any, property: string): any } visitor 访问器
 */
export var safeVisit = function (target, path, visitor) {
    var _a, _b;
    var paths = path.split('.');
    var _c = __read(paths), method = _c[0], rest = _c.slice(1);
    while (target && rest.length > 0) {
        target = target[method];
        _a = rest, _b = __read(_a), method = _b[0], rest = _b.slice(1);
    }
    if (!target) {
        return undefined;
    }
    return visitor(target, method);
};
export var safeSet = function (target, path, value) {
    safeVisit(target, path, function (obj, property) {
        try {
            obj[property] = value;
        }
        catch (e) {
            // ignore
        }
    });
};
/**
 *  按路径调用函数
 * @param target 待调用对象，如 `client`
 * @param methods 待调用方法路径，可能是一级路径 `client.start`, 或者是多级命令 `client.context.set`
 * @param args 调用参数
 */
export var safeCall = function (target, method, args) {
    return safeVisit(target, method, function (obj, property) {
        if (obj && property in obj && isFunction(obj[property])) {
            try {
                return obj[property].apply(obj, args);
            }
            catch (err) {
                // ignore
                return undefined;
            }
        }
    });
};
/**
 *  按路径调用函数或获取值
 * @param target 待调用对象，如 `client`
 * @param methods 待调用方法路径或属性路径
 * @param args 调用参数
 */
export var safeCallOrGet = function (target, method, args) {
    return safeVisit(target, method, function (obj, property) {
        if (obj && property in obj) {
            // call
            if ((args && args.length) || isFunction(obj[property])) {
                try {
                    return obj[property].apply(obj, args);
                }
                catch (err) {
                    // ignore
                    return undefined;
                }
            }
            else {
                // get
                return obj[property];
            }
        }
    });
};
export var applyRecord = function () {
    var record = {};
    var set = function (key, val) { return (record[key] = val); };
    var del = function (key) { return delete record[key]; };
    return [record, set, del];
};
export var pick = function (obj, keys) {
    if (!obj || !isObject(obj))
        return obj;
    return keys.reduce(function (prev, cur) {
        prev[cur] = obj[cur];
        return prev;
    }, {});
};
//# sourceMappingURL=object-array.js.map