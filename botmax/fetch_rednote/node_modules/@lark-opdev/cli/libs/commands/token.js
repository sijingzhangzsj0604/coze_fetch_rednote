"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const help_1 = __importDefault(require("../extends/command/help"));
const token_1 = __importDefault(require("../implements/token"));
const account_1 = __importDefault(require("../implements/account"));
class Token extends help_1.default {
    run() {
        const { args, flags } = this.parse(Token);
        const token = new token_1.default();
        token.eventTracker('token_start', { tags: Object.assign(Object.assign({}, args), flags) });
        account_1.default.checkTokenExist(this.id);
        token.checkLogin();
        switch (args.command) {
            case 'create':
                return token.create({});
            case 'list':
                return token.list();
            case 'revoke':
                if (args.token) {
                    return token.revoke(args.token);
                }
                this.error('Missing required argument: tokenKey');
        }
        return Promise.resolve();
    }
}
exports.default = Token;
Token.description = 'Manage personal tokens';
Token.flags = {
    help: command_1.flags.help({
        char: 'h',
    }),
};
Token.args = [
    {
        name: 'command',
        options: ['create', 'list', 'revoke'],
    },
    {
        name: 'token',
        hidden: true,
    },
];
Token.examples = [
    ['$ {{cli}} token create', 'create new personal token'],
    ['$ {{cli}} token list', 'show all available tokens'],
    ['$ {{cli}} token revoke <tokenKey>', 'revoke personal token'],
];
