import { ContextPlugin, createClient, IntegrationPlugin, withCommandArray } from '@slardar/sdk-template';
import { CustomPlugin, SamplePlugin } from '@slardar/sdk-web';
import { electronBuilder } from './builder';
import { createElectronConfigManager } from './config-manager';
import { DEFAULT_SENDER_BATCH_SIZE } from './constants';
import { initConfigNormalizer, normalizeUserConfig, validateInitConfig } from './normalize';
import { InjectConfigPlugin, InjectEnvPlugin, JsErrorMonitorPlugin, PcPerfMonitorPlugin } from './plugins';
import { CrashMonitorPlugin } from './plugins/crash';
import { createElectronSender } from './sender';
import { getDefaultConfig, getReportUrl } from './utils';
export var createMinimalElectronClient = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.createSender, createSender = _c === void 0 ? function (config) {
        return createElectronSender({
            size: DEFAULT_SENDER_BATCH_SIZE,
            endpoint: getReportUrl(config.reportDomain, config.reportPath),
            transport: config.transport,
        });
    } : _c, _d = _b.builder, builder = _d === void 0 ? electronBuilder : _d, _e = _b.createDefaultConfig, createDefaultConfig = _e === void 0 ? getDefaultConfig : _e;
    var client = createClient({
        createDefaultConfig: createDefaultConfig,
        validateInitConfig: validateInitConfig,
        initConfigNormalizer: initConfigNormalizer,
        builder: builder,
        createSender: createSender,
        createConfigManager: createElectronConfigManager,
        userConfigNormalizer: normalizeUserConfig,
    });
    ContextPlugin(client);
    InjectConfigPlugin(client);
    InjectEnvPlugin(client);
    client = withCommandArray(client);
    IntegrationPlugin(client);
    return client;
};
export var createElectronClient = function (config) {
    if (config === void 0) { config = {}; }
    var client = createMinimalElectronClient(config);
    CrashMonitorPlugin(client);
    PcPerfMonitorPlugin(client);
    JsErrorMonitorPlugin(client);
    CustomPlugin(client);
    SamplePlugin(client);
    return client;
};
//# sourceMappingURL=client.js.map