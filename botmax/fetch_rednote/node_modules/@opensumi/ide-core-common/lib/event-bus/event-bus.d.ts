import { IAsyncResult } from '@opensumi/ide-utils';
import { ConstructorOf } from '../declare';
import { BasicEvent } from './basic-event';
import { IEventBus, IEventListener, IEventFireOpts, IAsyncEventFireOpts } from './event-bus-types';
export declare class EventBusImpl implements IEventBus {
    private emitterMap;
    fire<T extends BasicEvent<any>>(e: T, opts?: IEventFireOpts): void;
    fireAndAwait<T extends BasicEvent<any>, R>(e: T, opts?: IAsyncEventFireOpts): Promise<IAsyncResult<R>[]>;
    on<T>(Constructor: ConstructorOf<T>, listener: IEventListener<T>): import("@opensumi/ide-utils").IDisposable;
    once<T>(Constructor: ConstructorOf<T>, listener: IEventListener<T>): import("@opensumi/ide-utils").IDisposable;
    private getOrCreateEmitter;
}
//# sourceMappingURL=event-bus.d.ts.map