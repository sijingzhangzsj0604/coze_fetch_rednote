import { WithSubject, SubjectMap } from '@slardar/sdk-template';
import { WebClient } from '../types';
export declare type SelfError = [Error, (Record<string, string> | undefined)?];
export interface LoadedPlugin {
    name: string;
    version: string;
    apply: PluginApplyFn;
}
export interface PluginApplyFn {
    (client: WithSubject<WebClient>): void;
}
export declare type SlardarRegistry = {
    plugins: LoadedPlugin[];
    errors: SelfError[] & {
        observe?: (f: (v: SelfError) => void) => void;
    };
    subject: SubjectMap;
};
export declare const getGlobalRegistry: (global?: Record<string, any> | undefined) => SlardarRegistry | undefined;
export declare const reportSelfError: (errorInfo_0: Error, errorInfo_1?: Record<string, string> | undefined) => void;
