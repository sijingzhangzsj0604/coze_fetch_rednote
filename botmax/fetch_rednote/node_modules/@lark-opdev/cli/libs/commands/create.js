"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const creator_1 = __importDefault(require("../implements/creator"));
const command_2 = __importDefault(require("../extends/command"));
const update_1 = require("../utils/update");
class Create extends command_2.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const { args, flags } = this.parse(Create);
            const creator = new creator_1.default();
            creator.eventTracker('create_start', {
                tags: Object.assign(Object.assign({}, flags), args),
            });
            const isLogin = creator.isLogin();
            if (!isLogin) {
                yield creator.login();
                yield (0, update_1.writeUpdateData)(undefined, false);
                yield (0, update_1.writeFGData)();
            }
            if (args.projectPath) {
                yield creator.checkProjectPath(args.projectPath || '');
            }
            else {
                args.projectPath = yield creator.enterProjectPath();
            }
            yield creator.checkProjectPath(args.projectPath);
            const appType = yield creator.chooseAppType(flags.appType);
            const subtype = yield creator.chooseSubtype({
                appType,
                subtype: flags.subtype,
            });
            const templateConfig = yield creator.chooseTemplate({
                templateCate: subtype || appType,
                templateName: flags.template,
            });
            yield creator.generate({
                templateCate: subtype || appType,
                templateConfig,
                projectPath: args.projectPath,
            });
        });
    }
}
exports.default = Create;
Create.description = 'Create a project from the template';
Create.flags = {
    appType: command_1.flags.string({
        char: 'a',
        description: 'choose app type',
    }),
    subtype: command_1.flags.string({
        char: 's',
        description: 'choose app subtype',
    }),
    template: command_1.flags.string({
        char: 't',
        description: 'choose tempalte',
    }),
    help: command_1.flags.help({
        char: 'h',
    }),
};
Create.args = [
    {
        name: 'projectPath',
        required: false,
    },
];
Create.examples = [
    [
        '$ {{cli}} create ./gadget-demo -a gadget',
        'create a gadget project in the gadget-demo folder',
    ],
];
