"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = __importDefault(require("../extends/command"));
const open_1 = __importDefault(require("../implements/open"));
class Open extends command_2.default {
    run() {
        const { argv, flags } = this.parse(Open);
        const open = new open_1.default();
        open.openDetail(argv[0], flags.force);
        return Promise.resolve();
    }
}
exports.default = Open;
Open.description = 'Open the opdev-ide, whose version number must be greater than or equal to 2.27.0';
Open.examples = [
    ['$ {{cli}} open', 'open opdev-ide'],
    [
        `$ {{cli}} open .`,
        'open the gadget project in the current folder, if opdev-ide has opened a gadget project already, it will not work',
    ],
    [
        `$ {{cli}} open . -f`,
        'open the gadget project in the current folder forcely, if opdev-ide has opened a gadget project, the previous project will be closed',
    ],
];
Open.flags = {
    force: command_1.flags.boolean({
        char: 'f',
        description: 'work when you pass the path argument, the current gadget project will be forcely closed',
        default: false,
    }),
    help: command_1.flags.help({
        char: 'h',
    }),
};
Open.args = [
    {
        name: 'path',
        description: 'open the project by path directly, now only gadget project is supported',
    },
];
