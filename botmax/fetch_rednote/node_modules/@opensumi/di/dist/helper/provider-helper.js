"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCreatorFromProvider = exports.hasTag = exports.parseTokenFromProvider = exports.getProvidersFromTokens = void 0;
var Error = __importStar(require("../error"));
var declare_1 = require("../declare");
var is_function_1 = require("./is-function");
var parameter_helper_1 = require("./parameter-helper");
var dep_helper_1 = require("./dep-helper");
var injector_helper_1 = require("./injector-helper");
function getProvidersFromTokens(targets) {
    var spreadDeps = dep_helper_1.getAllDeps.apply(void 0, __spreadArray([], __read(targets), false));
    var allDeps = targets.concat(spreadDeps);
    return allDeps.filter(is_function_1.isInjectableToken);
}
exports.getProvidersFromTokens = getProvidersFromTokens;
function parseTokenFromProvider(provider) {
    if ((0, is_function_1.isTypeProvider)(provider)) {
        return provider;
    }
    else {
        return provider.token;
    }
}
exports.parseTokenFromProvider = parseTokenFromProvider;
function hasTag(target) {
    if (typeof target === 'function') {
        return false;
    }
    else {
        return Object.prototype.hasOwnProperty.call(target, 'tag');
    }
}
exports.hasTag = hasTag;
function parseCreatorFromProvider(provider) {
    var basicObj = (0, is_function_1.isTypeProvider)(provider)
        ? {}
        : {
            dropdownForTag: provider.dropdownForTag,
            tag: provider.tag,
        };
    if ((0, is_function_1.isValueProvider)(provider)) {
        return __assign({ instance: provider.useValue, isDefault: provider.isDefault, status: declare_1.CreatorStatus.done }, basicObj);
    }
    else if ((0, is_function_1.isFactoryProvider)(provider)) {
        return __assign({ isDefault: provider.isDefault, useFactory: provider.useFactory }, basicObj);
    }
    else if ((0, is_function_1.isAliasProvider)(provider)) {
        return {
            useAlias: provider.useAlias,
        };
    }
    else {
        var isDefault = (0, is_function_1.isClassProvider)(provider) ? provider.isDefault : false;
        var useClass = (0, is_function_1.isClassProvider)(provider) ? provider.useClass : provider;
        var opts = (0, injector_helper_1.getInjectableOpts)(useClass);
        if (!opts) {
            throw Error.noInjectableError(useClass);
        }
        var parameters = (0, parameter_helper_1.getParameterOpts)(useClass);
        return __assign({ isDefault: isDefault, opts: opts, parameters: parameters, useClass: useClass }, basicObj);
    }
}
exports.parseCreatorFromProvider = parseCreatorFromProvider;
