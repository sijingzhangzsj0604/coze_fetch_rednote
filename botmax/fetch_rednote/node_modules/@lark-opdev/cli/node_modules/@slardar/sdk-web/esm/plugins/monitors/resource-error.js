import { initSubjectInGlobal } from '@slardar/sdk-template';
import { errorSubject } from '../../collector/error';
import { resourceErrorGetterWithContext } from '../../monitors/resource-error';
import { getPluginConfig } from './utils';
export var RESOURCE_ERROR_MONITOR_PLUGIN_NAME = 'resourceError';
var defaultConfig = {
    includeUrls: [],
    ignoreUrls: [],
    dedupe: true,
};
export function ResourceErrorMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, RESOURCE_ERROR_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var reportResourceError = resourceErrorGetterWithContext(client.report.bind(client), tearDownGroup, [initSubjectInGlobal(client, errorSubject)], config);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
        reportResourceError && client.provide('reportResourceError', reportResourceError);
    });
}
//# sourceMappingURL=resource-error.js.map