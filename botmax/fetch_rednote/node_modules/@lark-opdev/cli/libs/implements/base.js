"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ora_1 = __importDefault(require("ora"));
const feishu_devtools_core_1 = require("@bdeefe/feishu-devtools-core");
const enum_1 = require("../utils/enum");
const adapters_1 = require("../adapters");
class Base {
    constructor(name = [feishu_devtools_core_1.ModuleName.eventTracker]) {
        this.eventTracker = (eventName, opt) => {
            return this.manager.execute(feishu_devtools_core_1.ModuleName.eventTracker, feishu_devtools_core_1.EventTrackerCmdEnum.Counter, eventName, opt);
        };
        const modules = new adapters_1.Modules(name);
        this.manager = modules.manager;
    }
    loading(step, done = false, isSuccess = true) {
        if (!this.spinner) {
            this.spinner = (0, ora_1.default)({
                text: step,
                discardStdin: false,
            }).start();
        }
        if (done) {
            if (isSuccess) {
                this.spinner.succeed(step);
            }
            else {
                this.spinner.fail(step);
            }
            this.spinner = undefined;
        }
        else {
            this.spinner.text = step;
        }
        return this.spinner;
    }
    detectAppType(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = yield this.manager.execute(feishu_devtools_core_1.ModuleName.sniffer, feishu_devtools_core_1.SnifferCmdEnum.GetAppType, path);
            switch (type) {
                case 'gadget':
                    return enum_1.TypeEnum.Gadget;
                case 'block':
                    return enum_1.TypeEnum.Block;
                case 'h5_in_block':
                    return enum_1.TypeEnum.Block;
                default:
                    return '';
            }
        });
    }
}
exports.default = Base;
