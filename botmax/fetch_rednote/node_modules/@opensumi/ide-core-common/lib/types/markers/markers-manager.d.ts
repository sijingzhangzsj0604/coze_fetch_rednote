import { Event, IDisposable } from '@opensumi/ide-utils';
import { WithEventBus } from '../../event-bus';
import { IMarker, IMarkerData, MarkerStatistics } from './markers';
export interface IBaseMarkerManager {
    /**
     * 更新markers
     * @param type 类型标识
     * @param uri markers对应的资源
     * @param markers 所有markers
     */
    updateMarkers(type: string, uri: string, markers: IMarkerData[]): any;
    /**
     * 清空markers
     * @param type 类型标识
     */
    clearMarkers(type: string): any;
    /**
     * 获取所有markers的统计信息
     */
    getStats(): MarkerStats;
    /**
     * 获得当前所有资源
     */
    getResources(): string[];
    /**
     * 获取markers
     */
    getMarkers(filter: {
        type?: string;
        resource?: string;
        severities?: number;
        take?: number;
        opened?: boolean;
    }): IMarker[];
    /**
     * marker变更事件
     */
    onMarkerChanged: Event<string[]>;
    /**
     * 打开编辑器回调
     * @param resource 资源
     */
    onEditorGroupOpen(resource: string): any;
    /**
     * 关闭编辑器回调
     * @param resource 资源
     */
    onEditorGroupClose(resource: string): any;
}
export declare class MarkerStats implements MarkerStatistics, IDisposable {
    errors: number;
    infos: number;
    warnings: number;
    unknowns: number;
    private _data?;
    private _manager;
    private _subscription;
    constructor(manager: IBaseMarkerManager);
    dispose(): void;
    private _update;
    private _resourceStats;
    private _substract;
    private _add;
}
export declare class MarkerManager extends WithEventBus implements IBaseMarkerManager {
    private readonly _byResource;
    private readonly _byType;
    private readonly _byResourceCloseCache;
    private readonly _openedResource;
    private _stats;
    private readonly onMarkerChangedEmitter;
    readonly onMarkerChanged: Event<string[]>;
    constructor();
    /**
     * 接受Diagnostics信息，更新marker
     * @param type marker 类型，比如 typescript, eslint等
     * @param uri marker 资源
     * @param rawMarkers 来源于diagnostics的原始marker信息
     */
    updateMarkers(type: string, uri: string, rawMarkers: IMarkerData[]): void;
    /**
     * Marker数据类型转换
     * @param type marker类型
     * @param resource 资源uri
     * @param data marker数据
     */
    private convertToMarker;
    /**
     * 清空特定类型的marker
     * @param type 消息类型
     */
    clearMarkers(type: string): void;
    /**
     * 清空给定uri的所有marker
     * @param resource 资源uri
     */
    clearMarkersOfUri(resource: string): void;
    /**
     * 根据过滤条件，查询marker列表
     * - type 类型
     * - resource 资源URI
     * - severities 安全等级
     * - take 提取个数
     * - opened 是否过滤打开的
     * @param filter 过滤条件
     */
    getMarkers(filter?: {
        type?: string;
        resource?: string;
        severities?: number;
        take?: number;
        opened?: boolean;
    }): IMarker[];
    private isTargetMarker;
    getResources(): string[];
    getStats(): MarkerStats;
    onEditorGroupOpen(resource: string): void;
    onEditorGroupClose(resource: string): void;
}
//# sourceMappingURL=markers-manager.d.ts.map