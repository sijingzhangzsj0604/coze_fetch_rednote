"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileType = exports.FileStat = exports.IFileServiceClient = void 0;
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./file-watch"), exports);
/**
 * @deprecated please import it from '@opensumi/ide-file-service/lib/common'
 * `import { IFileServiceClient } from '@opensumi/ide-file-service/lib/common';`
 */
exports.IFileServiceClient = Symbol('IFileServiceClient');
var FileStat;
(function (FileStat) {
    function is(candidate) {
        return (typeof candidate === 'object' &&
            'uri' in candidate &&
            'lastModification' in candidate &&
            'isDirectory' in candidate);
    }
    FileStat.is = is;
    function equals(one, other) {
        if (!one || !other || !is(one) || !is(other)) {
            return false;
        }
        return (one.uri === other.uri && one.lastModification === other.lastModification && one.isDirectory === other.isDirectory);
    }
    FileStat.equals = equals;
})(FileStat = exports.FileStat || (exports.FileStat = {}));
/**
 * Enumeration of file types. The types `File` and `Directory` can also be
 * a symbolic links, in that use `FileType.File | FileType.SymbolicLink` and
 * `FileType.Directory | FileType.SymbolicLink`.
 */
var FileType;
(function (FileType) {
    /**
     * The file type is unknown.
     */
    FileType[FileType["Unknown"] = 0] = "Unknown";
    /**
     * A regular file.
     */
    FileType[FileType["File"] = 1] = "File";
    /**
     * A directory.
     */
    FileType[FileType["Directory"] = 2] = "Directory";
    /**
     * A symbolic link to a file.
     */
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType = exports.FileType || (exports.FileType = {}));
//# sourceMappingURL=file.js.map