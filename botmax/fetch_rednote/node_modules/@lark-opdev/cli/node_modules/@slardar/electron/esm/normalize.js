import { __assign } from "tslib";
import { isObject } from '@slardar/sdk-template';
import { DEFAULT_SAMPLE_GRANULARITY } from './constants';
import { defaultPlugins } from './utils';
export function validateInitConfig(config) {
    return isObject(config) && 'bid' in config && !!config.bid;
}
export function normalizeUserConfig(config) {
    return __assign({}, config);
}
export function initConfigNormalizer(config) {
    var _a;
    var plugins = (_a = config.plugins) !== null && _a !== void 0 ? _a : {};
    for (var k in plugins) {
        if (plugins[k] && !isObject(plugins[k])) {
            plugins[k] = {};
        }
    }
    return __assign(__assign({}, config), defaultPlugins);
}
export function parseServerConfig(serverConfig) {
    if (!serverConfig) {
        return {};
    }
    var sample = serverConfig.sample, user_id = serverConfig.user_id, timestamp = serverConfig.timestamp;
    if (!sample) {
        return {
            userId: user_id,
        };
    }
    var sample_rate = sample.sample_rate, _a = sample.sample_granularity, sample_granularity = _a === void 0 ? DEFAULT_SAMPLE_GRANULARITY : _a, include_users = sample.include_users, _b = sample.rules, rules = _b === void 0 ? [] : _b;
    // TODO: 检查插件字段是否需要补全
    return {
        userId: user_id,
        sample: {
            include_users: include_users,
            sample_rate: sample_rate,
            sample_granularity: sample_granularity,
            rules: rules.reduce(function (prev, cur) {
                var name = cur.name, enable = cur.enable, sample_rate = cur.sample_rate, conditional_sample_rules = cur.conditional_sample_rules;
                prev[name] = {
                    enable: enable,
                    sample_rate: sample_rate,
                    conditional_sample_rules: conditional_sample_rules,
                };
                return prev;
            }, {}),
        },
        plugins: defaultPlugins,
        serverTimestamp: timestamp,
    };
}
//# sourceMappingURL=normalize.js.map