import { LocalStorage } from 'node-localstorage';
import { safeStringify } from '@slardar/sdk-template';
import { STORAGE_PREFIX } from '../constants';
export var getStorageKey = function (bid) { return STORAGE_PREFIX + bid; };
export var getDefaultUserIdAndDeviceId = function (bid, localDataPath) {
    var _a;
    if (bid === void 0) { bid = ''; }
    if (!localDataPath) {
        return { userId: '', deviceId: '' };
    }
    var key = getStorageKey(bid);
    return (_a = Storage.get(key, localDataPath)) !== null && _a !== void 0 ? _a : { userId: '', deviceId: '' };
};
export var hasSetStorageItem = function (bid, localDataPath) {
    if (bid === void 0) { bid = ''; }
    if (!localDataPath)
        return false;
    var key = getStorageKey(bid);
    return !!Storage.get(key, localDataPath);
};
export var setStorageUserIdAndDeviceId = function (config) {
    var bid = config.bid, userId = config.userId, deviceId = config.deviceId, localDataPath = config.localDataPath;
    if (!localDataPath)
        return;
    var key = getStorageKey(bid);
    Storage.set(key, {
        userId: userId,
        deviceId: deviceId,
    }, localDataPath);
};
var getStorageItem = function (name, localDataPath) {
    var localStorage = new LocalStorage(localDataPath);
    var value = localStorage.getItem(name);
    if (!value)
        return value;
    return JSON.parse(value);
};
var setStorageItem = function (key, value, localDataPath) {
    var localStorage = new LocalStorage(localDataPath);
    localStorage.setItem(key, safeStringify(value));
};
export var Storage = {
    get: getStorageItem,
    set: setStorageItem,
};
//# sourceMappingURL=storage.js.map