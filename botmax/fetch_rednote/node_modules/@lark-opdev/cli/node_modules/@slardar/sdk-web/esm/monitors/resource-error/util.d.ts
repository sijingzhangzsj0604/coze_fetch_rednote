import { ResourceErrorPayload } from '../../types';
import { ResourceErrorData } from './type';
export declare type Target = HTMLScriptElement | HTMLLinkElement | HTMLImageElement | HTMLVideoElement;
export declare function isHTMLLinkElement(target: Target): target is HTMLLinkElement;
export declare function getElementAttr<T extends Target>(target: T, attr: KeysMatching<T, string, string>): string | T[KeysMatching<T, string, string>];
declare type KeysMatching<T, V, M> = {
    [K in keyof T]-?: K extends V ? (T[K] extends M ? K : never) : never;
}[keyof T];
export declare const getSrc: (target: Target) => string;
export declare const getDataFromEvent: (e: Event) => ResourceErrorData | undefined;
export declare const buildPayload: (data: ResourceErrorData, getEntriesByName: (name: string) => PerformanceEntryList) => ResourceErrorPayload;
export {};
