import { URI as Uri } from 'vscode-uri';
import { IRelativePattern } from './glob';
import { Path } from './path';
export { URI as Uri, Utils as UriUtils } from 'vscode-uri';
export interface UriComponents {
    scheme: string;
    authority: string;
    path: string;
    query: string;
    fragment: string;
}
export declare class URI {
    static from(components: {
        scheme: string;
        authority?: string;
        path?: string;
        query?: string;
        fragment?: string;
    }): URI;
    static file(path: string): URI;
    static parse(path: string): URI;
    static isUri(thing: any): thing is URI;
    static isUriString(str: string): boolean;
    static revive(data: any): Uri;
    readonly codeUri: Uri;
    private _path;
    constructor(uri?: string | Uri);
    get displayName(): string;
    /**
     * Return all uri from the current to the top most.
     */
    get allLocations(): URI[];
    get parent(): URI;
    relative(uri: URI): Path | undefined;
    resolve(path: string | Path): URI;
    /**
     * return a new URI replacing the current with the given scheme
     */
    withScheme(scheme: string): URI;
    /**
     * @deprecated
     * return this URI without a scheme
     */
    withoutScheme(): URI;
    /**
     * return a new URI replacing the current with the given authority
     */
    withAuthority(authority: string): URI;
    /**
     * return this URI without a authority
     */
    withoutAuthority(): URI;
    /**
     * return a new URI replacing the current with the given path
     */
    withPath(path: string | Path): URI;
    /**
     * return this URI without a path
     */
    withoutPath(): URI;
    /**
     * return a new URI replacing the current with the given query
     */
    withQuery(query: string): URI;
    /**
     * return this URI without a query
     */
    withoutQuery(): URI;
    /**
     * return a new URI replacing the current with the given fragment
     */
    withFragment(fragment: string): URI;
    /**
     * return this URI without a fragment
     */
    withoutFragment(): URI;
    get scheme(): string;
    get authority(): string;
    get path(): Path;
    get query(): string;
    get fragment(): string;
    toString(skipEncoding?: boolean): string;
    isEqualOrParent(uri: URI): boolean;
    isEqual(uri: URI): boolean;
    matchGlobPattern(pattern: string | IRelativePattern): boolean;
    static getDistinctParents(uris: URI[]): URI[];
    getParsedQuery(): {
        [key: string]: string;
    };
    static stringifyQuery(query: {
        [key: string]: any;
    }): string;
}
//# sourceMappingURL=uri.d.ts.map