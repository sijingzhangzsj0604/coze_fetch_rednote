import { AppTypeEnum } from './commonData';
export declare enum AuditAPI {
    createConnection = "Audit.createConnection",
    driverSubscribe = "Audit.driver.subscribe",
    appDataChange = "AppData.auditGetData",
    stopCollect = "Audit.stopCollect",
    trackImageRequest = "Audit.trackImageRequest",
    getDeviceInfo = "Audit.getDeviceInfo",
    getAllPages = "Audit.getAllPages",
    trackImageCache = "Audit.trackImageCache",
    setBlockUrl = "Audit.setBlockUrl",
    getBlockUrl = "Audit.getBlockUrl",
    ready = "Audit.ready",
    setIsAutoAudit = "Audit.isAutoAudit",
    stopAudit = "Audit.stopAudit",
    sendAuditResult = "Audit.result",
    restartAudit = "Audit.restart",
    clickStart = "Audit.clickStart"
}
export declare enum GadgetPageLifeCycle {
    beforePass = "gadgetPageLifeCycle.beforePass",
    afterPass = "gadgetPageLifeCycle.afterPass"
}
export declare enum GadgetPagePerformance {
    onAppRoute = "gadgetPagePerformance.onAppRoute",
    renderTime = "gadgetPagePerformance.renderTime",
    timeLinePoints = "gadgetPagePerformance.timeLinePoints",
    scriptExecutionTime = "gadgetPagePerformance.scriptExecutionTime",
    onNetworkChange = "gadgetPagePerformance.onNetworkChange",
    onDeviceModelChange = "gadgetPagePerformance.onDeviceModelChange",
    onSdkChange = "gadgetPagePerformance.onSdkChange",
    jsException = "gadgetPagePerformance.jsException",
    requestException = "gadgetPagePerformance.RequestException",
    checkHttps = "gadgetPagePerformance,checkHttps",
    requestCache = "gadgetPagePerformance.requestCache",
    setDataRedundancy = "gadgetPagePerformance.setDataRedundancy",
    webkitOverflow = "gadgetPagePerformance.webkitOverflow",
    safeBottom = "gadgetPagePerformance.safeBottom",
    avoidActive = "gadgetPagePerformance.avoidActive",
    trackClickEleSize = "gadgetPagePerformance.trackClickEleSize",
    trackImageSize = "gadgetPagePerformance.trackImageSize",
    trackImageCache = "gadgetPagePerformance.trackImageCache",
    getDomData = "gadgetPagePerformance.getDomData",
    trackRequest = "gadgetPagePerformance.trackRequest",
    getRequestDuration = "gadgetPagePerformance.getRequestDuration",
    firstRenderTime = "gadgetPagePerformance.firstRenderTime"
}
export declare enum DevtoolsLaunchPanel {
    audit = "audit"
}
export declare enum ConsoleCustomMsg {
    clear = "Console.clearMessage"
}
export interface StartOptions {
    compilePath: string;
    panel?: DevtoolsLaunchPanel;
    type?: AppTypeEnum;
    autoStartAudit?: boolean;
    headless?: boolean;
    host?: string;
    platform?: string;
    debugPort?: number;
}
export declare enum MockPanelMsg {
    getData = "MockPanelMsg.getData",
    setData = "MockPanelMsg.setData",
    click = "MockPanelMsg.click"
}
export declare enum ElementMsg {
    onSelectNode = "ElementMsg.onSelectNode",
    onSelectComponent = "ElementMsg.onSelectComponent",
    getComponentData = "ElementMsg.getComponentData",
    setComponentData = "ElementMsg.setComponentData"
}
export declare enum NetworkMsg {
    networkStatusChange = "NetworkMsg.networkStatusChange"
}
export declare enum PerformanceMsg {
    init = "Performance.init",
    initData = "Performance.initData",
    Start = "Performance.start",
    Connecting = "Performance.connecting",
    Running = "Performance.running",
    Stop = "Performance.stop",
    End = "Performance.end"
}
