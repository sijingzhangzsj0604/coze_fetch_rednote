import test from 'ava';
import sinon from 'sinon';
import { createClient } from '../client';
import { id, createBaseConfigManager, noopSender, directBuilder, noopBuilder } from '../utils';
test('client.build - not started', function (t) {
    var client = createClient({
        builder: directBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onBuild = sinon.spy(id);
    client.on('build', onBuild);
    // @ts-expect-error
    client.report();
    t.assert(onBuild.notCalled);
    // not started
    var event = { data: 'content' };
    client.report(event);
    t.assert(onBuild.notCalled);
    // not inited
    client.start();
    t.assert(onBuild.notCalled);
    // not started
    client.build(event);
    t.assert(onBuild.notCalled);
    client.init({});
    client.start();
    // build from preStartQueue
    t.assert(onBuild.calledOnce);
    client.build(event);
    t.assert(onBuild.calledTwice);
    t.is(onBuild.args[0][0], event);
    t.is(onBuild.args[1][0], event);
});
test('client.build - filter at beforeBuild', function (t) {
    var client = createClient({
        builder: directBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onBuild = sinon.spy(id);
    client.on('build', onBuild);
    client.on('beforeBuild', function (ev) { return ('data' in ev ? ev : false); });
    var event = { data: 'content' };
    client.init({});
    client.start();
    t.assert(onBuild.notCalled);
    client.build(event);
    t.assert(onBuild.calledOnce);
    t.is(onBuild.args[0][0], event);
    client.build({ nonData: 'content' });
    t.assert(onBuild.calledOnce);
});
test('client.build - filter by builder', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onReport = sinon.spy(id);
    var onBeforeBuild = sinon.spy(id);
    var onBuild = sinon.spy(id);
    client.on('report', onReport);
    client.on('beforeBuild', onBeforeBuild);
    client.on('build', onBuild);
    var event = { data: 'content' };
    client.init({});
    client.start();
    t.assert(onBeforeBuild.notCalled);
    t.assert(onBuild.notCalled);
    client.build(event);
    t.assert(onBeforeBuild.calledOnce);
    t.is(onBeforeBuild.args[0][0], event);
    t.assert(onBuild.notCalled);
    client.report(event);
    t.assert(onReport.calledOnce);
    t.is(onReport.args[0][0], event);
    t.assert(onBeforeBuild.calledTwice);
    t.is(onBeforeBuild.args[1][0], event);
    t.assert(onBuild.notCalled);
});
test('client.build - filter at build', function (t) {
    var send = sinon.fake();
    var client = createClient({
        builder: directBuilder,
        createSender: function () { return ({ send: send }); },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onReport = sinon.spy(id);
    var onBeforeBuild = sinon.spy(id);
    client.on('report', onReport);
    client.on('beforeBuild', onBeforeBuild);
    client.on('build', function (ev) { return ('data' in ev ? ev : false); });
    var event = { data: 'content' };
    client.init({});
    client.start();
    t.assert(onBeforeBuild.notCalled);
    t.assert(send.notCalled);
    client.build(event);
    t.assert(onBeforeBuild.calledOnce);
    t.is(onBeforeBuild.args[0][0], event);
    t.assert(send.calledOnce);
    t.is(send.args[0][0], event);
    var event2 = { nonData: 'content' };
    client.report(event2);
    t.assert(onReport.calledOnce);
    t.is(onReport.args[0][0], event2);
    t.assert(onBeforeBuild.calledTwice);
    t.is(onBeforeBuild.args[1][0], event2);
    t.assert(send.calledOnce);
});
//# sourceMappingURL=client.build.spec.js.map