import { PerformanceInit, PerformanceSend } from '../../monitors/performance/spa-monitor/type';
import { PerformanceMonitorUserConfig, PerformancePrecollect } from '../../monitors/performance/type';
import { PerformancePayload, WebClient } from '../../types';
export { PerformancePrecollect };
export declare const PERFORMANCE_MONITOR_PLUGIN_NAME = "performance";
declare type CustomPerformancePayload = Partial<Omit<PerformancePayload, 'name' | 'value'>> & Pick<PerformancePayload, 'name' | 'value'>;
export declare type WithSendPerformance<C extends WebClient> = C & {
    sendCustomPerfMetric?: (metric: CustomPerformancePayload) => void;
    performanceInit?: PerformanceInit;
    performanceSend?: PerformanceSend;
};
export declare type WithPerformancePrecollect<C extends WebClient> = C & {
    pp?: PerformancePrecollect;
};
export declare const defaultPerformancePrecollect: PerformancePrecollect;
export interface PerformanceMonitorPluginConfig {
    [PERFORMANCE_MONITOR_PLUGIN_NAME]?: Partial<PerformanceMonitorUserConfig> | boolean;
}
export declare function PerformanceMonitorPlugin<C extends WithPerformancePrecollect<WebClient>>(client: C): void;
