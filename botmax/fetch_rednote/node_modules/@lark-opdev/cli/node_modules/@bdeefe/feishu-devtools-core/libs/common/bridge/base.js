"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const types_1=require("./types"),noop=()=>{};class Bridge{constructor(t,s,e=!0){this.listenerMap=new Map,this.id=0,this.tasks=new Map,this.messageHandler=t=>{const s=this.transform(t);if(s&&s.type)if(s.type===types_1.MsgType.EVENT){(this.listenerMap.get(s.data.name)||[]).forEach(t=>t(s.data.data))}else if(s.type===types_1.MsgType.SUBSCRIBE)this.execute(s.data.name,s.data.data,this);else if(s.type===types_1.MsgType.INVOKE){const t=s.data.name;(this.tasks.get(t)||noop)(s.data.data);const e=t%2==0?t-1:t+1;this.tasks.delete(e),this.tasks.delete(t)}};let a,i={};"function"==typeof t?a=t:(i=t&&"object"==typeof t?t:i,a="function"==typeof s?s:noop);const{format:o=((t,s,e)=>({type:t,data:{name:s,data:e}})),transform:n=(t=>t)}=i;this.format=o,this.transform=n,this.execute=a,e&&this.onmessage()}invoke(t,s){this.postMessage(this.format(types_1.MsgType.INVOKE,t,s))}subscribe(t,s){const{success:e=noop,fail:a=noop}=s;this.tasks.set(++this.id,e),this.tasks.set(++this.id,a),this.postMessage(this.format(types_1.MsgType.SUBSCRIBE,t,Object.assign(Object.assign({},s),{success:this.id-1,fail:this.id})))}addEventListener(t,s){const e=this.listenerMap.get(t)||[];return e.length||this.listenerMap.set(t,e),e.push(s),()=>{const t=e.indexOf(s);~t&&e.splice(t,1)}}sendData(t,s){this.postMessage(this.format(types_1.MsgType.EVENT,t,s))}}exports.default=Bridge;