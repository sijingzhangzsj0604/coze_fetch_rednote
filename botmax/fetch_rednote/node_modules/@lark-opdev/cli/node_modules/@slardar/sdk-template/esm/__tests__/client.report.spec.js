import test from 'ava';
import sinon from 'sinon';
import { createClient } from '../client';
import { id, createBaseConfigManager, noopBuilder, noopSender } from '../utils';
test('client.beforeReport - should filter event before report', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var filterEvent = { data: '' };
    var event = { data: 'content' };
    var onBeforeReport = sinon.stub().callsFake(function (e) {
        if (e.data === '') {
            return false;
        }
        return e;
    });
    client.on('beforeReport', onBeforeReport);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.report(filterEvent);
    t.false(onReport.called);
    client.report(event);
    t.is(onReport.args[0][0], event);
});
test('client.report - no data', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onReport = sinon.fake();
    client.on('report', onReport);
    t.assert(onReport.notCalled);
    // @ts-expect-error
    client.report();
    t.assert(onReport.notCalled);
    var event = { data: 'content ' };
    client.report(event);
    t.is(onReport.args[0][0], event);
});
//# sourceMappingURL=client.report.spec.js.map