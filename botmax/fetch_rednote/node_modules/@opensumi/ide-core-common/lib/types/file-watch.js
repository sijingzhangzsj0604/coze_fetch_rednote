"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCFileChangeType = exports.FileChangeType = exports.FileChangeEvent = exports.FileChange = void 0;
const ide_utils_1 = require("@opensumi/ide-utils");
var FileChange;
(function (FileChange) {
    function isUpdated(change, uri) {
        return change.type === FileChangeType.UPDATED && uri.toString() === change.uri;
    }
    FileChange.isUpdated = isUpdated;
    function isAdded(change, uri) {
        return change.type === FileChangeType.ADDED && uri.toString() === change.uri;
    }
    FileChange.isAdded = isAdded;
    function isDeleted(change, uri) {
        return change.type === FileChangeType.DELETED && ide_utils_1.URI.file(change.uri).isEqualOrParent(uri);
    }
    FileChange.isDeleted = isDeleted;
    function isAffected(change, uri) {
        return isDeleted(change, uri) || uri.toString() === change.uri;
    }
    FileChange.isAffected = isAffected;
    function isChanged(change, uri) {
        return !isDeleted(change, uri) && uri.toString() === change.uri;
    }
    FileChange.isChanged = isChanged;
})(FileChange = exports.FileChange || (exports.FileChange = {}));
var FileChangeEvent;
(function (FileChangeEvent) {
    function isUpdated(event, uri) {
        return event.some((change) => FileChange.isUpdated(change, uri));
    }
    FileChangeEvent.isUpdated = isUpdated;
    function isAdded(event, uri) {
        return event.some((change) => FileChange.isAdded(change, uri));
    }
    FileChangeEvent.isAdded = isAdded;
    function isDeleted(event, uri) {
        return event.some((change) => FileChange.isDeleted(change, uri));
    }
    FileChangeEvent.isDeleted = isDeleted;
    function isAffected(event, uri) {
        return event.some((change) => FileChange.isAffected(change, uri));
    }
    FileChangeEvent.isAffected = isAffected;
    function isChanged(event, uri) {
        return !isDeleted(event, uri) && event.some((change) => FileChange.isChanged(change, uri));
    }
    FileChangeEvent.isChanged = isChanged;
})(FileChangeEvent = exports.FileChangeEvent || (exports.FileChangeEvent = {}));
var FileChangeType;
(function (FileChangeType) {
    FileChangeType[FileChangeType["UPDATED"] = 0] = "UPDATED";
    FileChangeType[FileChangeType["ADDED"] = 1] = "ADDED";
    FileChangeType[FileChangeType["DELETED"] = 2] = "DELETED";
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var VSCFileChangeType;
(function (VSCFileChangeType) {
    /**
     * The contents or metadata of a file have changed.
     */
    VSCFileChangeType[VSCFileChangeType["Changed"] = 1] = "Changed";
    /**
     * A file has been created.
     */
    VSCFileChangeType[VSCFileChangeType["Created"] = 2] = "Created";
    /**
     * A file has been deleted.
     */
    VSCFileChangeType[VSCFileChangeType["Deleted"] = 3] = "Deleted";
})(VSCFileChangeType = exports.VSCFileChangeType || (exports.VSCFileChangeType = {}));
//# sourceMappingURL=file-watch.js.map