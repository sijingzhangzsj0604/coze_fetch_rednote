import BaseModule from '../../common/Module';
import { CmdEnum, CmdMap, EventMap, Info, LoadingInfo } from '../../protocol/ui';
import { ModuleName } from '../../types/protocol';
export default abstract class UIModule extends BaseModule<ModuleName.ui, EventMap> implements CmdMap {
    constructor();
    abstract [CmdEnum.pick]<T>(list: ({
        name: string;
        value: T;
    } | T)[], message?: string): Promise<T>;
    abstract [CmdEnum.showInfo](info: Info): void;
    abstract [CmdEnum.confirm](info: Info): Promise<boolean>;
    abstract [CmdEnum.input](info: {
        placeholder: string;
        label?: string;
        checker?: (text: string) => boolean | string | Promise<boolean | string>;
    }): Promise<string>;
    abstract [CmdEnum.openPage](url: string, options?: {
        forceChrome?: boolean;
    }): Promise<void>;
    abstract [CmdEnum.link](url: string, tooltip?: string): string;
    abstract [CmdEnum.dialog](info: Info): void;
    abstract [CmdEnum.showLoading](info: LoadingInfo): {
        hideLoading: () => void;
    };
    abstract [CmdEnum.multiPick](list: unknown[], message?: string | undefined): Promise<unknown[]>;
}
