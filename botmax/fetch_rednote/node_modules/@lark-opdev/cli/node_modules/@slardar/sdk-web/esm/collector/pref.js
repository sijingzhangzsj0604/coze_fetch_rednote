import { __read } from "tslib";
import { getDefaultPerformanceObserver } from '../utils';
export var PERFORMANCE_EVENT_TYPE = ['first-input', 'paint', 'navigation']; // used by paintMonitor / fidMonitor / timingMonitor
export var RESOURCE_TYPE = ['resource']; // used by resourceMonitor / resourceErrorMonitor / HttpMonitor
export var LONGTASK_TYPE = ['longtask']; // used by ttiMonitor / longtaskMonitor / actionMonitor / mpfidMonitor
var applyPerformanceObserver = function (PerformanceObserver, callback, onFail) {
    var observer = PerformanceObserver &&
        new PerformanceObserver(function (list, ob) {
            if (list.getEntries) {
                list.getEntries().forEach(function (val, i, arr) { return callback(val, i, arr, ob); });
            }
            else {
                onFail && onFail();
            }
        });
    var observe = function (types) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ entryTypes: types });
        }
        catch (_a) {
            return onFail && onFail();
        }
    };
    var bufferedObserver = function (type) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ type: type, buffered: true });
        }
        catch (_a) {
            return onFail && onFail();
        }
        observer.observe({ type: type, buffered: false });
    };
    var disconnect = function () { return observer && observer.disconnect(); };
    return [observe, bufferedObserver, disconnect];
};
export var observePerf = function (Ob, pipe, types) {
    var _a = __read(applyPerformanceObserver(Ob, pipe), 3), observe = _a[0], disconnect = _a[2];
    observe(types);
    return disconnect;
};
export var observePerfWithBuffer = function (Ob, pipe, type) {
    var _a = __read(applyPerformanceObserver(Ob, pipe), 3), bufferedObserver = _a[1], disconnect = _a[2];
    bufferedObserver(type);
    return disconnect;
};
export var LONGTASK_SUBJECT_NAME = 'longtask_0';
export var observeLongtask = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    tearDown(observePerf(PerformanceObserver, next, LONGTASK_TYPE));
};
export var longtaskSubject = [LONGTASK_SUBJECT_NAME, observeLongtask];
export var RESOURCE_SUBJECT_NAME = 'resource_0';
export var observeResource = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    tearDown(observePerf(PerformanceObserver, next, RESOURCE_TYPE));
};
export var resourceSubject = [RESOURCE_SUBJECT_NAME, observeResource];
//# sourceMappingURL=pref.js.map