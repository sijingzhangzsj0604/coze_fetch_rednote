import { AnyClient } from '../types';
import { Observer, SafeObservable } from '../utils/observable';
export declare type WithSubject<C extends AnyClient> = C & {
    initSubject: <T extends (args: any) => any>(args: [subjectKey: string, collector: Observer<T>]) => SafeObservable<T>;
    getSubject: (key: string) => SafeObservable<any> | undefined;
    privateSubject: SubjectMap;
};
export declare type SubjectMap = {
    [key: string]: SafeObservable<any> | undefined;
};
export declare function SubjectPlugin(client: AnyClient, globalSubjectMap: SubjectMap | undefined): void;
/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
export declare function initSubjectInGlobal<T extends (args: any) => any>(client: WithSubject<AnyClient>, args: [subjectKey: string, observer: Observer<T>]): SafeObservable<T>;
/**
 * 此方法不会挂载到全局对象上，同时只支持同步注册并使用
 */
export declare function initPrivateSubject<T extends (args: any) => any>(client: WithSubject<AnyClient>, [subjectKey, observer]: [subjectKey: string, observer: Observer<T>], bufferTime?: number): SafeObservable<T>;
