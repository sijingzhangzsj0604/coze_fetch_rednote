import { CaseInsensitiveMap } from '@opensumi/ide-utils';
export type ILocalizationKey = string;
export declare const localizationRegistryMap: CaseInsensitiveMap<string, LocalizationRegistry>;
export declare function localize(symbol: ILocalizationKey, defaultMessage?: string | undefined, scope?: string, language?: string): string;
export declare function formatLocalize(symbol: ILocalizationKey, ...args: any): string;
export declare function registerLocalizationBundle(bundle: ILocalizationBundle, scope?: string): void;
interface IExtensionLocalizationValue {
    message: string;
    comment: string;
}
export interface IExtensionLocalizationContents {
    [key: string]: string | IExtensionLocalizationValue;
}
export interface ILocalizationBundle extends ILocalizationInfo {
    contents: IExtensionLocalizationContents;
}
export interface ILocalizationInfo {
    languageId: string;
    languageName: string;
    localizedLanguageName: string;
}
export interface ILocalizationContents {
    [key: string]: string;
}
interface ILocalizationRegistry {
    registerLocalizationBundle(bundle: ILocalizationBundle): void;
    getLocalizeString(symbol: ILocalizationKey, defaultLabel?: string, languageId?: string): string;
    getAllLanguages(): ILocalizationInfo[];
}
declare class LocalizationRegistry implements ILocalizationRegistry {
    private localizationMap;
    readonly localizationInfo: CaseInsensitiveMap<string, ILocalizationInfo>;
    registerLocalizationBundle(bundle: ILocalizationBundle): void;
    getLocalizeString(key: ILocalizationKey, defaultValue?: string | null, languageId?: string): string;
    private getContents;
    getAllLanguages(): ILocalizationInfo[];
}
/**
 * 获取当前语言 ID，默认为中文
 * @returns 当前语言 ID
 */
export declare function getLanguageId(): string;
/**
 * for vscode extension use.
 *
 * vscode consider that `en` and `en-us` are the same language(you can search for `en-us` in their code base).
 * and their default language is `en`, so we should transform the language id to the vscode language id.
 *
 * and vscode fetch the language id from the browser (`navigator.language`) or electron's [`app.getLocale()`](https://www.electronjs.org/zh/docs/latest/api/app#appgetlocale).
 * they both using Chromium's l10n_util library. Possible values are here: https://source.chromium.org/chromium/chromium/src/+/master:ui/base/l10n/l10n_util.cc
 *
 * The language used for the user interface. The format of the string is all lower case (e.g. zh-tw for Traditional Chinese)
 * see: [language](https://github.com/microsoft/vscode/blob/32b031eeefc4fd27a21659d35070967bfe965bcc/src/vs/base/common/platform.ts#L165)
 */
export declare function getCodeLanguage(): string;
export declare function getCurrentLanguageInfo(scope?: string): ILocalizationInfo;
export declare function setLanguageId(languageId: string): void;
export declare function getAvailableLanguages(scope?: string): ILocalizationInfo[];
/**
 * 将整段字符串中所有的占位符标识的做一遍转换，
 * 标识符转换失败则返回该字符串本身：
 * ```js
 * "%abcd%1 %1234%2".replace(/%(.*?)%/g, (c, a)=>{return c;})
 * -> "%abcd%1 %1234%2"
 * ```
 * @param label 要转换的字段
 * @param scope 默认为 host
 */
export declare function replaceLocalizePlaceholder(label?: string, scope?: string): string | undefined;
/**
 * 含有占位符标识的字段转换，字段为 falsy 的时候返回该字段
 * 占位符找不到时返回 fallback 值(默认为 undefined)
 * @param label 要转换的字段
 * @param scope 默认为 host
 * @param fallback 默认为 undefined
 */
export declare function replaceNlsField(label: string, scope: string, fallback: string, language?: string): string;
export declare function replaceNlsField(label?: string, scope?: string, fallback?: string, language?: string): string | undefined;
export interface ILocalizedStr {
    raw: string;
    localized: string;
    /**
     * The value is usually in English.
     * which is used so that users can search for commands in English even in non-English environments.
     *
     * Alert: before using this value, you should check if `alias === localized`.
     */
    alias: string;
}
export declare function createLocalizedStr(raw: string, scope?: string, fallback?: string, language?: string, defaultLanguageId?: string): ILocalizedStr;
export declare function createFormatLocalizedStr(raw: ILocalizationKey, ...args: any): ILocalizedStr;
export {};
//# sourceMappingURL=localize.d.ts.map