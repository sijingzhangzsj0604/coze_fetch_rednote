import test from 'ava';
import sinon from 'sinon';
import { createBaseConfigManager, createMergeConfigManager } from '../basic';
test('BaseConfigManager', function (t) {
    var onChange = sinon.fake();
    var onReady = sinon.fake();
    var cm = createBaseConfigManager({
        pid: 'default',
        uid: 'default',
    });
    cm.onChange(onChange);
    t.deepEqual(cm.getConfig(), {
        pid: 'default',
        uid: 'default',
    });
    t.assert(onReady.notCalled);
    cm.onReady(onReady);
    t.assert(onReady.calledOnce);
    t.assert(onChange.notCalled);
    cm.setConfig({ pid: 'index' });
    t.assert(onChange.calledOnce);
    t.deepEqual(cm.getConfig(), {
        pid: 'index',
        uid: 'default',
    });
});
test('MergeConfigManager', function (t) {
    var onChange = sinon.fake();
    var onReady = sinon.fake();
    var cm = createMergeConfigManager({
        pid: 'default',
        details: {
            uids: ['default'],
        },
    });
    cm.onChange(onChange);
    t.deepEqual(cm.getConfig(), {
        pid: 'default',
        details: {
            uids: ['default'],
        },
    });
    t.assert(onReady.notCalled);
    cm.onReady(onReady);
    t.assert(onReady.calledOnce);
    t.assert(onChange.notCalled);
    cm.setConfig({ pid: 'index' });
    t.assert(onChange.calledOnce);
    t.deepEqual(cm.getConfig(), {
        pid: 'index',
        details: {
            uids: ['default'],
        },
    });
    cm.setConfig({ details: { uids: ['user', 'admin'] } });
    t.assert(onChange.calledTwice);
    t.deepEqual(cm.getConfig(), {
        pid: 'index',
        details: {
            uids: ['default', 'user', 'admin'],
        },
    });
});
//# sourceMappingURL=basic.spec.js.map