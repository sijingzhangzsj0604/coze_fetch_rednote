import { __read } from "tslib";
import { createSafeObserver } from '../utils/observable';
export function SubjectPlugin(client, globalSubjectMap) {
    var subjectMap = globalSubjectMap || {};
    var initSubject = function (_a) {
        var _b = __read(_a, 2), subjectKey = _b[0], observer = _b[1];
        if (!subjectMap[subjectKey])
            subjectMap[subjectKey] = createSafeObserver(observer, function () {
                subjectMap[subjectKey] = undefined;
            });
        return subjectMap[subjectKey];
    };
    client.provide('initSubject', initSubject);
    client.provide('getSubject', function (key) { return subjectMap[key]; });
    client.provide('privateSubject', {});
}
/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
export function initSubjectInGlobal(client, args) {
    return client.initSubject(args);
}
/**
 * 此方法不会挂载到全局对象上，同时只支持同步注册并使用
 */
export function initPrivateSubject(client, _a, bufferTime) {
    var _b = __read(_a, 2), subjectKey = _b[0], observer = _b[1];
    var subjectMap = client.privateSubject || {};
    if (!subjectMap[subjectKey])
        subjectMap[subjectKey] = createSafeObserver(observer, function () {
            subjectMap[subjectKey] = undefined;
        }, bufferTime);
    return subjectMap[subjectKey];
}
//# sourceMappingURL=subject.js.map