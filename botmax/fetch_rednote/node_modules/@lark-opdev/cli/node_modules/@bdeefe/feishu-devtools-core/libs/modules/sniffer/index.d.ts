import BaseModule from '../../common/Module';
import { CmdEnum, CmdMap, EventMap } from '../../protocol/sniffer';
import { ModuleName } from '../../types/protocol';
import { AppType } from '../../types/commonData';
import { CompilePathType } from '../../types/simulator';
interface Data {
    appType: AppType;
    compileType: CompilePathType;
}
export default class SnifferModule extends BaseModule<ModuleName.sniffer, EventMap> implements CmdMap {
    protected dataMap: Map<string, Data>;
    constructor();
    [CmdEnum.GetAppType](compilePath: string, useCache?: boolean): Promise<AppType>;
    [CmdEnum.GetAppTypeSync](compilePath: string): AppType | void;
    [CmdEnum.GetAppCompileType](compilePath: string): CompilePathType | void;
    [CmdEnum.ResetCompilePath](old: string, now: string): void;
    [CmdEnum.GetFrameworkOption](compilePath: string): {
        useUpgrade: boolean;
        minimumVersion: string;
    };
}
export {};
