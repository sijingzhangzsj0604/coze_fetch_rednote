'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var require$$0$3 = require('path');
var require$$0$2 = require('fs');
var require$$2 = require('events');
var require$$0 = require('constants');
var require$$0$1 = require('stream');
var require$$4 = require('util');
var require$$5 = require('assert');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$3);
var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);
var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);
var require$$4__default = /*#__PURE__*/_interopDefaultLegacy(require$$4);
var require$$5__default = /*#__PURE__*/_interopDefaultLegacy(require$$5);

var DEFAULT_SIZE = 10;
var DEFAULT_WAIT = 1000;
var stringifyBatch = function (list) {
    return JSON.stringify({
        ev_type: 'batch',
        list: list,
    });
};
function createBatchSender(config) {
    var transport = config.transport;
    var endpoint = config.endpoint, _a = config.size, size = _a === void 0 ? DEFAULT_SIZE : _a, _b = config.wait, wait = _b === void 0 ? DEFAULT_WAIT : _b;
    var batch = [];
    var tid = 0;
    var fail;
    var sender = {
        getSize: function () {
            return size;
        },
        getWait: function () {
            return wait;
        },
        setSize: function (v) {
            size = v;
        },
        setWait: function (v) {
            wait = v;
        },
        getEndpoint: function () {
            return endpoint;
        },
        setEndpoint: function (v) {
            endpoint = v;
        },
        send: function (e) {
            batch.push(e);
            if (batch.length >= size) {
                sendBatch.call(this);
            }
            clearTimeout(tid);
            tid = setTimeout(sendBatch.bind(this), wait);
        },
        flush: function () {
            clearTimeout(tid);
            sendBatch.call(this);
        },
        getBatchData: function () {
            return batch.length ? stringifyBatch(batch) : '';
        },
        clear: function () {
            clearTimeout(tid);
            batch = [];
        },
        fail: function (cb) {
            fail = cb;
        },
    };
    function sendBatch() {
        if (!batch.length) {
            return;
        }
        var data = this.getBatchData();
        transport.post({
            url: endpoint,
            data: data,
            fail: function (err) {
                fail && fail(err, data);
            },
        });
        batch = [];
    }
    return sender;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var EVENTS = [
    'init',
    'start',
    'config',
    'beforeDestroy',
    'provide',
    'beforeReport',
    'report',
    'beforeBuild',
    'build',
    'beforeSend',
    'send',
    'beforeConfig',
];

var noop = function () { return ({}); };
function id(v) {
    return v;
}

// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(o) {
    return typeof o === 'object' && o !== null;
}
function isInstanceOf(wat, base) {
    try {
        return wat instanceof base;
    }
    catch (_e) {
        return false;
    }
}
var objProto = Object.prototype;
// https://stackoverflow.com/a/5878101
function isPlainObject(o) {
    if (isObject(o)) {
        if (typeof Object.getPrototypeOf === 'function') {
            var proto = Object.getPrototypeOf(o);
            return proto === objProto || proto === null;
        }
        // cannot test, requires ES3
        /* istanbul ignore next */
        return objProto.toString.call(o) === '[object Object]';
    }
    return false;
}
function isArray(o) {
    return objProto.toString.call(o) === '[object Array]';
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(o) {
    return typeof o === 'function';
}
function isBoolean(o) {
    return typeof o === 'boolean';
}
function isNumber(o) {
    return typeof o === 'number';
}
function isString(o) {
    return typeof o === 'string';
}
function isError(wat) {
    switch (Object.prototype.toString.call(wat)) {
        case '[object Error]':
            return true;
        case '[object Exception]':
            /* istanbul ignore next */
            return true;
        case '[object DOMError]':
            return true;
        case '[object DOMException]':
            /* istanbul ignore next */
            return true;
        default:
            /* istanbul ignore next */
            return wat instanceof Error;
    }
}
function isEvent(wat) {
    return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
}
function isErrorEvent(what) {
    return Object.prototype.toString.call(what) === '[object ErrorEvent]';
}
function isPromiseRejectionEvent(what) {
    return Object.prototype.toString.call(what) === '[object PromiseRejectionEvent]';
}

function hasKey(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
}
// 把source对象中的内容深度赋给target, 数组合并
function mergeDeepConcatArray() {
    var source = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        source[_i] = arguments[_i];
    }
    var result = {};
    var k = 0;
    while (k < source.length) {
        result = _mergeDeepMergeArray(result, source[k++]);
    }
    return result;
}
// 递归赋值
function _mergeDeepMergeArray(target, source) {
    var result = __assign({}, target);
    for (var key in source) {
        if (hasKey(source, key) && source[key] !== undefined) {
            if (isObject(source[key]) && isPlainObject(source[key])) {
                result[key] = _mergeDeepMergeArray(isObject(target[key]) ? target[key] : {}, source[key]);
            }
            else if (isArray(source[key]) && isArray(target[key])) {
                result[key] = _mergeDeepArray(target[key], source[key]);
            }
            else {
                result[key] = source[key];
            }
        }
    }
    return result;
}
function _mergeDeepArray(target, source) {
    var _target = isArray(target) ? target : [];
    var _source = isArray(source) ? source : [];
    return Array.prototype.concat.call(_target, _source).map(function (v) {
        if (v instanceof RegExp) {
            return v;
        }
        else if (isObject(v) && isPlainObject(v)) {
            return _mergeDeepMergeArray({}, v);
        }
        else if (isArray(v)) {
            return _mergeDeepArray([], v);
        }
        else {
            return v;
        }
    });
}
// 检查数组中是否有元素
function arrayIncludes(array, value) {
    if (!isArray(array)) {
        return false;
    }
    if (array.length === 0) {
        return false;
    }
    var k = 0;
    while (k < array.length) {
        if (array[k] === value) {
            return true;
        }
        k++;
    }
    return false;
}
var arrayRemove = function (arr, e) {
    if (!isArray(arr)) {
        return arr;
    }
    var i = arr.indexOf(e);
    if (i >= 0) {
        var arr_ = arr.slice();
        arr_.splice(i, 1);
        return arr_;
    }
    return arr;
};
/**
 * 按路径访问对象属性
 * @param target 待访问对象
 * @param property 访问属性路径
 * @param { (target: any, property: string): any } visitor 访问器
 */
var safeVisit = function (target, path, visitor) {
    var _a, _b;
    var paths = path.split('.');
    var _c = __read(paths), method = _c[0], rest = _c.slice(1);
    while (target && rest.length > 0) {
        target = target[method];
        _a = rest, _b = __read(_a), method = _b[0], rest = _b.slice(1);
    }
    if (!target) {
        return undefined;
    }
    return visitor(target, method);
};
/**
 *  按路径调用函数
 * @param target 待调用对象，如 `client`
 * @param methods 待调用方法路径，可能是一级路径 `client.start`, 或者是多级命令 `client.context.set`
 * @param args 调用参数
 */
var safeCall = function (target, method, args) {
    return safeVisit(target, method, function (obj, property) {
        if (obj && property in obj && isFunction(obj[property])) {
            try {
                return obj[property].apply(obj, args);
            }
            catch (err) {
                // ignore
                return undefined;
            }
        }
    });
};
var pick = function (obj, keys) {
    if (!obj || !isObject(obj))
        return obj;
    return keys.reduce(function (prev, cur) {
        prev[cur] = obj[cur];
        return prev;
    }, {});
};

function getRegexp(ignore) {
    if (!isArray(ignore)) {
        return null;
    }
    return ignore.length ? joinRegExp(ignore) : null;
}
function joinRegExp(patterns) {
    var sources = [];
    var len = patterns.length;
    for (var i = 0; i < len; i++) {
        var pattern = patterns[i];
        if (isString(pattern)) {
            sources.push(pattern.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1'));
        }
        else if (pattern && pattern.source) {
            sources.push(pattern.source);
        }
    }
    return new RegExp(sources.join('|'), 'i');
}
function safeStringify(a) {
    try {
        return isString(a) ? a : JSON.stringify(a);
    }
    catch (err) {
        return '[FAILED_TO_STRINGIFY]:' + String(err);
    }
}

function createContextAgent() {
    var context = {};
    var stringified = {};
    var contextAgent = {
        set: function (k, v) {
            context[k] = v;
            stringified[k] = safeStringify(v);
            return contextAgent;
        },
        merge: function (ctx) {
            context = __assign(__assign({}, context), ctx);
            Object.keys(ctx).forEach(function (key) {
                stringified[key] = safeStringify(ctx[key]);
            });
            return contextAgent;
        },
        delete: function (k) {
            delete context[k];
            delete stringified[k];
            return contextAgent;
        },
        clear: function () {
            context = {};
            stringified = {};
            return contextAgent;
        },
        get: function (k) {
            return stringified[k];
        },
        toString: function () {
            return __assign({}, stringified);
        },
    };
    return contextAgent;
}

// eslint-disable-next-line @typescript-eslint/ban-types
/**
 * You can feel free to restore when you hook a function.
 * But you ought to restore 「in order」 if you hooked a value reference or a real obj reference.Because we not store the last value referent for now.
 * eg: obj.a = 1;
 * const r_1 = hookObjectProperty(obj, 'a',() =>2)()
 * const r_2 = hookObjectProperty(obj, 'a',() =>3)()
 * r_2() // obj.a === 2
 * r_1() // obj.a === 1
 *
 * @template T
 * @template K
 * @template P
 * @param {T} obj
 * @param {K} key
 * @param {(origin: T[K], ...params: P) => T[K]} hookFunc
 * @param {boolean} isCatchError When an error occurs after calling a hooked function, we want to suppress the errors and try to call the original function by default.
 * @return {*}
 */
// eslint-disable-next-line @typescript-eslint/ban-types
var hookObjectProperty = function (obj, key, hookFunc, isCatchError) {
    if (isCatchError === void 0) { isCatchError = true; }
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (!obj) {
            return noop;
        }
        var origin = obj[key];
        var hookedUnsafe = hookFunc.apply(void 0, __spreadArray([origin], __read(params), false));
        var hooked = hookedUnsafe;
        // 给所有 hook 之后的方法包一层 try catch
        if (isFunction(hooked) && isCatchError) {
            hooked = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    return hookedUnsafe.apply(this, args);
                }
                catch (_a) {
                    return isFunction(origin) && origin.apply(this, args);
                }
            };
        }
        obj[key] = hooked;
        // strict: is break
        return function (strict) {
            if (!strict) {
                hooked === obj[key] ? (obj[key] = origin) : (hookedUnsafe = origin);
            }
        };
    };
};

var errCount = 0;
var error = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // eslint-disable-next-line no-console
    console.error.apply(console, __spreadArray(['[SDK]', Date.now(), ("" + errCount++).padStart(8, ' ')], __read(args), false));
};
var warnCount = 0;
var warn = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // eslint-disable-next-line no-console
    console.warn.apply(console, __spreadArray(['[SDK]', Date.now(), ("" + warnCount++).padStart(8, ' ')], __read(args), false));
};

var isHitBySampleRate = function (sampleRate) {
    if (Math.random() < Number(sampleRate)) {
        return true;
    }
    return false;
};
var isHitByRandom = function (random, sampleRate) {
    if (random < Number(sampleRate)) {
        return true;
    }
    return false;
};

var runProcessors = function (fns) {
    return function (e) {
        var r = e;
        for (var i = 0; i < fns.length; i++) {
            if (r) {
                try {
                    r = fns[i](r);
                }
                catch (err) {
                    error(err);
                }
            }
            else {
                break;
            }
        }
        return r;
    };
};

/**
 * 生成uuid
 * stolen from https://github.com/kelektiv/node-uuid#readme uuid/v4
 *
 * @returns
 */
function mathRNG() {
    var rnds = new Array(16);
    var r = 0;
    for (var i = 0; i < 16; i++) {
        if ((i & 0x03) === 0) {
            r = Math.random() * 0x100000000;
        }
        rnds[i] = (r >>> ((i & 0x03) << 3)) & 0xff;
    }
    return rnds;
}
function bytesToUuid(buf) {
    var byteToHex = [];
    for (var index = 0; index < 256; ++index) {
        byteToHex[index] = (index + 0x100).toString(16).substr(1);
    }
    var i = 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        '-',
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
    ].join('');
}
function uuid() {
    var rnds = mathRNG();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
    return bytesToUuid(rnds);
}

function createClient(creationConfig) {
    var builder = creationConfig.builder, createSender = creationConfig.createSender, createDefaultConfig = creationConfig.createDefaultConfig, createConfigManager = creationConfig.createConfigManager, userConfigNormalizer = creationConfig.userConfigNormalizer, initConfigNormalizer = creationConfig.initConfigNormalizer, validateInitConfig = creationConfig.validateInitConfig;
    var sender;
    var configManager;
    var handlers = {};
    EVENTS.forEach(function (e) { return (handlers[e] = []); });
    var inited = false;
    var started = false;
    var destroyed = false;
    // 缓存 start 之前 build 的事件
    var preStartQueue = [];
    // 禁止通过 provide 挂载的字段名
    var reservedNames = [];
    var client = {
        getBuilder: function () { return builder; },
        getSender: function () { return sender; },
        getPreStartQueue: function () { return preStartQueue; },
        init: function (c) {
            if (inited) {
                warn('already inited');
                return;
            }
            if (c && isObject(c) && validateInitConfig(c)) {
                var defaultConfig = createDefaultConfig(c);
                if (!defaultConfig) {
                    throw new Error('defaultConfig missing');
                }
                var initConfig = initConfigNormalizer(c);
                configManager = createConfigManager(defaultConfig);
                configManager.setConfig(initConfig);
                configManager.onChange(function () {
                    handle('config');
                });
                sender = createSender(configManager.getConfig());
                if (!sender) {
                    throw new Error('sender missing');
                }
                inited = true;
                handle('init', true);
            }
            else {
                throw new Error('invalid InitConfig, init failed');
            }
        },
        set: function (c) {
            if (!inited) {
                return;
            }
            if (c && isObject(c)) {
                handle('beforeConfig', false, c);
                configManager === null || configManager === void 0 ? void 0 : configManager.setConfig(c);
            }
        },
        config: function (c) {
            if (!inited) {
                return;
            }
            if (c && isObject(c)) {
                handle('beforeConfig', false, c);
                configManager === null || configManager === void 0 ? void 0 : configManager.setConfig(userConfigNormalizer(c));
            }
            return configManager === null || configManager === void 0 ? void 0 : configManager.getConfig();
        },
        provide: function (name, value) {
            if (arrayIncludes(reservedNames, name)) {
                warn("cannot provide " + name + ", reserved");
                return;
            }
            client[name] = value;
            handle('provide', false, name);
        },
        start: function () {
            var _this = this;
            if (!inited) {
                return;
            }
            if (started) {
                return;
            }
            configManager === null || configManager === void 0 ? void 0 : configManager.onReady(function () {
                started = true;
                handle('start', true);
                preStartQueue.forEach(function (e) { return _this.build(e); });
                preStartQueue = [];
            });
        },
        report: function (data) {
            if (!data) {
                return;
            }
            var preReport = runProcessors(handlers['beforeReport'])(data);
            if (!preReport) {
                return;
            }
            var processed = runProcessors(handlers['report'])(preReport);
            if (!processed) {
                return;
            }
            if (started) {
                this.build(processed);
            }
            else {
                preStartQueue.push(processed);
            }
        },
        build: function (data) {
            if (!started) {
                return;
            }
            var preBuild = runProcessors(handlers['beforeBuild'])(data);
            if (!preBuild) {
                return;
            }
            var built = builder.build(preBuild);
            if (!built) {
                return;
            }
            var processed = runProcessors(handlers['build'])(built);
            if (!processed) {
                return;
            }
            this.send(processed);
        },
        send: function (data) {
            if (!started) {
                return;
            }
            var processed = runProcessors(handlers['beforeSend'])(data);
            if (processed) {
                sender.send(processed);
                handle('send', false, processed);
            }
        },
        destroy: function () {
            destroyed = true;
            handle('beforeDestroy', true);
        },
        on: function (ev, handler) {
            if (ev === 'init' && inited) {
                handler();
            }
            else if (ev === 'start' && started) {
                handler();
            }
            else if (ev === 'beforeDestroy' && destroyed) {
                handler();
            }
            else if (handlers[ev]) {
                handlers[ev].push(handler);
            }
        },
        off: function (ev, handler) {
            if (handlers[ev])
                handlers[ev] = arrayRemove(handlers[ev], handler);
        },
    };
    reservedNames = Object.keys(client);
    return client;
    function handle(ev, once) {
        if (once === void 0) { once = false; }
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        handlers[ev].forEach(function (f) {
            try {
                f.apply(void 0, __spreadArray([], __read(args), false));
            }
            catch (_err) {
                // ignore
            }
        });
        if (once) {
            handlers[ev].length = 0;
        }
    }
}

var ContextPlugin = function (client) {
    var contextAgent = createContextAgent();
    client.provide('context', contextAgent);
    client.on('report', function (ev) {
        if (!ev.extra) {
            ev.extra = {};
        }
        ev.extra.context = contextAgent.toString();
        return ev;
    });
};

var withCommandArray = function (client, captureContext, applyArgsWithContext) {
    // 缓存需要异步插件来消费的命令
    var cache = {};
    var newClient = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var methodPath = args[0];
        if (!methodPath)
            return;
        var method = methodPath.split('.')[0];
        // 捕获上下文，等异步插件加载后传入
        if (!(method in newClient)) {
            var cachedCommands = cache[method] || [];
            // 区分预收集来的上下文与普通上下文
            var capturedContext = (_a = captureContext === null || captureContext === void 0 ? void 0 : captureContext(client)) !== null && _a !== void 0 ? _a : {};
            cachedCommands.push(__spreadArray([capturedContext], __read(args), false));
            cache[method] = cachedCommands;
            return;
        }
        return safeCall(newClient, methodPath, [].slice.call(args, 1));
    };
    hookObjectProperty(client, 'provide', function (origin) {
        return function (name, value) {
            newClient[name] = value;
            origin.call(client, name, value);
        };
    })();
    for (var nextKey in client) {
        // Avoid bugs when hasOwnProperty is shadowed
        if (Object.prototype.hasOwnProperty.call(client, nextKey)) {
            newClient[nextKey] = client[nextKey];
        }
    }
    client.on('provide', function (name) {
        if (cache[name]) {
            cache[name].forEach(function (cachedCommands) {
                var _a = __read(cachedCommands), capturedContext = _a[0], args = _a.slice(1);
                applyArgsWithContext === null || applyArgsWithContext === void 0 ? void 0 : applyArgsWithContext(client, capturedContext, args);
            });
            cache[name] = null;
        }
    });
    return newClient;
};

function IntegrationPlugin(client) {
    client.on('init', function () {
        var nameList = [];
        var config = client.config();
        if (!config || !config.integrations) {
            return;
        }
        config.integrations.forEach(function (integration) {
            if (!arrayIncludes(nameList, integration.name)) {
                nameList.push(integration.name);
                integration.setup(client);
                integration.tearDown && client.on('beforeDestroy', integration.tearDown);
            }
        });
    });
}

function getDefaultBrowser() {
    if (typeof window === 'object' && isObject(window))
        return window;
}

// 获取全局注册表
var getGlobalRegistry = function (global) {
    if (!global)
        return;
    if (!global.__SLARDAR_REGISTRY__) {
        global.__SLARDAR_REGISTRY__ = {
            Slardar: {
                plugins: [],
                errors: [],
                subject: {},
            },
        };
    }
    return global.__SLARDAR_REGISTRY__.Slardar;
};
var reportSelfError = function () {
    var errorInfo = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        errorInfo[_i] = arguments[_i];
    }
    var registry = getGlobalRegistry(getDefaultBrowser());
    if (!registry)
        return;
    if (!registry.errors) {
        registry.errors = [];
    }
    registry.errors.push(errorInfo);
};

// eslint-disable-next-line @typescript-eslint/no-invalid-void-type
var applyMonitor = function (monitorCtor, props, cb, deps) {
    if (props === void 0) { props = {}; }
    if (deps === void 0) { deps = []; }
    try {
        var monitor = monitorCtor.apply(void 0, __spreadArray([], __read(deps), false));
        return (monitor && monitor(props, cb)) || [];
    }
    catch (e) {
        reportSelfError(e);
        return [];
    }
};

var now = function () { return Date.now(); };

var ERROR_FIELDS$1 = ['name', 'message', 'stack', 'filename', 'lineno', 'colno'];
var normalize$1 = function (ex) {
    var error;
    if (!isError(ex)) {
        if (isPlainObject(ex) || isEvent(ex) || isString(ex)) {
            error = {
                message: safeStringify(ex),
            };
        }
    }
    else {
        error = pick(ex, ERROR_FIELDS$1);
    }
    return error;
};
var normalizeError = function (event) {
    return normalize$1(event.error);
};
var normalizeException = function (event) {
    var _a;
    // dig the object of the rejection out of known event types
    try {
        var error = void 0;
        // PromiseRejectionEvents store the object of the rejection under 'reason'
        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
        if ('reason' in event) {
            error = event.reason;
        }
        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents
        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into
        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec
        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and
        // https://github.com/getsentry/sentry-javascript/issues/2380
        else if ('detail' in event && 'reason' in event.detail) {
            error = event.detail.reason;
        }
        if (error) {
            var rejectionError = normalize$1(error);
            // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
            return __assign(__assign({}, rejectionError), { name: (_a = (rejectionError && rejectionError.name)) !== null && _a !== void 0 ? _a : 'UnhandledRejection' });
        }
    }
    catch (_oO) {
        // no-empty
    }
};
var normalizeUnknownError = function (exception) {
    if (isErrorEvent(exception)) {
        return normalizeError(exception);
    }
    else if (isPromiseRejectionEvent(exception)) {
        return normalizeException(exception);
    }
    else {
        return normalize$1(exception);
    }
};

var CUSTOM_EV_TYPE = 'custom';
var CUSTOM_EVENT_TYPE = 'event';
var CUSTOM_LOG_TYPE = 'log';
var normalizeCustomEventData = function (raw) {
    if (!raw || !isObject(raw)) {
        return;
    }
    // name is required
    if (!raw['name'] || !isString(raw['name'])) {
        return;
    }
    var res = {
        name: raw['name'],
        type: CUSTOM_EVENT_TYPE,
    };
    if ('metrics' in raw && isObject(raw['metrics'])) {
        var rMetrics = raw['metrics'];
        var metrics = {};
        for (var k in rMetrics) {
            if (isNumber(rMetrics[k])) {
                metrics[k] = rMetrics[k];
            }
        }
        res.metrics = metrics;
    }
    if ('categories' in raw && isObject(raw['categories'])) {
        var rCategories = raw['categories'];
        var categories = {};
        for (var k in rCategories) {
            categories[k] = safeStringify(rCategories[k]);
        }
        res.categories = categories;
    }
    return res;
};
var normalizeCustomLogData = function (raw) {
    if (!raw || !isObject(raw)) {
        return;
    }
    // content is required
    if (!raw['content'] || !isString(raw['content'])) {
        return;
    }
    var rContent = raw['content'];
    var res = {
        content: safeStringify(rContent),
        type: CUSTOM_LOG_TYPE,
        level: 'info',
    };
    if ('level' in raw) {
        res.level = raw['level'];
    }
    if ('extra' in raw && isObject(raw['extra'])) {
        var rExtra = raw['extra'];
        var metrics = {};
        var categories = {};
        for (var k in rExtra) {
            if (isNumber(rExtra[k])) {
                metrics[k] = rExtra[k];
            }
            else {
                categories[k] = safeStringify(rExtra[k]);
            }
        }
        res.metrics = metrics;
        res.categories = categories;
    }
    return res;
};
var CustomPlugin = function (client) {
    var sendEvent = function (data) {
        var normalized = normalizeCustomEventData(data);
        if (normalized) {
            client.report({
                ev_type: CUSTOM_EV_TYPE,
                payload: normalized,
                extra: {
                    timestamp: now(),
                },
            });
        }
    };
    var sendLog = function (data) {
        var normalized = normalizeCustomLogData(data);
        if (normalized) {
            client.report({
                ev_type: CUSTOM_EV_TYPE,
                payload: normalized,
                extra: {
                    timestamp: now(),
                },
            });
        }
    };
    client.provide('sendEvent', sendEvent);
    client.provide('sendLog', sendLog);
};

/* eslint-disable @typescript-eslint/prefer-for-of */
var withSampleRate = function (ev, sampleRate) {
    var common = ev.common || {};
    common.sample_rate = sampleRate;
    ev.common = common;
    return ev;
};
var hitFnWithRandom = function (preCalc, sampleRate, isHitBySampleRate, random, isHitByRandom) {
    return preCalc
        ? (function (h) { return function () {
            return h;
        }; })(isHitByRandom(random, sampleRate))
        : function () { return isHitBySampleRate(sampleRate); };
};
var parseValues = function (values, type) {
    return values.map(function (v) {
        switch (type) {
            case 'number':
                return Number(v);
            case 'boolean':
                return v === '1';
            case 'string': // default to string
            default:
                return String(v);
        }
    });
};
var checkVal = function (val, values, op) {
    switch (op) {
        case 'eq':
            return arrayIncludes(values, val);
        case 'neq':
            return !arrayIncludes(values, val);
        case 'gt':
            return val > values[0];
        case 'gte':
            return val >= values[0];
        case 'lt':
            return val < values[0];
        case 'lte':
            return val <= values[0];
        case 'regex':
            return Boolean(val.match(new RegExp(values.join('|'))));
        case 'not_regex':
            return !val.match(new RegExp(values.join('|')));
        default: {
            // unknown op
            return false;
        }
    }
};
var checkFilter = function (ev, field, op, values) {
    var val = safeVisit(ev, field, function (t, p) {
        return t[p];
    });
    if (val === undefined) {
        return false;
    }
    var field_type = isBoolean(val) ? 'bool' : isNumber(val) ? 'number' : 'string';
    return checkVal(val, parseValues(values, field_type), op);
};
var matchFilter = function (ev, filter) {
    try {
        return filter.type === 'rule'
            ? checkFilter(ev, filter.field, filter.op, filter.values)
            : filter.type === 'and'
                ? filter.children.every(function (f) { return matchFilter(ev, f); })
                : filter.children.some(function (f) { return matchFilter(ev, f); });
    }
    catch (e) {
        reportSelfError(e);
        return false;
    }
};
var getHitMap = function (rules, preCalcHit, baseRate, isHitBySampleRate, random, isHitByRandom) {
    var hitMap = {};
    Object.keys(rules).forEach(function (name) {
        var _a = rules[name], enable = _a.enable, sample_rate = _a.sample_rate, conditional_sample_rules = _a.conditional_sample_rules;
        if (enable) {
            hitMap[name] = {
                enable: enable,
                sample_rate: sample_rate,
                effectiveSampleRate: sample_rate * baseRate,
                hit: hitFnWithRandom(preCalcHit, sample_rate, isHitBySampleRate, random, isHitByRandom),
            };
            if (conditional_sample_rules) {
                hitMap[name].conditional_hit_rules = conditional_sample_rules.map(function (_a) {
                    var s = _a.sample_rate, filter = _a.filter;
                    return ({
                        sample_rate: s,
                        hit: hitFnWithRandom(preCalcHit, s, isHitBySampleRate, random, isHitByRandom),
                        effectiveSampleRate: s * baseRate,
                        filter: filter,
                    });
                });
            }
        }
        else {
            hitMap[name] = {
                enable: enable,
                hit: function () {
                    /* istanbul ignore next */
                    return false;
                },
                sample_rate: 0,
                effectiveSampleRate: 0,
            };
        }
    });
    return hitMap;
};
var getSampler = function (userId, config, isHitBySampleRate, isHitByRandom) {
    if (!config)
        return id;
    // r的设计是为了允许外部传入随机数，用于彻底实现按用户采样
    var baseRate = config.sample_rate, include_users = config.include_users, sample_granularity = config.sample_granularity, rules = config.rules, _a = config.r, random = _a === void 0 ? Math.random() : _a;
    // 用户名单采样
    var userHit = arrayIncludes(include_users, userId);
    if (userHit) {
        return function (ev) { return withSampleRate(ev, 1); };
    }
    // should pre calculate hit
    var preCalcHit = sample_granularity === 'session';
    var baseHit = hitFnWithRandom(preCalcHit, baseRate, isHitBySampleRate, random, isHitByRandom);
    var hitMap = getHitMap(rules, preCalcHit, baseRate, isHitBySampleRate, random, isHitByRandom);
    return function (ev) {
        var _a;
        // 总采样必须命中才有后续
        if (!baseHit()) {
            return false;
        }
        // 未配置的事件类型
        if (!(ev.ev_type in hitMap)) {
            return withSampleRate(ev, baseRate);
        }
        // 忽略未开启的事件类型
        if (!hitMap[ev.ev_type].enable) {
            return false;
        }
        // 跳过采样配置
        if ((_a = ev.common) === null || _a === void 0 ? void 0 : _a.sample_rate) {
            return ev;
        }
        var hitConfig = hitMap[ev.ev_type];
        var conditions = hitConfig.conditional_hit_rules;
        if (conditions) {
            // 先判断条件采样
            for (var i = 0; i < conditions.length; i++) {
                if (matchFilter(ev, conditions[i].filter)) {
                    if (conditions[i].hit()) {
                        return withSampleRate(ev, conditions[i].effectiveSampleRate);
                    }
                    // 条件匹配后不再搜索
                    return false;
                }
            }
        }
        // 事件类型采样
        if (!hitConfig.hit()) {
            return false;
        }
        // 事件类型默认采样已经命中
        return withSampleRate(ev, hitConfig.effectiveSampleRate);
    };
};
var SamplePlugin = function (client) {
    client.on('start', function () {
        var _a = client.config(), userId = _a.userId, sample = _a.sample;
        if (sample && sample.sample_rate === 0) {
            client.destroy();
        }
        var sampler = getSampler(userId, sample, isHitBySampleRate, isHitByRandom);
        client.on('build', sampler);
    });
};

var electronBuilder = {
    build: function (e) {
        var _a, _b;
        return {
            ev_type: e.ev_type,
            payload: e.payload,
            common: __assign(__assign({}, ((_a = e.extra) !== null && _a !== void 0 ? _a : {})), ((_b = e.overrides) !== null && _b !== void 0 ? _b : {})),
        };
    },
};

var DEFAULT_SENDER_BATCH_SIZE = 20;
var REPORT_DOMAIN = "mon-va.byteoversea.com";
var BATCH_REPORT_PATH = "/monitor_browser/collect/batch/";
var SETTINGS_PATH = '/monitor_web/settings/browser-settings';
var SETTINGS_DOMAIN = REPORT_DOMAIN;
var CRASH_DOMAIN = "mon-va.byteoversea.com";
var CRASH_PATH = "/log/sentry/v2/api/slardar/crash/";
var DEFAULT_SAMPLE_GRANULARITY = 'session';
var SDK_VERSION = "3.2.25" ;
var SDK_NAME = 'SDK_SLARDAR_ELECTRON';
var DEFAULT_SAMPLE_CONFIG = {
    sample_rate: 1,
    include_users: [],
    sample_granularity: DEFAULT_SAMPLE_GRANULARITY,
    rules: {},
};
var STORAGE_PREFIX = 'SLARDAR';

var getReportUrl = function (domain, path) {
    if (domain === void 0) { domain = REPORT_DOMAIN; }
    if (path === void 0) { path = BATCH_REPORT_PATH; }
    return "" + (domain && domain.indexOf('//') >= 0 ? '' : 'https://') + domain + path;
};
var getCrashReportUrl = function (domain, path) {
    if (domain === void 0) { domain = CRASH_DOMAIN; }
    if (path === void 0) { path = CRASH_PATH; }
    return "" + (domain && domain.indexOf('//') >= 0 ? '' : 'http://') + domain + path;
};

function getPluginConfig(client, pluginName, defaultConfig) {
    var _a;
    var c = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[pluginName];
    if (isObject(c)) {
        return __assign(__assign({}, defaultConfig), c);
    }
    else {
        return c ? defaultConfig : false;
    }
}

var dedupe = function () {
    var __previousError;
    return function (currentError) {
        if (shouldDropEvent(currentError, __previousError)) {
            __previousError = currentError;
            return undefined;
        }
        __previousError = currentError;
        return currentError;
    };
};
var shouldDropEvent = function (currentError, previousError) {
    if (!currentError || !previousError) {
        return false;
    }
    if (isSameErrorString(currentError.message, previousError.message) ||
        isSameErrorString(currentError.stack, previousError.stack)) {
        return true;
    }
    return false;
};
var isSameErrorString = function (current, previous) {
    return current && previous && current === previous;
};
var ERROR_FIELDS = ['name', 'message', 'stack', 'filename', 'lineno', 'colno'];
var normalize = function (ex) {
    var error;
    if (!isError(ex)) {
        if (isPlainObject(ex) || isEvent(ex) || isString(ex)) {
            error = {
                message: safeStringify(ex),
            };
        }
    }
    else {
        error = pick(ex, ERROR_FIELDS);
    }
    return error;
};

var JS_ERR_PLUGIN_NAME = 'jsError';
var JS_ERROR_EV_TYPE = 'js_error';
var defaultConfig$2 = {
    ignoreErrors: [],
    uncaughtException: true,
    unhandledRejection: true,
    dedupe: false,
};
function JsErrorMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, JS_ERR_PLUGIN_NAME, defaultConfig$2);
        if (!config) {
            return;
        }
        var _a = __read(applyMonitor(JsErrorMonitor, config, function (ev) {
            client.report(ev);
        }, [process]), 2), reportJsError = _a[0], tearDown = _a[1];
        client.on('beforeDestroy', tearDown);
        client.provide('captureException', reportJsError);
    });
}
var JsErrorMonitor = function (_process) {
    if (_process === void 0) { _process = null; }
    if (!_process) {
        return;
    }
    return function (props, cb) {
        var ignoreErrors = props.ignoreErrors, uncaughtException = props.uncaughtException, unhandledRejection = props.unhandledRejection, dedupeFlag = props.dedupe;
        var ignoreRegExp = getRegexp(ignoreErrors);
        var restoreFns = [];
        var dedupeFn = dedupe();
        var report = function (error, extra) {
            var err = dedupeFlag ? dedupeFn(error) : error;
            if (cb && err) {
                if (ignoreRegExp === null || ignoreRegExp === void 0 ? void 0 : ignoreRegExp.test(err.message)) {
                    return;
                }
                cb({
                    ev_type: JS_ERROR_EV_TYPE,
                    payload: {
                        error: err,
                        breadcrumbs: [],
                        extra: extra,
                    },
                });
            }
        };
        if (uncaughtException) {
            var handleError_1 = function (ev) {
                // try{...}catch{...} itself to make sure app doesn't pop up when it exits
                try {
                    report(normalize(ev));
                }
                catch (error) {
                    // ignore
                }
            };
            _process.on('uncaughtException', handleError_1);
            restoreFns.push(function () { return _process.off('uncaughtException', handleError_1); });
        }
        if (unhandledRejection) {
            var handleError_2 = function (ev) { return report(normalize(ev)); };
            _process.on('unhandledRejection', handleError_2);
            restoreFns.push(function () { return _process.off('unhandledRejection', handleError_2); });
        }
        var tearDown = function () {
            restoreFns.forEach(function (fn) { return fn(); });
        };
        return [function (err, extra) { return report(normalizeUnknownError(err), extra); }, tearDown];
    };
};

function createQueue(capacity) {
    var _queue = [];
    var _capacity = capacity;
    function enqueue(ele) {
        _queue.push(ele);
        _shrink();
    }
    function dequeue() {
        return _queue.shift();
    }
    function clear() {
        _queue = [];
    }
    function getSize() {
        return _queue.length;
    }
    function setCapacity(capacity) {
        _capacity = capacity;
        _shrink();
    }
    function getCapacity() {
        return _capacity;
    }
    function _shrink() {
        while (getSize() > _capacity) {
            dequeue();
        }
    }
    return { enqueue: enqueue, dequeue: dequeue, clear: clear, getSize: getSize, setCapacity: setCapacity, getCapacity: getCapacity };
}

var DEFAULT_CAPACITY = 10;
/**
 *
 *[pause state]-<startAction>->[running state]-<stopAction>->[stop state]
 *       | 个------<pauseAction>--------| 个-----<startAction>----| 个
 *       |                                                          |
 *       -----------------------------<stopAction>------------------
 */
function createSampleController(initConfigList) {
    var _configs = initConfigList.reduce(function (res, cur) {
        if (res[cur.name]) {
            throw Error("name " + cur.name + " is exist");
        }
        res[cur.name] = __assign(__assign({}, cur), { _state: 'stop' });
        return res;
    }, {});
    function _valid(name) {
        if (!_configs[name]) {
            throw Error("Sample " + name + " does not exist");
        }
    }
    function _report(name, data) {
        var _a = _configs[name], reportCb = _a.reportCb, sampleRate = _a.sampleRate;
        if (Math.random() <= sampleRate) {
            reportCb(data);
        }
    }
    function _invokeCollectCb(name) {
        return __awaiter(this, void 0, void 0, function () {
            function handleData(data) {
                if (_state === 'pause') {
                    _queue === null || _queue === void 0 ? void 0 : _queue.enqueue(data);
                }
                else {
                    _report(name, data);
                }
            }
            var _a, collectCb, async, _state, _queue, res, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = _configs[name], collectCb = _a.collectCb, async = _a.async, _state = _a._state, _queue = _a._queue;
                        res = collectCb();
                        if (!(res instanceof Promise)) return [3 /*break*/, 4];
                        if (!(async === null || async === void 0 ? void 0 : async.isWaitTillReturn)) return [3 /*break*/, 2];
                        return [4 /*yield*/, res];
                    case 1:
                        data = _b.sent();
                        handleData(data);
                        return [3 /*break*/, 3];
                    case 2:
                        void res.then(function (data) { return handleData(data); });
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        handleData(res);
                        _b.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function _mockInterval(name, isImmediately) {
        return __awaiter(this, void 0, void 0, function () {
            function _timeoutCb() {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, _invokeCollectCb(name)];
                            case 1:
                                _a.sent();
                                void _mockInterval(name, false);
                                return [2 /*return*/];
                        }
                    });
                });
            }
            var collectInterval;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        collectInterval = _configs[name].collectInterval;
                        if (!isImmediately) return [3 /*break*/, 2];
                        return [4 /*yield*/, _invokeCollectCb(name)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _configs[name]._tid = setTimeout(function () {
                            void _timeoutCb();
                        }, collectInterval);
                        return [2 /*return*/];
                }
            });
        });
    }
    function _transSucCb(name, lastState, nextState) {
        var _a, _b;
        _configs[name]._state = nextState;
        (_b = (_a = _configs[name]).transSucCb) === null || _b === void 0 ? void 0 : _b.call(_a, lastState, nextState);
    }
    function stopAction(name, options) {
        var _a;
        if (options === void 0) { options = {
            isReportAll: true,
        }; }
        _valid(name);
        var _b = _configs[name], _tid = _b._tid, _state = _b._state, _queue = _b._queue;
        var nextState = 'stop';
        var isTransSuc = false;
        if (_state === 'running') {
            isTransSuc = true;
        }
        else if (_state === 'pause') {
            if (options.isReportAll) {
                while (_queue === null || _queue === void 0 ? void 0 : _queue.getSize()) {
                    _report(name, _queue.dequeue());
                }
            }
            (_a = _configs[name]._queue) === null || _a === void 0 ? void 0 : _a.clear();
            isTransSuc = true;
        }
        if (isTransSuc) {
            clearTimeout(_tid);
            _transSucCb(name, _state, nextState);
        }
        return isTransSuc;
    }
    function startAction(name, options) {
        if (options === void 0) { options = { isImmediately: false }; }
        _valid(name);
        var _a = _configs[name], _state = _a._state, _queue = _a._queue;
        var nextState = 'running';
        var isTransSuc = false;
        if (_state === 'stop') {
            void _mockInterval(name, options.isImmediately);
            isTransSuc = true;
        }
        else if (_state === 'pause') {
            while (_queue === null || _queue === void 0 ? void 0 : _queue.getSize()) {
                _report(name, _queue.dequeue());
            }
            isTransSuc = true;
        }
        if (isTransSuc) {
            _transSucCb(name, _state, nextState);
        }
        return isTransSuc;
    }
    function pauseAction(name, options) {
        if (options === void 0) { options = { capacity: DEFAULT_CAPACITY }; }
        _valid(name);
        var _state = _configs[name]._state;
        var nextState = 'pause';
        var isTransSuc = false;
        if (_state === 'running') {
            isTransSuc = true;
            _configs[name]._queue = createQueue(options.capacity);
        }
        if (isTransSuc) {
            _transSucCb(name, _state, nextState);
        }
        return isTransSuc;
    }
    function update(name, updateConfig, options) {
        if (options === void 0) { options = {
            isReStartImmediately: false,
        }; }
        _valid(name);
        _configs[name] = __assign(__assign({}, _configs[name]), updateConfig);
        if (options.isReStartImmediately) {
            stopAction(name, options.stopOptions);
            startAction(name, options.startOptions);
        }
    }
    function getState(name) {
        return _configs[name]._state;
    }
    function getQueueSize(name) {
        var _a, _b;
        return (_b = (_a = _configs[name]._queue) === null || _a === void 0 ? void 0 : _a.getSize()) !== null && _b !== void 0 ? _b : 0;
    }
    return {
        startAction: startAction,
        stopAction: stopAction,
        pauseAction: pauseAction,
        update: update,
        getState: getState,
        getQueueSize: getQueueSize,
    };
}

/**
 * report cpu and memory as a custom event
 *
 */
var PC_PERF_PLUGIN_NAME = 'pcPerf';
var DEFAULT_COLLECT_INTERVAL = 60 * 1000;
var DEFAULT_SAMPLE_RATE = 1;
var defaultConfig$1 = {
    cpu: {
        collectInterval: DEFAULT_COLLECT_INTERVAL,
        sampleRate: DEFAULT_SAMPLE_RATE,
        dataGetter: function () { return ({}); },
    },
    memory: {
        collectInterval: DEFAULT_COLLECT_INTERVAL,
        sampleRate: DEFAULT_SAMPLE_RATE,
        dataGetter: function () { return ({}); },
    },
};
function PcPerfMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, PC_PERF_PLUGIN_NAME, defaultConfig$1);
        if (!config) {
            return;
        }
        var _a = __read(applyMonitor(PcPerfMonitor, config, function (ev) {
            client.report(ev);
        }, []), 2), action = _a[0], tearDown = _a[1];
        client.on('beforeDestroy', tearDown);
        client.provide('sampleController', action);
    });
}
var PcPerfMonitor = function () {
    return function (props, cb) {
        var _a, _b, _c, _d;
        var cpu = props.cpu, memory = props.memory;
        var report = function (name, metrics, categories) {
            if (cb) {
                cb({
                    ev_type: 'custom',
                    payload: {
                        name: name,
                        metrics: metrics,
                        categories: categories,
                        type: 'event',
                    },
                });
            }
        };
        var initConfigList = [];
        if (cpu) {
            initConfigList.push({
                name: 'cpu',
                collectInterval: (_a = cpu.collectInterval) !== null && _a !== void 0 ? _a : DEFAULT_COLLECT_INTERVAL,
                sampleRate: (_b = cpu.sampleRate) !== null && _b !== void 0 ? _b : DEFAULT_SAMPLE_RATE,
                transSucCb: cpu.transSucCb,
                async: cpu.async,
                collectCb: cpu.dataGetter,
                reportCb: function (collectData) {
                    return report('cpu', __assign(__assign({}, collectData), cpu.extraMetrics), cpu.categories);
                },
            });
        }
        if (memory) {
            initConfigList.push({
                name: 'memory',
                collectInterval: (_c = memory.collectInterval) !== null && _c !== void 0 ? _c : DEFAULT_COLLECT_INTERVAL,
                sampleRate: (_d = memory.sampleRate) !== null && _d !== void 0 ? _d : DEFAULT_SAMPLE_RATE,
                transSucCb: memory.transSucCb,
                async: memory.async,
                collectCb: memory.dataGetter,
                reportCb: function (collectData) {
                    return report('memory', __assign(__assign({}, collectData), memory.extraMetrics), memory.categories);
                },
            });
        }
        var action = createSampleController(initConfigList);
        // start all
        initConfigList.forEach(function (_a) {
            var name = _a.name;
            return action.startAction(name);
        });
        var tearDown = function () {
            action.stopAction('cpu', { isReportAll: true });
            action.stopAction('memory', { isReportAll: true });
        };
        return [action, tearDown];
    };
};

var addConfigToReportEvent = function (ev, config) {
    var extra = {};
    extra.bid = config.bid;
    extra.pid = config.pid;
    extra.view_id = config.viewId;
    extra.user_id = config.userId;
    extra.device_id = config.deviceId;
    extra.session_id = config.sessionId;
    extra.release = config.release;
    extra.env = config.env;
    return __assign(__assign({}, ev), { extra: __assign(__assign({}, extra), (ev.extra || {})) });
};
var InjectConfigPlugin = function (client) {
    client.on('beforeBuild', function (ev) {
        return addConfigToReportEvent(ev, client.config());
    });
};

var addEnvToSendEvent = function (ev) {
    var _a;
    var extra = {
        timestamp: Date.now(),
        sdk_version: SDK_VERSION,
        sdk_name: SDK_NAME,
    };
    return __assign(__assign({}, ev), { extra: __assign(__assign({}, extra), ((_a = ev.extra) !== null && _a !== void 0 ? _a : {})) });
};
var InjectEnvPlugin = function (client) {
    client.on('report', function (ev) {
        return addEnvToSendEvent(ev);
    });
};

var CRASH_PLUGIN_NAME = 'crash';
var CRASH_EV_TYPE = 'crash';
var defaultConfig = {
    crashReporter: null,
};
function CrashMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, CRASH_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var c = client.config();
        start(c, client.context);
        // 订阅 context 的更新
        var restoreFns = createContextListener(client.context, function () {
            addExtraParameters(config.crashReporter, getExtra(client.config(), client.context).extra);
        }).restoreFns;
        var needUpdateFields = false;
        // 当 config 将要更新时
        var extraFields = ['bid', 'deviceId', 'sessionId'];
        client.on('beforeConfig', function (newConfig) {
            var e_1, _a;
            try {
                for (var extraFields_1 = __values(extraFields), extraFields_1_1 = extraFields_1.next(); !extraFields_1_1.done; extraFields_1_1 = extraFields_1.next()) {
                    var field = extraFields_1_1.value;
                    if (!newConfig[field]) {
                        continue;
                    }
                    if (client.config()[field] !== newConfig[field]) {
                        needUpdateFields = true;
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (extraFields_1_1 && !extraFields_1_1.done && (_a = extraFields_1.return)) _a.call(extraFields_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        // 当更新配置时
        client.on('config', function () {
            if (needUpdateFields) {
                addExtraParameters(config.crashReporter, getExtra(client.config(), client.context).extra);
            }
            needUpdateFields = false;
        });
        function start(c, context) {
            var submitURL = getCrashReportUrl(c.crashDomain, c.crashPath);
            if (!config) {
                return;
            }
            if (config.crashReporter) {
                config.crashReporter.start(__assign({ compress: false, companyName: 'CrashReporterPlugin', productName: 'Slardar_Crash_Report', submitURL: submitURL }, getExtra(c, context)));
            }
        }
        function getExtra(c, context) {
            return {
                extra: {
                    bid: c.bid,
                    ev_type: 'pc_crash',
                    slardar_web_id: typeof c.deviceId === 'string' ? c.deviceId : '',
                    slardar_session_id: c.sessionId,
                    context: safeStringify(context === null || context === void 0 ? void 0 : context.toString()),
                },
            };
        }
        function addExtraParameters(crashReporter, extras) {
            if (crashReporter) {
                Object.entries(extras).forEach(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    crashReporter.addExtraParameter(k, v);
                });
            }
        }
        var tearDown = function () {
            restoreFns.forEach(function (fn) { return fn(); });
        };
        client.on('beforeDestroy', tearDown);
    });
}
//TODO: 目前没有通知 context 更新的能力，这里先使用 hook 的方式解决
/** 创建一个通知 context 更新的 listener */
function createContextListener(context, onUpdate) {
    var hookMethods = ['set', 'merge', 'delete', 'clear'];
    var restoreFns = hookMethods.map(function (method) {
        return hookObjectProperty(context, method, function (origin) {
            return function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var res = origin.apply(context, params);
                onUpdate();
                return res;
            };
        })();
    });
    return { restoreFns: restoreFns };
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var writeFileAtomic = {exports: {}};

var constants = require$$0__default['default'];

var origCwd = process.cwd;
var cwd = null;

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;

process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process);
  return cwd
};
try {
  process.cwd();
} catch (er) {}

// This check is needed until node.js 12 is required
if (typeof process.chdir === 'function') {
  var chdir = process.chdir;
  process.chdir = function (d) {
    cwd = null;
    chdir.call(process, d);
  };
  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
}

var polyfills$1 = patch$1;

function patch$1 (fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs);
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs);
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown);
  fs.fchown = chownFix(fs.fchown);
  fs.lchown = chownFix(fs.lchown);

  fs.chmod = chmodFix(fs.chmod);
  fs.fchmod = chmodFix(fs.fchmod);
  fs.lchmod = chmodFix(fs.lchmod);

  fs.chownSync = chownFixSync(fs.chownSync);
  fs.fchownSync = chownFixSync(fs.fchownSync);
  fs.lchownSync = chownFixSync(fs.lchownSync);

  fs.chmodSync = chmodFixSync(fs.chmodSync);
  fs.fchmodSync = chmodFixSync(fs.fchmodSync);
  fs.lchmodSync = chmodFixSync(fs.lchmodSync);

  fs.stat = statFix(fs.stat);
  fs.fstat = statFix(fs.fstat);
  fs.lstat = statFix(fs.lstat);

  fs.statSync = statFixSync(fs.statSync);
  fs.fstatSync = statFixSync(fs.fstatSync);
  fs.lstatSync = statFixSync(fs.lstatSync);

  // if lchmod/lchown do not exist, then make them no-ops
  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb);
    };
    fs.lchmodSync = function () {};
  }
  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb);
    };
    fs.lchownSync = function () {};
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = (function (fs$rename) { return function (from, to, cb) {
      var start = Date.now();
      var backoff = 0;
      fs$rename(from, to, function CB (er) {
        if (er
            && (er.code === "EACCES" || er.code === "EPERM")
            && Date.now() - start < 60000) {
          setTimeout(function() {
            fs.stat(to, function (stater, st) {
              if (stater && stater.code === "ENOENT")
                fs$rename(from, to, CB);
              else
                cb(er);
            });
          }, backoff);
          if (backoff < 100)
            backoff += 10;
          return;
        }
        if (cb) cb(er);
      });
    }})(fs.rename);
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = (function (fs$read) {
    function read (fd, buffer, offset, length, position, callback_) {
      var callback;
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0;
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++;
            return fs$read.call(fs, fd, buffer, offset, length, position, callback)
          }
          callback_.apply(this, arguments);
        };
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
    }

    // This ensures `util.promisify` works as it does for native `fs.read`.
    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
    return read
  })(fs.read);

  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
    var eagCounter = 0;
    while (true) {
      try {
        return fs$readSync.call(fs, fd, buffer, offset, length, position)
      } catch (er) {
        if (er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++;
          continue
        }
        throw er
      }
    }
  }})(fs.readSync);

  function patchLchmod (fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open( path
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err);
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function(err2) {
            if (callback) callback(err || err2);
          });
        });
      });
    };

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true;
      var ret;
      try {
        ret = fs.fchmodSync(fd, mode);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd);
          } catch (er) {}
        } else {
          fs.closeSync(fd);
        }
      }
      return ret
    };
  }

  function patchLutimes (fs) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er);
            return
          }
          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2);
            });
          });
        });
      };

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK);
        var ret;
        var threw = true;
        try {
          ret = fs.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd);
            } catch (er) {}
          } else {
            fs.closeSync(fd);
          }
        }
        return ret
      };

    } else {
      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb); };
      fs.lutimesSync = function () {};
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null;
        if (cb) cb.apply(this, arguments);
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = null;
      }
      function callback (er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000;
          if (stats.gid < 0) stats.gid += 0x100000000;
        }
        if (cb) cb.apply(this, arguments);
      }
      return options ? orig.call(fs, target, options, callback)
        : orig.call(fs, target, callback)
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options) {
      var stats = options ? orig.call(fs, target, options)
        : orig.call(fs, target);
      if (stats.uid < 0) stats.uid += 0x100000000;
      if (stats.gid < 0) stats.gid += 0x100000000;
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0;
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }
}

var Stream = require$$0__default$1['default'].Stream;

var legacyStreams = legacy$1;

function legacy$1 (fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  }

  function ReadStream (path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function() {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    });
  }

  function WriteStream (path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}

var clone_1 = clone$1;

var getPrototypeOf = Object.getPrototypeOf || function (obj) {
  return obj.__proto__
};

function clone$1 (obj) {
  if (obj === null || typeof obj !== 'object')
    return obj

  if (obj instanceof Object)
    var copy = { __proto__: getPrototypeOf(obj) };
  else
    var copy = Object.create(null);

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
  });

  return copy
}

var fs$1 = require$$0__default$2['default'];
var polyfills = polyfills$1;
var legacy = legacyStreams;
var clone = clone_1;

var util = require$$4__default['default'];

/* istanbul ignore next - node 0.x polyfill */
var gracefulQueue;
var previousSymbol;

/* istanbul ignore else - node 0.x polyfill */
if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
  gracefulQueue = Symbol.for('graceful-fs.queue');
  // This is used in testing by future versions
  previousSymbol = Symbol.for('graceful-fs.previous');
} else {
  gracefulQueue = '___graceful-fs.queue';
  previousSymbol = '___graceful-fs.previous';
}

function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue
    }
  });
}
if (util.debuglog)
  util.debuglog('gfs4');
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
  ;

// Once time initialization
if (!fs$1[gracefulQueue]) {
  // This queue can be shared by multiple loaded instances
  var queue = commonjsGlobal[gracefulQueue] || [];
  publishQueue(fs$1, queue);

  // Patch fs.close/closeSync to shared queue version, because we need
  // to retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.
  fs$1.close = (function (fs$close) {
    function close (fd, cb) {
      return fs$close.call(fs$1, fd, function (err) {
        // This function uses the graceful-fs shared queue
        if (!err) {
          resetQueue();
        }

        if (typeof cb === 'function')
          cb.apply(this, arguments);
      })
    }

    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    });
    return close
  })(fs$1.close);

  fs$1.closeSync = (function (fs$closeSync) {
    function closeSync (fd) {
      // This function uses the graceful-fs shared queue
      fs$closeSync.apply(fs$1, arguments);
      resetQueue();
    }

    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    });
    return closeSync
  })(fs$1.closeSync);

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      require$$5__default['default'].equal(fs$1[gracefulQueue].length, 0);
    });
  }
}

if (!commonjsGlobal[gracefulQueue]) {
  publishQueue(commonjsGlobal, fs$1[gracefulQueue]);
}

var gracefulFs = patch(clone(fs$1));
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$1.__patched) {
    gracefulFs = patch(fs$1);
    fs$1.__patched = true;
}

function patch (fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs);
  fs.gracefulify = patch;

  fs.createReadStream = createReadStream;
  fs.createWriteStream = createWriteStream;
  var fs$readFile = fs.readFile;
  fs.readFile = readFile;
  function readFile (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null;

    return go$readFile(path, options, cb)

    function go$readFile (path, options, cb, startTime) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
        }
      })
    }
  }

  var fs$writeFile = fs.writeFile;
  fs.writeFile = writeFile;
  function writeFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null;

    return go$writeFile(path, data, options, cb)

    function go$writeFile (path, data, options, cb, startTime) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
        }
      })
    }
  }

  var fs$appendFile = fs.appendFile;
  if (fs$appendFile)
    fs.appendFile = appendFile;
  function appendFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null;

    return go$appendFile(path, data, options, cb)

    function go$appendFile (path, data, options, cb, startTime) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
        }
      })
    }
  }

  var fs$copyFile = fs.copyFile;
  if (fs$copyFile)
    fs.copyFile = copyFile;
  function copyFile (src, dest, flags, cb) {
    if (typeof flags === 'function') {
      cb = flags;
      flags = 0;
    }
    return go$copyFile(src, dest, flags, cb)

    function go$copyFile (src, dest, flags, cb, startTime) {
      return fs$copyFile(src, dest, flags, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
        }
      })
    }
  }

  var fs$readdir = fs.readdir;
  fs.readdir = readdir;
  function readdir (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null;

    return go$readdir(path, options, cb)

    function go$readdir (path, options, cb, startTime) {
      return fs$readdir(path, options, function (err, files) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readdir, [path, options, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (files && files.sort)
            files.sort();

          if (typeof cb === 'function')
            cb.call(this, err, files);
        }
      })
    }
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs);
    ReadStream = legStreams.ReadStream;
    WriteStream = legStreams.WriteStream;
  }

  var fs$ReadStream = fs.ReadStream;
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;
  }

  var fs$WriteStream = fs.WriteStream;
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;
  }

  Object.defineProperty(fs, 'ReadStream', {
    get: function () {
      return ReadStream
    },
    set: function (val) {
      ReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(fs, 'WriteStream', {
    get: function () {
      return WriteStream
    },
    set: function (val) {
      WriteStream = val;
    },
    enumerable: true,
    configurable: true
  });

  // legacy names
  var FileReadStream = ReadStream;
  Object.defineProperty(fs, 'FileReadStream', {
    get: function () {
      return FileReadStream
    },
    set: function (val) {
      FileReadStream = val;
    },
    enumerable: true,
    configurable: true
  });
  var FileWriteStream = WriteStream;
  Object.defineProperty(fs, 'FileWriteStream', {
    get: function () {
      return FileWriteStream
    },
    set: function (val) {
      FileWriteStream = val;
    },
    enumerable: true,
    configurable: true
  });

  function ReadStream (path, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
  }

  function ReadStream$open () {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy();

        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
        that.read();
      }
    });
  }

  function WriteStream (path, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
  }

  function WriteStream$open () {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy();
        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
      }
    });
  }

  function createReadStream (path, options) {
    return new fs.ReadStream(path, options)
  }

  function createWriteStream (path, options) {
    return new fs.WriteStream(path, options)
  }

  var fs$open = fs.open;
  fs.open = open;
  function open (path, flags, mode, cb) {
    if (typeof mode === 'function')
      cb = mode, mode = null;

    return go$open(path, flags, mode, cb)

    function go$open (path, flags, mode, cb, startTime) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()]);
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments);
        }
      })
    }
  }

  return fs
}

function enqueue (elem) {
  fs$1[gracefulQueue].push(elem);
  retry();
}

// keep track of the timeout between retry() calls
var retryTimer;

// reset the startTime and lastTime to now
// this resets the start of the 60 second overall timeout as well as the
// delay between attempts so that we'll retry these jobs sooner
function resetQueue () {
  var now = Date.now();
  for (var i = 0; i < fs$1[gracefulQueue].length; ++i) {
    // entries that are only a length of 2 are from an older version, don't
    // bother modifying those since they'll be retried anyway.
    if (fs$1[gracefulQueue][i].length > 2) {
      fs$1[gracefulQueue][i][3] = now; // startTime
      fs$1[gracefulQueue][i][4] = now; // lastTime
    }
  }
  // call retry to make sure we're actively processing the queue
  retry();
}

function retry () {
  // clear the timer and remove it to help prevent unintended concurrency
  clearTimeout(retryTimer);
  retryTimer = undefined;

  if (fs$1[gracefulQueue].length === 0)
    return

  var elem = fs$1[gracefulQueue].shift();
  var fn = elem[0];
  var args = elem[1];
  // these items may be unset if they were added by an older graceful-fs
  var err = elem[2];
  var startTime = elem[3];
  var lastTime = elem[4];

  // if we don't have a startTime we have no way of knowing if we've waited
  // long enough, so go ahead and retry this item now
  if (startTime === undefined) {
    fn.apply(null, args);
  } else if (Date.now() - startTime >= 60000) {
    // it's been more than 60 seconds total, bail now
    var cb = args.pop();
    if (typeof cb === 'function')
      cb.call(null, err);
  } else {
    // the amount of time between the last attempt and right now
    var sinceAttempt = Date.now() - lastTime;
    // the amount of time between when we first tried, and when we last tried
    // rounded up to at least 1
    var sinceStart = Math.max(lastTime - startTime, 1);
    // backoff. wait longer than the total time we've been retrying, but only
    // up to a maximum of 100ms
    var desiredDelay = Math.min(sinceStart * 1.2, 100);
    // it's been long enough since the last retry, do it again
    if (sinceAttempt >= desiredDelay) {
      fn.apply(null, args.concat([startTime]));
    } else {
      // if we can't do this job yet, push it to the end of the queue
      // and let the next iteration check again
      fs$1[gracefulQueue].push(elem);
    }
  }

  // schedule our next run if one isn't already scheduled
  if (retryTimer === undefined) {
    retryTimer = setTimeout(retry, 0);
  }
}

var slide = {};

/*
usage:

// do something to a list of things
asyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)
// do more than one thing to each item
asyncMap(list, fooFn, barFn, cb)

*/

var asyncMap_1 = asyncMap;

function asyncMap () {
  var steps = Array.prototype.slice.call(arguments)
    , list = steps.shift() || []
    , cb_ = steps.pop();
  if (typeof cb_ !== "function") throw new Error(
    "No callback provided to asyncMap")
  if (!list) return cb_(null, [])
  if (!Array.isArray(list)) list = [list];
  var n = steps.length
    , data = [] // 2d array
    , errState = null
    , l = list.length
    , a = l * n;
  if (!a) return cb_(null, [])
  function cb (er) {
    if (er && !errState) errState = er;

    var argLen = arguments.length;
    for (var i = 1; i < argLen; i ++) if (arguments[i] !== undefined) {
      data[i - 1] = (data[i - 1] || []).concat(arguments[i]);
    }
    // see if any new things have been added.
    if (list.length > l) {
      var newList = list.slice(l);
      a += (list.length - l) * n;
      l = list.length;
      process.nextTick(function () {
        newList.forEach(function (ar) {
          steps.forEach(function (fn) { fn(ar, cb); });
        });
      });
    }

    if (--a === 0) cb_.apply(null, [errState].concat(data));
  }
  // expect the supplied cb function to be called
  // "n" times for each thing in the array.
  list.forEach(function (ar) {
    steps.forEach(function (fn) { fn(ar, cb); });
  });
}

var bindActor_1 = bindActor$1;
function bindActor$1 () {
  var args = 
        Array.prototype.slice.call
        (arguments) // jswtf.
    , obj = null
    , fn;
  if (typeof args[0] === "object") {
    obj = args.shift();
    fn = args.shift();
    if (typeof fn === "string")
      fn = obj[ fn ];
  } else fn = args.shift();
  return function (cb) {
    fn.apply(obj, args.concat(cb)); }
}

var chain_1 = chain$1;
var bindActor = bindActor_1;
chain$1.first = {} ; chain$1.last = {};
function chain$1 (things, cb) {
  var res = []
  ;(function LOOP (i, len) {
    if (i >= len) return cb(null,res)
    if (Array.isArray(things[i]))
      things[i] = bindActor.apply(null,
        things[i].map(function(i){
          return (i===chain$1.first) ? res[0]
           : (i===chain$1.last)
             ? res[res.length - 1] : i }));
    if (!things[i]) return LOOP(i + 1, len)
    things[i](function (er, data) {
      if (er) return cb(er, res)
      if (data !== undefined) res = res.concat(data);
      LOOP(i + 1, len);
    });
  })(0, things.length); }

slide.asyncMap = asyncMap_1;
slide.bindActor = bindActor_1;
slide.chain = chain_1;

var imurmurhash = {exports: {}};

/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */

(function (module) {
(function(){
    var cache;

    // Call this function without `new` to use the cached object (good for
    // single-threaded environments), or with `new` to create a new object.
    //
    // @param {string} key A UTF-16 or ASCII string
    // @param {number} seed An optional positive integer
    // @return {object} A MurmurHash3 object for incremental hashing
    function MurmurHash3(key, seed) {
        var m = this instanceof MurmurHash3 ? this : cache;
        m.reset(seed);
        if (typeof key === 'string' && key.length > 0) {
            m.hash(key);
        }

        if (m !== this) {
            return m;
        }
    }
    // Incrementally add a string to this hash
    //
    // @param {string} key A UTF-16 or ASCII string
    // @return {object} this
    MurmurHash3.prototype.hash = function(key) {
        var h1, k1, i, top, len;

        len = key.length;
        this.len += len;

        k1 = this.k1;
        i = 0;
        switch (this.rem) {
            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;
            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;
            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;
            case 3:
                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;
                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;
        }

        this.rem = (len + this.rem) & 3; // & 3 is same as % 4
        len -= this.rem;
        if (len > 0) {
            h1 = this.h1;
            while (1) {
                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;
                k1 = (k1 << 15) | (k1 >>> 17);
                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;

                h1 ^= k1;
                h1 = (h1 << 13) | (h1 >>> 19);
                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;

                if (i >= len) {
                    break;
                }

                k1 = ((key.charCodeAt(i++) & 0xffff)) ^
                     ((key.charCodeAt(i++) & 0xffff) << 8) ^
                     ((key.charCodeAt(i++) & 0xffff) << 16);
                top = key.charCodeAt(i++);
                k1 ^= ((top & 0xff) << 24) ^
                      ((top & 0xff00) >> 8);
            }

            k1 = 0;
            switch (this.rem) {
                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;
                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;
                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);
            }

            this.h1 = h1;
        }

        this.k1 = k1;
        return this;
    };

    // Get the result of this hash
    //
    // @return {number} The 32-bit hash
    MurmurHash3.prototype.result = function() {
        var k1, h1;
        
        k1 = this.k1;
        h1 = this.h1;

        if (k1 > 0) {
            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;
            h1 ^= k1;
        }

        h1 ^= this.len;

        h1 ^= h1 >>> 16;
        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;
        h1 ^= h1 >>> 13;
        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;
        h1 ^= h1 >>> 16;

        return h1 >>> 0;
    };

    // Reset the hash object for reuse
    //
    // @param {number} seed An optional positive integer
    MurmurHash3.prototype.reset = function(seed) {
        this.h1 = typeof seed === 'number' ? seed : 0;
        this.rem = this.k1 = this.len = 0;
        return this;
    };

    // A cached object to use. This can be safely used if you're in a single-
    // threaded environment, otherwise you need to create new hashes to use.
    cache = new MurmurHash3();

    {
        module.exports = MurmurHash3;
    }
}());
}(imurmurhash));

writeFileAtomic.exports = writeFile;
writeFileAtomic.exports.sync = writeFileSync;
writeFileAtomic.exports._getTmpname = getTmpname; // for testing

var fs = gracefulFs;
var chain = slide.chain;
var MurmurHash3 = imurmurhash.exports;
var extend = Object.assign || require$$4__default['default']._extend;

var invocations = 0;
function getTmpname (filename) {
  return filename + '.' +
    MurmurHash3(__filename)
      .hash(String(process.pid))
      .hash(String(++invocations))
      .result()
}

function writeFile (filename, data, options, callback) {
  if (options instanceof Function) {
    callback = options;
    options = null;
  }
  if (!options) options = {};
  fs.realpath(filename, function (_, realname) {
    _writeFile(realname || filename, data, options, callback);
  });
}
function _writeFile (filename, data, options, callback) {
  var tmpfile = getTmpname(filename);

  if (options.mode && options.chown) {
    return thenWriteFile()
  } else {
    // Either mode or chown is not explicitly set
    // Default behavior is to copy it from original file
    return fs.stat(filename, function (err, stats) {
      if (err || !stats) return thenWriteFile()

      options = extend({}, options);
      if (!options.mode) {
        options.mode = stats.mode;
      }
      if (!options.chown && process.getuid) {
        options.chown = { uid: stats.uid, gid: stats.gid };
      }
      return thenWriteFile()
    })
  }

  function thenWriteFile () {
    chain([
      [writeFileAsync, tmpfile, data, options.mode, options.encoding || 'utf8'],
      options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid],
      options.mode && [fs, fs.chmod, tmpfile, options.mode],
      [fs, fs.rename, tmpfile, filename]
    ], function (err) {
      err ? fs.unlink(tmpfile, function () { callback(err); })
        : callback();
    });
  }

  // doing this instead of `fs.writeFile` in order to get the ability to
  // call `fsync`.
  function writeFileAsync (file, data, mode, encoding, cb) {
    fs.open(file, 'w', options.mode, function (err, fd) {
      if (err) return cb(err)
      if (Buffer.isBuffer(data)) {
        return fs.write(fd, data, 0, data.length, 0, syncAndClose)
      } else if (data != null) {
        return fs.write(fd, String(data), 0, String(encoding), syncAndClose)
      } else {
        return syncAndClose()
      }
      function syncAndClose (err) {
        if (err) return cb(err)
        fs.fsync(fd, function (err) {
          if (err) return cb(err)
          fs.close(fd, cb);
        });
      }
    });
  }
}

function writeFileSync (filename, data, options) {
  if (!options) options = {};
  try {
    filename = fs.realpathSync(filename);
  } catch (ex) {
    // it's ok, it'll happen on a not yet existing file
  }
  var tmpfile = getTmpname(filename);

  try {
    if (!options.mode || !options.chown) {
      // Either mode or chown is not explicitly set
      // Default behavior is to copy it from original file
      try {
        var stats = fs.statSync(filename);
        options = extend({}, options);
        if (!options.mode) {
          options.mode = stats.mode;
        }
        if (!options.chown && process.getuid) {
          options.chown = { uid: stats.uid, gid: stats.gid };
        }
      } catch (ex) {
        // ignore stat errors
      }
    }

    var fd = fs.openSync(tmpfile, 'w', options.mode);
    if (Buffer.isBuffer(data)) {
      fs.writeSync(fd, data, 0, data.length, 0);
    } else if (data != null) {
      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));
    }
    fs.fsyncSync(fd);
    fs.closeSync(fd);
    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);
    if (options.mode) fs.chmodSync(tmpfile, options.mode);
    fs.renameSync(tmpfile, filename);
  } catch (err) {
    try { fs.unlinkSync(tmpfile); } catch (e) {}
    throw err
  }
}

var LocalStorage_2;
// Generated by CoffeeScript 1.12.7
(function() {
  var KEY_FOR_EMPTY_STRING, LocalStorage, MetaKey, QUOTA_EXCEEDED_ERR, StorageEvent, _emptyDirectory, _escapeKey, _rm, createMap, events, fs, path, writeSync,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require$$0__default$3['default'];

  fs = require$$0__default$2['default'];

  events = require$$2__default['default'];

  writeSync = writeFileAtomic.exports.sync;

  KEY_FOR_EMPTY_STRING = '---.EMPTY_STRING.---';

  _emptyDirectory = function(target) {
    var i, len, p, ref, results;
    ref = fs.readdirSync(target);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      results.push(_rm(path.join(target, p)));
    }
    return results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  _escapeKey = function(key) {
    var newKey;
    if (key === '') {
      newKey = KEY_FOR_EMPTY_STRING;
    } else {
      newKey = "" + key;
    }
    return newKey;
  };

  QUOTA_EXCEEDED_ERR = (function(superClass) {
    extend(QUOTA_EXCEEDED_ERR, superClass);

    function QUOTA_EXCEEDED_ERR(message) {
      this.message = message != null ? message : 'Unknown error.';
      QUOTA_EXCEEDED_ERR.__super__.constructor.call(this);
      if (Error.captureStackTrace != null) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
    }

    QUOTA_EXCEEDED_ERR.prototype.toString = function() {
      return this.name + ": " + this.message;
    };

    return QUOTA_EXCEEDED_ERR;

  })(Error);

  StorageEvent = (function() {
    function StorageEvent(key1, oldValue1, newValue1, url, storageArea) {
      this.key = key1;
      this.oldValue = oldValue1;
      this.newValue = newValue1;
      this.url = url;
      this.storageArea = storageArea != null ? storageArea : 'localStorage';
    }

    return StorageEvent;

  })();

  MetaKey = (function() {
    function MetaKey(key1, index1) {
      this.key = key1;
      this.index = index1;
      if (!(this instanceof MetaKey)) {
        return new MetaKey(this.key, this.index);
      }
    }

    return MetaKey;

  })();

  createMap = function() {
    var Map;
    Map = function() {};
    Map.prototype = Object.create(null);
    return new Map();
  };

  LocalStorage = (function(superClass) {
    var instanceMap;

    extend(LocalStorage, superClass);

    instanceMap = {};

    function LocalStorage(_location, quota) {
      var handler;
      this._location = _location;
      this.quota = quota != null ? quota : 5 * 1024 * 1024;
      LocalStorage.__super__.constructor.call(this);
      if (!(this instanceof LocalStorage)) {
        return new LocalStorage(this._location, this.quota);
      }
      this._location = path.resolve(this._location);
      if (instanceMap[this._location] != null) {
        return instanceMap[this._location];
      }
      this.length = 0;
      this._bytesInUse = 0;
      this._keys = [];
      this._metaKeyMap = createMap();
      this._eventUrl = "pid:" + process.pid;
      this._init();
      this._QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
      if (typeof Proxy !== "undefined" && Proxy !== null) {
        handler = {
          set: (function(_this) {
            return function(receiver, key, value) {
              if (_this[key] != null) {
                return _this[key] = value;
              } else {
                return _this.setItem(key, value);
              }
            };
          })(this),
          get: (function(_this) {
            return function(receiver, key) {
              if (_this[key] != null) {
                return _this[key];
              } else {
                return _this.getItem(key);
              }
            };
          })(this)
        };
        instanceMap[this._location] = new Proxy(this, handler);
        return instanceMap[this._location];
      }
      instanceMap[this._location] = this;
      return instanceMap[this._location];
    }

    LocalStorage.prototype._init = function() {
      var _MetaKey, _decodedKey, _keys, e, i, index, k, len, stat;
      try {
        stat = fs.statSync(this._location);
        if ((stat != null) && !stat.isDirectory()) {
          throw new Error("A file exists at the location '" + this._location + "' when trying to create/open localStorage");
        }
        this._bytesInUse = 0;
        this.length = 0;
        _keys = fs.readdirSync(this._location);
        for (index = i = 0, len = _keys.length; i < len; index = ++i) {
          k = _keys[index];
          _decodedKey = decodeURIComponent(k);
          this._keys.push(_decodedKey);
          _MetaKey = new MetaKey(k, index);
          this._metaKeyMap[_decodedKey] = _MetaKey;
          stat = this._getStat(k);
          if ((stat != null ? stat.size : void 0) != null) {
            _MetaKey.size = stat.size;
            this._bytesInUse += stat.size;
          }
        }
        this.length = _keys.length;
      } catch (error) {
        e = error;
        if (e.code !== "ENOENT") {
          throw e;
        }
        try {
          fs.mkdirSync(this._location, {
            recursive: true
          });
        } catch (error) {
          e = error;
          if (e.code !== "EEXIST") {
            throw e;
          }
        }
      }
    };

    LocalStorage.prototype.setItem = function(key, value) {
      var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;
      hasListeners = this.listenerCount('storage');
      oldValue = null;
      if (hasListeners) {
        oldValue = this.getItem(key);
      }
      key = _escapeKey(key);
      encodedKey = encodeURIComponent(key).replace(/[!'()]/g, escape).replace(/\*/g, "%2A");
      filename = path.join(this._location, encodedKey);
      valueString = "" + value;
      valueStringLength = valueString.length;
      metaKey = this._metaKeyMap[key];
      existsBeforeSet = !!metaKey;
      if (existsBeforeSet) {
        oldLength = metaKey.size;
      } else {
        oldLength = 0;
      }
      if (this._bytesInUse - oldLength + valueStringLength > this.quota) {
        throw new QUOTA_EXCEEDED_ERR();
      }
      writeSync(filename, valueString, {
        encoding: 'utf8'
      });
      if (!existsBeforeSet) {
        metaKey = new MetaKey(encodedKey, (this._keys.push(key)) - 1);
        metaKey.size = valueStringLength;
        this._metaKeyMap[key] = metaKey;
        this.length += 1;
        this._bytesInUse += valueStringLength;
      }
      if (hasListeners) {
        evnt = new StorageEvent(key, oldValue, value, this._eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype.getItem = function(key) {
      var filename, metaKey;
      key = _escapeKey(key);
      metaKey = this._metaKeyMap[key];
      if (!!metaKey) {
        filename = path.join(this._location, metaKey.key);
        return fs.readFileSync(filename, 'utf8');
      } else {
        return null;
      }
    };

    LocalStorage.prototype._getStat = function(key) {
      var filename;
      key = _escapeKey(key);
      filename = path.join(this._location, encodeURIComponent(key));
      try {
        return fs.statSync(filename);
      } catch (error) {
        return null;
      }
    };

    LocalStorage.prototype.removeItem = function(key) {
      var evnt, filename, hasListeners, k, meta, metaKey, oldValue, ref;
      key = _escapeKey(key);
      metaKey = this._metaKeyMap[key];
      if (!!metaKey) {
        hasListeners = this.listenerCount('storage');
        oldValue = null;
        if (hasListeners) {
          oldValue = this.getItem(key);
        }
        delete this._metaKeyMap[key];
        this.length -= 1;
        this._bytesInUse -= metaKey.size;
        filename = path.join(this._location, metaKey.key);
        this._keys.splice(metaKey.index, 1);
        ref = this._metaKeyMap;
        for (k in ref) {
          meta = this._metaKeyMap[k];
          if (meta.index > metaKey.index) {
            meta.index -= 1;
          }
        }
        _rm(filename);
        if (hasListeners) {
          evnt = new StorageEvent(key, oldValue, null, this._eventUrl);
          return this.emit('storage', evnt);
        }
      }
    };

    LocalStorage.prototype.key = function(n) {
      var rawKey;
      rawKey = this._keys[n];
      if (rawKey === KEY_FOR_EMPTY_STRING) {
        return '';
      } else {
        return rawKey;
      }
    };

    LocalStorage.prototype.clear = function() {
      var evnt;
      _emptyDirectory(this._location);
      this._metaKeyMap = createMap();
      this._keys = [];
      this.length = 0;
      this._bytesInUse = 0;
      if (this.listenerCount('storage')) {
        evnt = new StorageEvent(null, null, null, this._eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype._getBytesInUse = function() {
      return this._bytesInUse;
    };

    LocalStorage.prototype._deleteLocation = function() {
      delete instanceMap[this._location];
      _rm(this._location);
      this._metaKeyMap = {};
      this._keys = [];
      this.length = 0;
      return this._bytesInUse = 0;
    };

    return LocalStorage;

  })(events.EventEmitter);

  ((function(superClass) {
    extend(JSONStorage, superClass);

    function JSONStorage() {
      return JSONStorage.__super__.constructor.apply(this, arguments);
    }

    JSONStorage.prototype.setItem = function(key, value) {
      var newValue;
      newValue = JSON.stringify(value);
      return JSONStorage.__super__.setItem.call(this, key, newValue);
    };

    JSONStorage.prototype.getItem = function(key) {
      return JSON.parse(JSONStorage.__super__.getItem.call(this, key));
    };

    return JSONStorage;

  }))(LocalStorage);

  LocalStorage_2 = LocalStorage;

}).call(commonjsGlobal);

var getStorageKey = function (bid) { return STORAGE_PREFIX + bid; };
var getDefaultUserIdAndDeviceId = function (bid, localDataPath) {
    var _a;
    if (bid === void 0) { bid = ''; }
    if (!localDataPath) {
        return { userId: '', deviceId: '' };
    }
    var key = getStorageKey(bid);
    return (_a = Storage.get(key, localDataPath)) !== null && _a !== void 0 ? _a : { userId: '', deviceId: '' };
};
var hasSetStorageItem = function (bid, localDataPath) {
    if (bid === void 0) { bid = ''; }
    if (!localDataPath)
        return false;
    var key = getStorageKey(bid);
    return !!Storage.get(key, localDataPath);
};
var setStorageUserIdAndDeviceId = function (config) {
    var bid = config.bid, userId = config.userId, deviceId = config.deviceId, localDataPath = config.localDataPath;
    if (!localDataPath)
        return;
    var key = getStorageKey(bid);
    Storage.set(key, {
        userId: userId,
        deviceId: deviceId,
    }, localDataPath);
};
var getStorageItem = function (name, localDataPath) {
    var localStorage = new LocalStorage_2(localDataPath);
    var value = localStorage.getItem(name);
    if (!value)
        return value;
    return JSON.parse(value);
};
var setStorageItem = function (key, value, localDataPath) {
    var localStorage = new LocalStorage_2(localDataPath);
    localStorage.setItem(key, safeStringify(value));
};
var Storage = {
    get: getStorageItem,
    set: setStorageItem,
};

var _a;
var getDefaultConfig = function (_c) {
    var _a, _b;
    var storageInfo = getDefaultUserIdAndDeviceId(_c.bid, _c.localDataPath);
    return {
        bid: '',
        pid: '',
        localDataPath: '',
        viewId: '_' + Date.now(),
        userId: (_a = storageInfo.userId) !== null && _a !== void 0 ? _a : '',
        deviceId: (_b = storageInfo.deviceId) !== null && _b !== void 0 ? _b : '',
        sessionId: getDefaultSessionId(),
        reportDomain: REPORT_DOMAIN,
        reportPath: BATCH_REPORT_PATH,
        serverDomain: SETTINGS_DOMAIN,
        serverPath: SETTINGS_PATH,
        crashDomain: CRASH_DOMAIN,
        crashPath: CRASH_PATH,
        plugins: defaultPlugins,
        release: '',
        env: 'production',
        transport: {
            get: noop,
            post: noop,
        },
        sample: DEFAULT_SAMPLE_CONFIG,
    };
};
var getDefaultSessionId = function () {
    return uuid();
};
var defaultPlugins = (_a = {},
    _a[PC_PERF_PLUGIN_NAME] = {
        cpu: {
            dataGetter: noop,
        },
        memory: {
            dataGetter: noop,
        },
    },
    _a[CRASH_PLUGIN_NAME] = {
        crashReporter: null,
    },
    _a[JS_ERR_PLUGIN_NAME] = {},
    _a);

var getSettingsUrl = function (serverDomain, serverPath) {
    if (serverDomain === void 0) { serverDomain = SETTINGS_DOMAIN; }
    if (serverPath === void 0) { serverPath = SETTINGS_PATH; }
    return "" + (serverDomain && serverDomain.indexOf('//') >= 0 ? '' : 'https://') + serverDomain + serverPath;
};

function validateInitConfig(config) {
    return isObject(config) && 'bid' in config && !!config.bid;
}
function normalizeUserConfig(config) {
    return __assign({}, config);
}
function initConfigNormalizer(config) {
    var _a;
    var plugins = (_a = config.plugins) !== null && _a !== void 0 ? _a : {};
    for (var k in plugins) {
        if (plugins[k] && !isObject(plugins[k])) {
            plugins[k] = {};
        }
    }
    return __assign(__assign({}, config), defaultPlugins);
}
function parseServerConfig(serverConfig) {
    if (!serverConfig) {
        return {};
    }
    var sample = serverConfig.sample, user_id = serverConfig.user_id, timestamp = serverConfig.timestamp;
    if (!sample) {
        return {
            userId: user_id,
        };
    }
    var sample_rate = sample.sample_rate, _a = sample.sample_granularity, sample_granularity = _a === void 0 ? DEFAULT_SAMPLE_GRANULARITY : _a, include_users = sample.include_users, _b = sample.rules, rules = _b === void 0 ? [] : _b;
    // TODO: 检查插件字段是否需要补全
    return {
        userId: user_id,
        sample: {
            include_users: include_users,
            sample_rate: sample_rate,
            sample_granularity: sample_granularity,
            rules: rules.reduce(function (prev, cur) {
                var name = cur.name, enable = cur.enable, sample_rate = cur.sample_rate, conditional_sample_rules = cur.conditional_sample_rules;
                prev[name] = {
                    enable: enable,
                    sample_rate: sample_rate,
                    conditional_sample_rules: conditional_sample_rules,
                };
                return prev;
            }, {}),
        },
        plugins: defaultPlugins,
        serverTimestamp: timestamp,
    };
}

var configHolder = {
    get: function () {
        return this.__SLARDAR__REPALCE__HOLDER__;
    },
};
var createElectronConfigManager = function (defaultConfig) {
    // the merged config
    var config = defaultConfig;
    // save it so we know when initConfig is set
    var initConfig;
    // save UserConfig so we can merge with priority
    var userConfig = {};
    // save the original server config, from sdk-server or from get_setting response
    var serverConfig = configHolder.get();
    // cache the parsed ServerConfig, used in merge
    var parsedServerConfig;
    // call when ready to start(with initConfig and serverConfig)
    var onReady = noop;
    // call when config changed
    var onChange = noop;
    return {
        getConfig: function () {
            return config;
        },
        setConfig: function (c) {
            userConfig = __assign(__assign({}, userConfig), (c || {}));
            updateConfig();
            if (!initConfig) {
                // handle init
                initConfig = c;
                if (config.useLocalConfig || !config.bid) {
                    // when useLocalConfig is true, ignore serverConfig
                    parsedServerConfig = {};
                    onReady();
                }
                else if (serverConfig) {
                    // check injected serverConfig
                    handleServerConfig();
                }
                else {
                    // get serverConfig from server
                    getServerConfig(config, function (res) {
                        serverConfig = res;
                        handleServerConfig();
                    });
                }
            }
            return config;
        },
        onChange: function (fn) {
            onChange = fn;
        },
        onReady: function (fn) {
            onReady = function () {
                setStorageUserIdAndDeviceId(config);
                fn();
            };
            if (parsedServerConfig) {
                onReady();
            }
        },
    };
    function updateConfig() {
        // merge priority: UserConfig > ServerConfig > CurrentConfig(including default config)
        var newConfig = __assign(__assign(__assign({}, defaultConfig), (parsedServerConfig || {})), userConfig);
        newConfig.plugins = mergeDeepConcatArray(defaultConfig.plugins, (parsedServerConfig === null || parsedServerConfig === void 0 ? void 0 : parsedServerConfig.plugins) || {}, userConfig.plugins || {});
        newConfig.sample = mergeSampleConfig(mergeSampleConfig(defaultConfig.sample, parsedServerConfig === null || parsedServerConfig === void 0 ? void 0 : parsedServerConfig.sample), userConfig.sample);
        config = newConfig;
        onChange();
    }
    function handleServerConfig() {
        parsedServerConfig = parseServerConfig(serverConfig);
        // comments from web
        // 兜底处理，如果目前localstorage中有值，则不需要setting下发的从cookie中拿的数据做覆盖
        // 但是仍然需要保留server 返回的userID，当localstorage中没有值时，说明第一次设置还没有生效，需要走正常的覆盖逻辑，不然UV会偏高
        if (hasSetStorageItem(config.bid, config.localDataPath)) {
            parsedServerConfig.userId = defaultConfig.userId;
        }
        updateConfig();
        onReady();
    }
};
function getServerConfig(config, cb) {
    var transport = config.transport, serverDomain = config.serverDomain, serverPath = config.serverPath, bid = config.bid;
    transport.get({
        url: getSettingsUrl(serverDomain, serverPath) + "?bid=" + bid + "&store=1",
        success: function (res) {
            cb(res.data || {});
        },
        fail: function () {
            cb({ sample: { sample_rate: 0.001 } });
        },
    });
}
function mergeSampleConfig(a, b) {
    if (!a || !b)
        return a || b;
    var res = __assign(__assign({}, a), b);
    res.include_users = __spreadArray(__spreadArray([], __read((a.include_users || [])), false), __read((b.include_users || [])), false);
    res.rules = __spreadArray(__spreadArray([], __read(Object.keys(a.rules || {})), false), __read(Object.keys(b.rules || {})), false).reduce(function (obj, key) {
        var _a, _b;
        if (!(key in obj)) {
            if (key in (a.rules || {}) && key in (b.rules || {})) {
                obj[key] = __assign(__assign({}, a.rules[key]), b.rules[key]);
                obj[key].conditional_sample_rules = __spreadArray(__spreadArray([], __read((a.rules[key].conditional_sample_rules || [])), false), __read((b.rules[key].conditional_sample_rules || [])), false);
            }
            else {
                obj[key] = ((_a = a.rules) === null || _a === void 0 ? void 0 : _a[key]) || ((_b = b.rules) === null || _b === void 0 ? void 0 : _b[key]);
            }
        }
        return obj;
    }, {});
    return res;
}

var createElectronSender = function (config) {
    return createBatchSender(config);
};

var createMinimalElectronClient = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.createSender, createSender = _c === void 0 ? function (config) {
        return createElectronSender({
            size: DEFAULT_SENDER_BATCH_SIZE,
            endpoint: getReportUrl(config.reportDomain, config.reportPath),
            transport: config.transport,
        });
    } : _c, _d = _b.builder, builder = _d === void 0 ? electronBuilder : _d, _e = _b.createDefaultConfig, createDefaultConfig = _e === void 0 ? getDefaultConfig : _e;
    var client = createClient({
        createDefaultConfig: createDefaultConfig,
        validateInitConfig: validateInitConfig,
        initConfigNormalizer: initConfigNormalizer,
        builder: builder,
        createSender: createSender,
        createConfigManager: createElectronConfigManager,
        userConfigNormalizer: normalizeUserConfig,
    });
    ContextPlugin(client);
    InjectConfigPlugin(client);
    InjectEnvPlugin(client);
    client = withCommandArray(client);
    IntegrationPlugin(client);
    return client;
};
var createElectronClient = function (config) {
    if (config === void 0) { config = {}; }
    var client = createMinimalElectronClient(config);
    CrashMonitorPlugin(client);
    PcPerfMonitorPlugin(client);
    JsErrorMonitorPlugin(client);
    CustomPlugin(client);
    SamplePlugin(client);
    return client;
};

var electronClient = createElectronClient();

exports.BATCH_REPORT_PATH = BATCH_REPORT_PATH;
exports.CRASH_DOMAIN = CRASH_DOMAIN;
exports.CRASH_EV_TYPE = CRASH_EV_TYPE;
exports.CRASH_PATH = CRASH_PATH;
exports.CRASH_PLUGIN_NAME = CRASH_PLUGIN_NAME;
exports.CrashMonitorPlugin = CrashMonitorPlugin;
exports.DEFAULT_SAMPLE_CONFIG = DEFAULT_SAMPLE_CONFIG;
exports.DEFAULT_SAMPLE_GRANULARITY = DEFAULT_SAMPLE_GRANULARITY;
exports.DEFAULT_SENDER_BATCH_SIZE = DEFAULT_SENDER_BATCH_SIZE;
exports.InjectConfigPlugin = InjectConfigPlugin;
exports.InjectEnvPlugin = InjectEnvPlugin;
exports.JS_ERROR_EV_TYPE = JS_ERROR_EV_TYPE;
exports.JS_ERR_PLUGIN_NAME = JS_ERR_PLUGIN_NAME;
exports.JsErrorMonitor = JsErrorMonitor;
exports.JsErrorMonitorPlugin = JsErrorMonitorPlugin;
exports.PC_PERF_PLUGIN_NAME = PC_PERF_PLUGIN_NAME;
exports.PcPerfMonitor = PcPerfMonitor;
exports.PcPerfMonitorPlugin = PcPerfMonitorPlugin;
exports.REPORT_DOMAIN = REPORT_DOMAIN;
exports.SDK_NAME = SDK_NAME;
exports.SDK_VERSION = SDK_VERSION;
exports.SETTINGS_DOMAIN = SETTINGS_DOMAIN;
exports.SETTINGS_PATH = SETTINGS_PATH;
exports.STORAGE_PREFIX = STORAGE_PREFIX;
exports.Storage = Storage;
exports.addConfigToReportEvent = addConfigToReportEvent;
exports.addEnvToSendEvent = addEnvToSendEvent;
exports.configHolder = configHolder;
exports.createContextListener = createContextListener;
exports.createElectronClient = createElectronClient;
exports.createElectronConfigManager = createElectronConfigManager;
exports.createMinimalElectronClient = createMinimalElectronClient;
exports['default'] = electronClient;
exports.defaultConfig = defaultConfig;
exports.defaultPlugins = defaultPlugins;
exports.electronBuilder = electronBuilder;
exports.getCrashReportUrl = getCrashReportUrl;
exports.getDefaultConfig = getDefaultConfig;
exports.getDefaultSessionId = getDefaultSessionId;
exports.getDefaultUserIdAndDeviceId = getDefaultUserIdAndDeviceId;
exports.getPluginConfig = getPluginConfig;
exports.getReportUrl = getReportUrl;
exports.getServerConfig = getServerConfig;
exports.getSettingsUrl = getSettingsUrl;
exports.getStorageKey = getStorageKey;
exports.hasSetStorageItem = hasSetStorageItem;
exports.initConfigNormalizer = initConfigNormalizer;
exports.mergeSampleConfig = mergeSampleConfig;
exports.normalizeUserConfig = normalizeUserConfig;
exports.parseServerConfig = parseServerConfig;
exports.setStorageUserIdAndDeviceId = setStorageUserIdAndDeviceId;
exports.validateInitConfig = validateInitConfig;
//# sourceMappingURL=index.js.map
