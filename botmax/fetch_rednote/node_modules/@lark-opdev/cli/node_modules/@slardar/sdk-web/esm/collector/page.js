import { __read } from "tslib";
import { applyRequestIdleCallback, invokeCallbackOnce } from '../utils';
import { getDefaultBrowser, getDefaultDocument } from '../utils/defaults';
export var HIDDEN_SUBJECT_NAME = 'hidden_0';
export var observeHidden = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onVisibilityChange = function () {
        if (document.visibilityState === 'hidden') {
            next();
        }
    };
    addEventListener('visibilitychange', onVisibilityChange, true);
    var requestIdleCallback = applyRequestIdleCallback(window);
    tearDown(function () {
        removeEventListener('visibilitychange', onVisibilityChange, true);
    }, function (subscriber) {
        if (document.visibilityState === 'hidden') {
            requestIdleCallback(function () {
                subscriber();
            });
        }
    });
};
export var hiddenSubject = [HIDDEN_SUBJECT_NAME, observeHidden];
export var LOAD_SUBJECT_NAME = 'load_0';
export var observeLoad = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onLoad = function () {
        setTimeout(function () {
            next();
        }, 0);
    };
    window.addEventListener('load', onLoad, false);
    var requestIdleCallback = applyRequestIdleCallback(window);
    tearDown(function () {
        window.removeEventListener('load', onLoad, false);
    }, function (subscriber) {
        if (document.readyState === 'complete') {
            requestIdleCallback(function () {
                subscriber();
            });
        }
    });
};
export var loadSubject = [LOAD_SUBJECT_NAME, observeLoad];
export var UNLOAD_SUBJECT_NAME = 'unload_0';
export var observeUnload = function (next, tearDown) {
    var window = getDefaultBrowser();
    if (!window)
        return;
    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    var _a = __read(invokeCallbackOnce(next), 1), invokeCbOnce = _a[0];
    var unloadEventList = ['unload', 'beforeunload', 'pagehide'];
    var handler = function () {
        invokeCbOnce();
    };
    unloadEventList.forEach(function (ev) {
        window.addEventListener(ev, handler);
    });
    tearDown(function () {
        unloadEventList.forEach(function (ev) {
            window.removeEventListener(ev, handler);
        });
    });
};
export var unloadSubject = [UNLOAD_SUBJECT_NAME, observeUnload];
//# sourceMappingURL=page.js.map