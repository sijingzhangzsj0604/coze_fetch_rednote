/// <reference types="node" />
import http from 'http';
import WebSocket from 'ws';
import express from 'express';
import { ModuleName } from '../../types/protocol';
import { SourceType } from '../../types/performance';
import { GadgetPCMode, GadgetPlatform } from '../../types/upload';
import { CmdEnum, EventMap, CmdMap } from '../../protocol/performance';
import { AppTypeEnum } from '../../types/commonData';
import { PackageType } from '../../types/compile';
import { From } from '../../protocol/compile';
import BaseModule from '../../common/Module';
export interface WindowAccessor {
    subscribeClose: (fn: () => void) => void;
    unsubscribeClose: (fn: () => void) => void;
    close: () => void;
}
export default abstract class PerformanceModule extends BaseModule<ModuleName.performance, EventMap, CmdMap> implements CmdMap {
    compilePath?: string;
    wsServer: {
        server?: WebSocket.Server;
        port?: number;
    };
    wsClient: {
        client?: WebSocket;
        connected: boolean;
    };
    fileServer: {
        app?: express.Express;
        server?: http.Server;
        port?: number;
    };
    msgBuffer: Record<SourceType, WebSocket.Data[]>;
    readonly tipTimeout = 10000;
    constructor();
    abstract [CmdEnum.GetPage](): Promise<string>;
    compile({ from, compilePath, packageType, platform, }: {
        from: From;
        compilePath: string;
        packageType?: PackageType;
        platform: 'mobile' | 'pc';
    }): Promise<{
        distPath: string;
    }>;
    protected startFileServer(filePath: string, port: number): void;
    sendMsgToClient(msg: any): void;
    handleClientMsg(msg: WebSocket.Data, appId: string): void;
    startSocket(port: number, appId: string): void;
    upload({ appId, host, mode, compilePath, targetPath, platform, startPage, traceId, }: {
        appId: string;
        host: string;
        mode: GadgetPCMode;
        compilePath: string;
        targetPath: string;
        platform: GadgetPlatform;
        startPage?: string;
        traceId?: string;
    }): Promise<{
        token: any;
    }>;
    close(): void;
    [CmdEnum.Start](opts: {
        compilePath: string;
        mode: GadgetPCMode;
        platform: GadgetPlatform;
        appType: AppTypeEnum;
        traceId?: string;
        startPage?: string;
    }): Promise<void>;
    [CmdEnum.Stop](): void;
}
