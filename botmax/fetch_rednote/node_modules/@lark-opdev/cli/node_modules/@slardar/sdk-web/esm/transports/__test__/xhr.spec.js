import test from 'ava';
import sinon from 'sinon';
import { getXhrTransport } from '../xhr';
test.serial('xhrTransport - no XHR', function (t) {
    t.notThrows(function () {
        var xhr = getXhrTransport();
        xhr.get({ url: 'any' });
        xhr.post({ url: 'any' });
    });
});
test.serial('xhrTransport - get', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var xhrTransport = getXhrTransport();
    var onSuccess = sinon.fake();
    var getResponseText = sinon.fake();
    xhrTransport.get({
        url: 'www.toutiao.com',
        success: onSuccess,
        getResponseText: getResponseText,
        withCredentials: true,
    });
    t.is(requests.length, 1);
    t.is(requests[0].url, 'www.toutiao.com');
    t.is(requests[0].method, 'GET');
    t.is(requests[0].async, true);
    t.assert(onSuccess.notCalled);
    requests[0].respond(200, {}, JSON.stringify({
        payload: 'apple',
    }));
    t.assert(getResponseText.called);
    t.is(getResponseText.args[0][0], JSON.stringify({
        payload: 'apple',
    }));
    t.assert(onSuccess.calledOnce);
    t.deepEqual(onSuccess.args[0][0], {
        payload: 'apple',
    });
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('xhrTransport - get empty response', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var xhrTransport = getXhrTransport();
    var onSuccess = sinon.fake();
    xhrTransport.get({
        url: 'www.toutiao.com',
        success: onSuccess,
        withCredentials: true,
    });
    t.is(requests.length, 1);
    t.assert(onSuccess.notCalled);
    requests[0].respond(200, {}, '');
    t.assert(onSuccess.calledOnce);
    t.deepEqual(onSuccess.args[0][0], {});
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('xhrTransport - non-json response', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var xhrTransport = getXhrTransport();
    var onSuccess = sinon.fake();
    var onFail = sinon.fake();
    xhrTransport.get({
        url: 'www.toutiao.com',
        success: onSuccess,
        fail: onFail,
        withCredentials: true,
    });
    t.is(requests.length, 1);
    t.assert(onSuccess.notCalled);
    requests[0].respond(200, {}, 'abc');
    t.assert(onSuccess.notCalled);
    t.assert(onFail.calledOnce);
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('xhrTransport - post', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var xhrTransport = getXhrTransport();
    var onSuccess = sinon.fake();
    xhrTransport.post({
        url: 'www.toutiao.com',
        success: onSuccess,
        data: JSON.stringify({
            payload: 'post data',
        }),
    });
    t.is(requests.length, 1);
    t.is(requests[0].url, 'www.toutiao.com');
    t.is(requests[0].method, 'POST');
    t.is(requests[0].async, true);
    t.is(requests[0].requestBody, JSON.stringify({
        payload: 'post data',
    }));
    t.assert(onSuccess.notCalled);
    requests[0].respond(200, {}, JSON.stringify({
        payload: 'apple',
    }));
    t.assert(onSuccess.calledOnce);
    t.deepEqual(onSuccess.args[0][0], {
        payload: 'apple',
    });
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('xhrTransport - error', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var xhrTransport = getXhrTransport();
    var onSuccess = sinon.fake();
    var onFail = sinon.fake();
    xhrTransport.get({
        url: 'www.toutiao.com',
        success: onSuccess,
        fail: onFail,
        withCredentials: true,
    });
    t.is(requests.length, 1);
    t.assert(onSuccess.notCalled);
    requests[0].error();
    t.assert(onSuccess.notCalled);
    t.assert(onFail.calledOnce);
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
//# sourceMappingURL=xhr.spec.js.map