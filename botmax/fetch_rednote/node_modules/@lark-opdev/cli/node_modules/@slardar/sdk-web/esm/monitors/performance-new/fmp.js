import { __read } from "tslib";
import { isFunction } from '@slardar/sdk-template';
import { getDefaultCaf, getDefaultRaf, applyAnimationFrame, applyMutationObserver, getDefaultPerformance, getDefaultDocument, getDefaultMutationObserver, now, } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
var FMP_METRIC_NAME = 'fmp';
var DEFAULT_IGNORE_TAGS = ['SCRIPT', 'STYLE', 'META', 'HEAD'];
var getScore = function (element, depth, exist, ignoreTags) {
    if (!element || ignoreTags.indexOf(element.tagName) > -1) {
        return 0;
    }
    var _a = element.children, children = _a === void 0 ? [] : _a;
    var score = [].slice
        .call(children)
        .reduceRight(function (sum, child) { return sum + getScore(child, depth + 1, sum > 0, ignoreTags); }, 0);
    if (score <= 0 && !exist) {
        if (!isFunction(element.getBoundingClientRect)) {
            return 0;
        }
        var _b = element.getBoundingClientRect() || {}, top_1 = _b.top, height = _b.height;
        if (top_1 > window.innerHeight || height <= 0) {
            return 0;
        }
    }
    return score + 1 + 0.5 * depth;
};
var getFMPInternal = function (_a) {
    var _b = _a === void 0 ? [] : _a, _c = __read(_b), first = _c[0], rest = _c.slice(1);
    return ((rest &&
        rest.reduce(function (_a, cur) {
            var _b = __read(_a, 2), prev = _b[0], target = _b[1];
            var diff = cur.score - prev.score;
            return [cur, cur.time >= prev.time && target.rate < diff ? { time: cur.time, rate: diff } : target];
        }, [first, { time: first === null || first === void 0 ? void 0 : first.time, rate: 0 }])[1].time) ||
        0);
};
export var getFMP = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 1), loadObserver = _b[0];
    var document = getDefaultDocument();
    var MutationObserver = getDefaultMutationObserver();
    var performance = getDefaultPerformance();
    var navigationStart = (performance && performance.timing && performance.timing.navigationStart) || undefined;
    var metric = initMetric(FMP_METRIC_NAME, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!document || !MutationObserver || !navigationStart) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    var startTime = now();
    var list = [];
    var record = function () {
        return list.push({
            time: now() - startTime,
            // eslint-disable-next-line compat/compat
            score: getScore(document && document.body, 1, false, DEFAULT_IGNORE_TAGS),
        });
    };
    var raf = getDefaultRaf();
    var caf = getDefaultCaf();
    var _c = __read(applyAnimationFrame(document, raf, caf, true), 1), scheduleAF = _c[0];
    // 持续监听 dom 变化，记录下时间和得分
    // scheduleAF 可以避免强制回流，同时真正的变更是在animationFrame 中
    var _d = __read(applyMutationObserver(MutationObserver, function () { return scheduleAF(record); }), 2), observe = _d[0], disconnect = _d[1];
    var tirggerFMP = function (timeGap) {
        if (timeGap === void 0) { timeGap = 0; }
        var fmp = getFMPInternal(list);
        metric.value = fmp ? fmp + timeGap : 0;
        sendOnceAndTearDown(metric);
        list.length = 0;
    };
    var timeGap = startTime - (navigationStart || 0);
    observe(document, { subtree: true, childList: true });
    tearDownGroup.push(disconnect);
    tearDownGroup.push(loadObserver[0](function () {
        setTimeout(function () {
            tirggerFMP(timeGap);
        }, 200);
    }));
};
//# sourceMappingURL=fmp.js.map