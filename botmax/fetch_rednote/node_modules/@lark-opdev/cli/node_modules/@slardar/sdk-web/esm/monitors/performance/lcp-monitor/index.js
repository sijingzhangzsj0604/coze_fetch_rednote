import { __read } from "tslib";
import { getDefaultPerformanceObserver, applyPerformanceObserver, onPageUnload, invokeCallbackOnce, onceHidden, } from '../../../utils';
import { initMetric } from '../util';
var LCPMonitorMetricName = 'lcp';
var LCP = 'largest-contentful-paint';
var LCPListenerEventTypes = ['keydown', 'click'];
export var LCPMonitor = function (PerformanceObserver) {
    if (PerformanceObserver === void 0) { PerformanceObserver = getDefaultPerformanceObserver(); }
    return function (props, cb) {
        var precollect = props.precollect;
        var metric = initMetric(LCPMonitorMetricName, 0);
        var _a = __read(invokeCallbackOnce(cb), 1), invokeCbOnce = _a[0];
        if (!PerformanceObserver) {
            metric.isSupport = false;
            invokeCbOnce(metric);
            return;
        }
        // 处理预收集到的数据
        ;
        (precollect.entries || []).forEach(function (_a) {
            var entryType = _a.entryType, startTime = _a.startTime;
            if (entryType === LCP) {
                metric.value = startTime;
            }
        });
        // 监听lcp
        var invokeCb = function (_a) {
            var startTime = _a.startTime;
            metric.value = startTime;
        };
        var _b = __read(applyPerformanceObserver(PerformanceObserver, invokeCb), 2), observe = _b[0], disconnect = _b[1];
        observe(LCP);
        var disconnectAndStopListening = function () {
            disconnect();
            LCPListenerEventTypes.forEach(function (type) {
                window.removeEventListener(type, invokeCbAndStopListening, true);
            });
        };
        // 结算并停止监听
        var invokeCbAndStopListening = function () {
            invokeCbOnce(metric);
            disconnectAndStopListening();
        };
        LCPListenerEventTypes.forEach(function (type) {
            window.addEventListener(type, invokeCbAndStopListening, true);
        });
        var handleOnceHidden = function () {
            metric.isSupport = false;
            invokeCbAndStopListening();
        };
        onceHidden(handleOnceHidden);
        var handlePageUnload = function () {
            metric.isBounced = true;
            invokeCbAndStopListening();
        };
        onPageUnload(handlePageUnload);
    };
};
//# sourceMappingURL=index.js.map