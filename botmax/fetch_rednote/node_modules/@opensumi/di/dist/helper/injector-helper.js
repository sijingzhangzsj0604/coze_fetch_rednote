"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIdFactory = exports.createId = exports.isInjectable = exports.getInjectableOpts = exports.markInjectable = exports.removeInjector = exports.setInjector = exports.getInjectorOfInstance = void 0;
require("reflect-metadata");
var constants_1 = require("../constants");
var INJECTOR_KEY = Symbol('INJECTOR_KEY');
function getInjectorOfInstance(instance) {
    return instance[INJECTOR_KEY] || null;
}
exports.getInjectorOfInstance = getInjectorOfInstance;
function setInjector(instance, injector) {
    instance[INJECTOR_KEY] = injector;
}
exports.setInjector = setInjector;
function removeInjector(instance) {
    delete instance[INJECTOR_KEY];
}
exports.removeInjector = removeInjector;
var INJECTABLE_KEY = Symbol('INJECTABLE_KEY');
var defaultInstanceOpts = {};
function markInjectable(target, opts) {
    if (opts === void 0) { opts = defaultInstanceOpts; }
    // 合并的时候只合并当前对象的数据
    var currentOpts = Reflect.getOwnMetadata(INJECTABLE_KEY, target);
    Reflect.defineMetadata(INJECTABLE_KEY, __assign(__assign(__assign({}, opts), currentOpts), { version: constants_1.VERSION }), target);
}
exports.markInjectable = markInjectable;
function getInjectableOpts(target) {
    // 可注入性的参数可以继承自父级
    return Reflect.getMetadata(INJECTABLE_KEY, target);
}
exports.getInjectableOpts = getInjectableOpts;
function isInjectable(target) {
    return !!getInjectableOpts(target);
}
exports.isInjectable = isInjectable;
var index = 0;
function createId(name) {
    return "".concat(name, "_").concat(index++);
}
exports.createId = createId;
function createIdFactory(name) {
    var idx = 0;
    return {
        create: function () {
            return "".concat(name, "_").concat(idx++);
        },
    };
}
exports.createIdFactory = createIdFactory;
