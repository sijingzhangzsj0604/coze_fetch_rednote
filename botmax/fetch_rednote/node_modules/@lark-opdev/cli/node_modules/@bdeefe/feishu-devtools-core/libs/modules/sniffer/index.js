"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,n)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const path_1=__importDefault(require("path")),fs_extra_1=__importDefault(require("fs-extra")),Module_1=__importDefault(require("../../common/Module")),flow_1=__importDefault(require("../../common/flow")),Error_1=__importStar(require("../../common/Error")),sniffer_1=require("../../protocol/sniffer"),protocol_1=require("../../types/protocol"),simulator_1=require("../../types/simulator"),node_1=__importDefault(require("@lark-opdev/i18n/libs/node"));class SnifferModule extends Module_1.default{constructor(){super(protocol_1.ModuleName.sniffer),this.dataMap=new Map}[sniffer_1.CmdEnum.GetAppType](e,t=!0){const r=this.log.bind(this,"info",sniffer_1.CmdEnum.GetAppType),o=this.dataMap.get(e);return o&&t?Promise.resolve(o.appType):new Promise((t,o)=>{const n=flow_1.default.appTypes,i=[];r("getAppType","start"),Promise.race(n.map(t=>flow_1.default.run(t,"isApp",e).then(e=>e===simulator_1.CompilePathType.unknown?new Promise((e,t)=>{i.push(e),i.length===n.length&&t(new Error_1.default({code:Error_1.CoreErrorCode.COMPILE_PATH_ERROR,message:node_1.default.t("COMPILE_PATH_ERROR")}))}):{appType:t,compileType:e}))).then(o=>{r("getAppType","end",{data:o}),i.forEach(e=>e(o)),this.dataMap.set(e,o),t(o.appType),flow_1.default.run(o.appType,"init",e)}).catch(e=>{r("getAppType","end",{error:e}),i.forEach(e=>e(null)),o(new Error_1.default({code:Error_1.CoreErrorCode.COMPILE_PATH_ERROR,message:e&&e.message||node_1.default.t("COMPILE_PATH_ERROR_PATH_INVALID")}))})})}[sniffer_1.CmdEnum.GetAppTypeSync](e){const t=this.dataMap.get(e);return t&&t.appType}[sniffer_1.CmdEnum.GetAppCompileType](e){const t=this.dataMap.get(e);return t&&t.compileType}[sniffer_1.CmdEnum.ResetCompilePath](e,t){if(e===t)return;const r=this.dataMap.get(e);r&&(this.dataMap.delete(e),t&&this.dataMap.set(t,r))}[sniffer_1.CmdEnum.GetFrameworkOption](e){const t=this.log.bind(this,"info",sniffer_1.CmdEnum.GetFrameworkOption),r={useUpgrade:!1,minimumVersion:"5.12"};try{if(this[sniffer_1.CmdEnum.GetAppCompileType](e)===simulator_1.CompilePathType.sourceCode){t("getFrameworkOption","startReadOption");const{miniprogramRoot:o="."}=fs_extra_1.default.readJSONSync(path_1.default.join(e,"project.config.json"));if(t("getFrameworkOption","miniprogramRoot",o),!fs_extra_1.default.pathExistsSync(path_1.default.join(e,o,"app.json")))return r;const{newFramework:n}=fs_extra_1.default.readJSONSync(path_1.default.join(e,o,"app.json"));t("getFrameworkOption","newFramework",n),!0===(null==n?void 0:n.enabled)&&(r.useUpgrade=!0,r.minimumVersion=/^\d+\.\d+$/.test(n.minimumSupportedVersion)?n.minimumSupportedVersion:"5.12")}}catch(e){t("getFrameworkOption","err",e)}return t("getFrameworkOption","end",r),r}}exports.default=SnifferModule;