"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indent_string_1 = __importDefault(require("indent-string"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const wrap_ansi_1 = __importDefault(require("wrap-ansi"));
const list_1 = require("@oclif/plugin-help/lib/list");
const util_1 = require("@oclif/plugin-help/lib/util");
const base_1 = __importDefault(require("./base"));
const env_1 = __importDefault(require("../../utils/env"));
class RootHelp extends base_1.default {
    constructor(config, opts) {
        super();
        this.config = config;
        this.opts = opts;
        this.render = (0, util_1.template)(this);
    }
    root() {
        let description = this.config.pjson.oclif.description ||
            this.config.pjson.description ||
            '';
        description = this.render(description);
        description = description.split('\n')[0];
        description = this.config.bin + ': ' + description;
        if (env_1.default.private) {
            description += ` (for ${env_1.default.name})`;
        }
        let output = (0, util_1.compact)([
            description,
            this.usage(),
            this.description(),
            this.commands(),
            this.options(),
        ]).join('\n\n');
        if (this.opts.stripAnsi) {
            output = (0, strip_ansi_1.default)(output);
        }
        return output;
    }
    usage() {
        return [
            this.highlight('USAGE'),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(`$ ${this.config.bin} [COMMAND]`, this.opts.maxWidth - 2, {
                trim: false,
                hard: true,
            }), 2),
        ].join('\n');
    }
    description() {
        let description = this.config.pjson.oclif.description ||
            this.config.pjson.description ||
            '';
        description = this.render(description);
        description = description.split('\n').slice(1).join('\n');
        if (!description) {
            return;
        }
        return [
            this.highlight('DESCRIPTION'),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(description, this.opts.maxWidth - 2, { trim: false, hard: true }), 2),
        ].join('\n');
    }
    commands() {
        const messages = [];
        const commands = new Map();
        const groups = [
            {
                title: 'Create a new project with templates',
                commands: ['create'],
            },
            {
                title: 'Account related',
                commands: ['login', 'logout', 'whoami', 'token', 'switch'],
            },
            {
                title: 'Preview or upload',
                commands: ['preview', 'upload'],
            },
            {
                title: 'Manipulate opdev-ide',
                commands: ['open'],
            },
            {
                title: 'Help',
                commands: ['help', 'feedback', 'log'],
            },
        ];
        let maxWidth = 0;
        this.config.commands.forEach((command) => {
            maxWidth = Math.max(command.id.length, maxWidth);
            commands.set(command.id, command.description);
        });
        groups.forEach((group) => {
            messages.push('\n' + this.bold(group.title));
            messages.push(...group.commands.map((id) => {
                const description = id === 'help' ? 'Display help information' : commands.get(id);
                return (0, indent_string_1.default)(id.padEnd(maxWidth + 2) + description, 2);
            }));
        });
        return [this.highlight('COMMANDS'), messages.join('\n')].join('');
    }
    options() {
        const flags = {
            all: 'print all available commands',
            help: 'print CLI help information',
            version: 'print CLI version',
        };
        const body = (0, list_1.renderList)(Object.entries(flags).map(([flag, description]) => [
            `-${flag[0]}, --${flag}`,
            this.gray(description),
        ]), { stripAnsi: this.opts.stripAnsi, maxWidth: this.opts.maxWidth - 2 });
        return [this.highlight('OPTIONS'), (0, indent_string_1.default)(body, 2)].join('\n');
    }
}
exports.default = RootHelp;
