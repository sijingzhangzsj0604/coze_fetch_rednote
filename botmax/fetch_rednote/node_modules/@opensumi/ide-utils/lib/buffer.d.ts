export declare class BinaryBuffer {
    static alloc(byteLength: number): BinaryBuffer;
    static wrap(actual: Uint8Array): BinaryBuffer;
    /**
     * fromString 产生的 BinaryBuffer 的 encoding 都是 utf8
     * @param source source string
     */
    static fromString(source: string): BinaryBuffer;
    static concat(buffers: BinaryBuffer[], totalLength?: number): BinaryBuffer;
    readonly buffer: Uint8Array;
    readonly byteLength: number;
    private constructor();
    /**
     * 将 BinaryBuffer 转为字符串
     * @param encoding 字节编码，不传默认为 utf8。需要传入 `SUPPORTED_ENCODINGS` 已有的键值。
     */
    toString(encoding?: string): string;
    slice(start?: number, end?: number): BinaryBuffer;
    set(array: BinaryBuffer | Uint8Array, offset?: number): void;
    readUInt32BE(offset: number): number;
    writeUInt32BE(value: number, offset: number): void;
    readUInt32LE(offset: number): number;
    writeUInt32LE(value: number, offset: number): void;
    readUInt8(offset: number): number;
    writeUInt8(value: number, offset: number): void;
}
export declare function readUInt16LE(source: Uint8Array, offset: number): number;
export declare function writeUInt16LE(destination: Uint8Array, value: number, offset: number): void;
export declare function readUInt32BE(source: Uint8Array, offset: number): number;
export declare function writeUInt32BE(destination: Uint8Array, value: number, offset: number): void;
export declare function readUInt32LE(source: Uint8Array, offset: number): number;
export declare function writeUInt32LE(destination: Uint8Array, value: number, offset: number): void;
export declare function readUInt8(source: Uint8Array, offset: number): number;
export declare function writeUInt8(destination: Uint8Array, value: number, offset: number): void;
/** Decodes base64 to a uint8 array. URL-encoded and unpadded base64 is allowed. */
export declare function decodeBase64(encoded: string): BinaryBuffer;
/** Encodes a buffer to a base64 string. */
export declare function encodeBase64({ buffer }: BinaryBuffer, padded?: boolean, urlSafe?: boolean): string;
//# sourceMappingURL=buffer.d.ts.map