import { __awaiter, __generator } from "tslib";
import { promisify } from 'util';
import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { getCbHook, AjaxMonitorPlugin } from '../ajax';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
function str2ab(str) {
    var buf = new ArrayBuffer(str.length); // 2 bytes for each char
    // eslint-disable-next-line compat/compat
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return buf;
}
var SUCCESS_RESPONSE = { title: 'test post' };
var mockObj = {
    getResponseHeader: function (_header) {
        return '';
    },
};
var noop = function () { return undefined; };
var createMockXHR = function (options, getResponseHeader) {
    var _a;
    if (getResponseHeader === void 0) { getResponseHeader = mockObj.getResponseHeader; }
    var mockXHR = {
        open: sinon.fake(),
        send: sinon.fake(),
        readyState: 4,
        status: (_a = options === null || options === void 0 ? void 0 : options.status) !== null && _a !== void 0 ? _a : 200,
        responseType: (options === null || options === void 0 ? void 0 : options.hasOwnProperty('responseType')) ? options === null || options === void 0 ? void 0 : options.responseType : 'text',
        responseText: (options === null || options === void 0 ? void 0 : options.hasOwnProperty('responseText')) ? options === null || options === void 0 ? void 0 : options.responseText : JSON.stringify(SUCCESS_RESPONSE),
        response: (options === null || options === void 0 ? void 0 : options.hasOwnProperty('response')) ? options === null || options === void 0 ? void 0 : options.response : str2ab(JSON.stringify(SUCCESS_RESPONSE)),
        onreadystatechange: sinon.fake(),
        setRequestHeader: noop,
        getAllResponseHeaders: function () { var _a; return (_a = options === null || options === void 0 ? void 0 : options.responseHeaders) !== null && _a !== void 0 ? _a : ''; },
        getResponseHeader: getResponseHeader,
    };
    var mock = function () { };
    mock.UNSENT = 0;
    mock.prototype = mockXHR;
    return mock;
};
test('getCbHook', function (t) {
    var client = createTestWebClient();
    client.init({
        pid: 'init-pid',
    });
    var cbHook = getCbHook(client);
    var cb = sinon.fake();
    var hooked = cbHook(cb);
    hooked({
        ev_type: 'http',
        payload: {
            api: 'xhr',
            request: {
                method: 'GET',
                url: 'http://www.toutiao.com',
                timestamp: 2000,
            },
            response: {
                status: 200,
                is_custom_error: false,
                timestamp: 2345,
            },
            duration: 345,
        },
    });
    t.assert(cb.calledOnce);
    t.like(cb.args[0][0], {
        ev_type: 'http',
        payload: {
            api: 'xhr',
            request: {
                method: 'GET',
                url: 'http://www.toutiao.com',
                timestamp: 2000,
            },
            response: {
                status: 200,
                is_custom_error: false,
                timestamp: 2345,
            },
            duration: 345,
        },
        overrides: {
            url: 'about:blank',
            pid: 'init-pid',
            context: undefined,
            timestamp: 2000,
        },
    });
});
test.serial('AjaxMonitorPlugin - disabled', function (t) {
    var MockedXHR = createMockXHR();
    window.XMLHttpRequest = MockedXHR;
    var client = createTestWebClient();
    var onReport = sinon.fake();
    AjaxMonitorPlugin(client);
    client.init({
        pid: 'init-pid',
        plugins: {
            ajax: false,
        },
    });
    client.on('report', onReport);
    t.falsy(client.wrapXhr);
    var xhr = new window.XMLHttpRequest();
    xhr.open('GET', 'http://www.toutiao.com');
    xhr.send();
    // @ts-expect-error
    xhr.onreadystatechange();
    t.true(onReport.notCalled);
    t.is(window.XMLHttpRequest, MockedXHR);
});
test('AjaxMonitorPlugin - not support xhr', function (t) {
    t.notThrows(function () {
        var client = createTestWebClient();
        AjaxMonitorPlugin(client);
        client.init({
            pid: 'init-pid',
            plugins: {
                ajax: true,
            },
        });
    });
});
test.serial('AjaxMonitorPlugin - no wrap', function (t) {
    var MockedXHR = createMockXHR();
    window.XMLHttpRequest = MockedXHR;
    var client = createTestWebClient();
    var onReport = sinon.fake();
    AjaxMonitorPlugin(client);
    client.init({
        pid: 'init-pid',
        plugins: {
            ajax: {
                autoWrap: false,
            },
        },
    });
    client.on('report', onReport);
    var xhr = new window.XMLHttpRequest();
    xhr.open('GET', 'http://www.toutiao.com');
    xhr.send();
    // @ts-expect-error
    xhr.onreadystatechange();
    t.true(onReport.notCalled);
    t.truthy(client.wrapXhr);
    t.is(window.XMLHttpRequest, MockedXHR);
});
test.serial('AjaxMonitorPlugin - ignoreUrls', function (t) {
    var MockedXHR = createMockXHR();
    window.XMLHttpRequest = MockedXHR;
    var client = createTestWebClient();
    var onReport = sinon.fake();
    AjaxMonitorPlugin(client);
    client.init({
        pid: 'init-pid',
        plugins: {
            ajax: {
                ignoreUrls: ['www.toutiao.com'],
            },
        },
    });
    client.on('report', onReport);
    var xhr = new window.XMLHttpRequest();
    xhr.open('GET', 'http://www.toutiao.com');
    xhr.send();
    // @ts-expect-error
    xhr.onreadystatechange();
    t.true(onReport.notCalled);
});
test.serial('AjaxMonitorPlugin - payload', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var MockedXHR, client, onReport, xhr, callArgs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                MockedXHR = createMockXHR({
                    responseHeaders: 'x-tt-ID: 1234\r\nx-TT-logid: 4567',
                });
                window.XMLHttpRequest = MockedXHR;
                client = createTestWebClient();
                onReport = sinon.fake();
                AjaxMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        ajax: true,
                    },
                });
                client.on('report', onReport);
                xhr = new window.XMLHttpRequest();
                xhr.open('GET', 'http://www.toutiao.com');
                xhr.send();
                // @ts-expect-error
                xhr.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _a.sent();
                t.true(onReport.calledOnce);
                callArgs = onReport.args[0][0];
                t.like(callArgs, {
                    ev_type: 'http',
                    payload: {
                        api: 'xhr',
                        request: {
                            method: 'get',
                            url: 'http://www.toutiao.com/',
                            headers: undefined,
                        },
                        response: {
                            status: 200,
                            is_custom_error: false,
                            headers: {
                                'x-tt-id': '1234',
                                'x-tt-logid': '4567',
                            },
                        },
                    },
                });
                t.true(typeof callArgs.payload.request.timestamp === 'number');
                t.true(typeof callArgs.payload.response.timestamp === 'number');
                t.true(typeof callArgs.payload.duration === 'number');
                return [2 /*return*/];
        }
    });
}); });
test.serial('AjaxMonitorPlugin - destroy', function (t) {
    var MockedXHR = createMockXHR({
        responseHeaders: 'x-tt-ID: 1234\r\nx-TT-logid: 4567',
    });
    window.XMLHttpRequest = MockedXHR;
    var client = createTestWebClient();
    var onReport = sinon.fake();
    AjaxMonitorPlugin(client);
    client.init({
        pid: 'init-pid',
        plugins: {
            ajax: true,
        },
    });
    client.on('report', onReport);
    client.destroy();
    var xhr = new window.XMLHttpRequest();
    xhr.open('GET', 'http://www.toutiao.com');
    xhr.send();
    // @ts-expect-error
    xhr.onreadystatechange();
    t.true(onReport.notCalled);
});
test.serial('AjaxMonitorPlugin - get right context', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var MockedXHR, client, onReport, xhr, callArgs, xhr2, callArgs2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                MockedXHR = createMockXHR({
                    responseHeaders: 'x-tt-ID: 1234\r\nx-TT-logid: 4567',
                });
                window.XMLHttpRequest = MockedXHR;
                client = createTestWebClient();
                onReport = sinon.fake();
                AjaxMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        ajax: true,
                    },
                });
                client.on('report', onReport);
                xhr = new window.XMLHttpRequest();
                xhr.open('GET', 'http://www.toutiao.com');
                xhr.send();
                client.config({
                    pid: 'second-pid',
                });
                // @ts-expect-error
                xhr.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _a.sent();
                t.true(onReport.calledOnce);
                callArgs = onReport.args[0][0];
                t.like(callArgs, {
                    ev_type: 'http',
                    overrides: {
                        pid: 'init-pid',
                    },
                });
                xhr2 = new window.XMLHttpRequest();
                xhr2.open('GET', 'http://www.toutiao.com');
                client.config({
                    pid: 'third-pid',
                });
                xhr2.send();
                // @ts-expect-error
                xhr2.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 2:
                _a.sent();
                t.true(onReport.calledTwice);
                callArgs2 = onReport.args[1][0];
                t.like(callArgs2, {
                    ev_type: 'http',
                    overrides: {
                        pid: 'third-pid',
                    },
                });
                return [2 /*return*/];
        }
    });
}); });
test.serial('AjaxMonitorPlugin - wrapXhr', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var MockedXHR, client, onReport, WrappedXHR, xhr, callArgs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                MockedXHR = createMockXHR({
                    responseHeaders: 'x-tt-ID: 1234\r\nx-TT-logid: 4567',
                });
                window.XMLHttpRequest = MockedXHR;
                client = createTestWebClient();
                onReport = sinon.fake();
                AjaxMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        ajax: {
                            autoWrap: false,
                        },
                    },
                });
                client.on('report', onReport);
                t.truthy(client.wrapXhr);
                WrappedXHR = client.wrapXhr(window.XMLHttpRequest);
                xhr = new WrappedXHR();
                xhr.open('GET', 'http://www.toutiao.com');
                xhr.send();
                // @ts-expect-error
                xhr.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _a.sent();
                t.true(onReport.calledOnce);
                callArgs = onReport.args[0][0];
                t.like(callArgs, {
                    ev_type: 'http',
                    payload: {
                        api: 'xhr',
                        request: {
                            method: 'get',
                            url: 'http://www.toutiao.com/',
                            headers: undefined,
                        },
                        response: {
                            status: 200,
                            headers: {
                                'x-tt-id': '1234',
                                'x-tt-logid': '4567',
                            },
                        },
                    },
                });
                t.true(typeof WrappedXHR.bind === 'function');
                t.true(typeof WrappedXHR.UNSENT === 'number');
                t.true(typeof WrappedXHR.prototype.open === 'function');
                return [2 /*return*/];
        }
    });
}); });
test.serial('AjaxMonitorPlugin - collect body on error', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var MockedXHR, client, onReport, xhr, callArgs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                MockedXHR = createMockXHR({
                    status: 400,
                    response: '456',
                });
                window.XMLHttpRequest = MockedXHR;
                client = createTestWebClient();
                onReport = sinon.fake();
                AjaxMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        ajax: {
                            collectBodyOnError: true,
                        },
                    },
                });
                client.on('report', onReport);
                xhr = new window.XMLHttpRequest();
                xhr.open('GET', 'http://www.toutiao.com');
                xhr.send('123');
                // @ts-expect-error
                xhr.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _a.sent();
                t.true(onReport.calledOnce);
                callArgs = onReport.args[0][0];
                t.like(callArgs, {
                    ev_type: 'http',
                    payload: {
                        api: 'xhr',
                        request: {
                            method: 'get',
                            url: 'http://www.toutiao.com/',
                            headers: undefined,
                            body: '123',
                        },
                        response: {
                            status: 400,
                            headers: {},
                            body: '456',
                        },
                    },
                });
                return [2 /*return*/];
        }
    });
}); });
test.serial('AjaxMonitorPlugin - not collect body on success', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var MockedXHR, client, onReport, xhr, callArgs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                MockedXHR = createMockXHR({
                    status: 200,
                    response: '456',
                });
                window.XMLHttpRequest = MockedXHR;
                client = createTestWebClient();
                onReport = sinon.fake();
                AjaxMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        ajax: {
                            collectBodyOnError: true,
                        },
                    },
                });
                client.on('report', onReport);
                xhr = new window.XMLHttpRequest();
                xhr.open('GET', 'http://www.toutiao.com');
                xhr.send('123');
                // @ts-expect-error
                xhr.onreadystatechange();
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _a.sent();
                t.true(onReport.calledOnce);
                callArgs = onReport.args[0][0];
                t.like(callArgs, {
                    ev_type: 'http',
                    payload: {
                        api: 'xhr',
                        request: {
                            method: 'get',
                            url: 'http://www.toutiao.com/',
                            headers: undefined,
                            body: undefined,
                        },
                        response: {
                            status: 200,
                            headers: {},
                            body: undefined,
                        },
                    },
                });
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=ajax.spec.js.map