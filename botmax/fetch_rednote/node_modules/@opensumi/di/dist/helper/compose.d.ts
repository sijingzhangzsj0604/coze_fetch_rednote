export declare type Optional<T extends object, K extends keyof T = keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type Context<T> = {
    proceed(): Promise<void> | void;
} & T;
export declare type PureContext<T> = Optional<Context<T>, 'proceed'>;
export interface Composed<C> {
    (ctx: PureContext<C>): Promise<void> | void;
}
export interface Middleware<C> {
    (ctx: Context<C>): Promise<void> | void;
}
export default function compose<C>(middlewareList: Middleware<C>[]): Composed<C>;
