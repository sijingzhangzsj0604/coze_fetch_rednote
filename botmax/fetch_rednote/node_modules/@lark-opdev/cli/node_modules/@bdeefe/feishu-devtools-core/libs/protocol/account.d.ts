import { LoginOptions, LogoutOptions, SwitchEnvOptions } from '../types/account';
import { AccountInfo, AppType, BaseAccountInfo, DebugTenant } from '../types/commonData';
import { CmdFun, ModuleCmdMap, ModuleDesc, ModuleEventMap, ModuleName } from '../types/protocol';
export declare enum EventEnum {
    Logined = "Account.Logined",
    Logouted = "Account.Logouted",
    switchedTenant = "Account.switchedTenant",
    loginTimeout = "Account.loginTimeout",
    switchedEnv = "Account.switchedEnv"
}
export interface EventMap extends ModuleEventMap<EventEnum> {
    [EventEnum.Logined]: {
        type: '';
        params: AccountInfo;
    };
    [EventEnum.Logouted]: {
        type: '';
        params: {
            sessionExpired: boolean;
        };
    };
    [EventEnum.switchedTenant]: {
        type: '';
        params: {
            success: boolean;
            msg?: string;
            type: 'debug' | 'default' | 'needRecompile';
        };
    };
    [EventEnum.loginTimeout]: {
        type: '';
        params: {};
    };
    [EventEnum.switchedEnv]: {
        type: '';
        params: {
            accountInfo: AccountInfo;
        };
    };
}
export declare enum CmdEnum {
    Login = "Account.login",
    Logout = "Account.logout",
    Info = "Account.info",
    IsLogin = "Account.isLogin",
    tenantList = "Account.tenantList",
    switchTenant = "Account.switchTenant",
    switchDebugTenant = "Account.switchDebugTenant",
    switchEnv = "Account.swtichEnv",
    updateDebugTenant = "Account.updateDebugTenant",
    updateAccount = "Account.updateAccount",
    updateStatus = "Account.updateStatus"
}
export declare type CmdLogin = (m: ModuleName.account, cmd: CmdEnum.Login, options: LoginOptions) => Promise<void>;
export declare type CmdLogout = (m: ModuleName.account, cmd: CmdEnum.Logout, options: LogoutOptions) => Promise<void>;
export declare type CmdInfo = (m: ModuleName.account, cmd: CmdEnum.Info, environment?: string) => AccountInfo | undefined;
export declare type CmdIsLogin = (m: ModuleName, cmd: CmdEnum.IsLogin, environment?: string) => boolean;
export declare type CmdTenantList = (m: ModuleName, cmd: CmdEnum.tenantList) => Promise<BaseAccountInfo[] | void>;
export declare type CmdSwitchTenant = (m: ModuleName, cmd: CmdEnum.switchTenant, account: BaseAccountInfo) => Promise<{
    result: 'success' | 'fail' | 'noneed';
    msg?: string;
}>;
export declare type CmdSwitchDebugTenant = (m: ModuleName, cmd: CmdEnum.switchDebugTenant, account: DebugTenant, compilePath: string, appType: AppType) => Promise<{
    result: 'success' | 'fail' | 'noneed';
    msg?: string;
}>;
export declare type CmdSwitchEnv = (m: ModuleName, cmd: CmdEnum.switchEnv, options: SwitchEnvOptions) => Promise<{
    accountInfo: AccountInfo;
}>;
export declare type CmdUpdateDebugTenant = (m: ModuleName, cmd: CmdEnum.updateDebugTenant, options: {
    cookie: {
        session: string;
        session_list: string;
    };
    compilePath: string;
    appType: AppType;
    userId: string;
}) => void;
export declare type CmdUpdateAccount = (m: ModuleName, cmd: CmdEnum.updateAccount, options: {
    cookie: {
        session: string;
        session_list: string;
    };
    userId: string;
}) => Promise<void>;
export declare type CmdUpdateStatus = (m: ModuleName.account, cmd: CmdEnum.updateStatus) => Promise<void>;
export declare type Command = CmdLogin & CmdLogout & CmdInfo & CmdIsLogin & CmdTenantList & CmdSwitchTenant & CmdSwitchDebugTenant & CmdSwitchEnv & CmdUpdateDebugTenant & CmdUpdateAccount & CmdUpdateStatus;
export interface CmdMap extends ModuleCmdMap<CmdEnum> {
    [CmdEnum.Login]: CmdFun<CmdLogin>;
    [CmdEnum.Logout]: CmdFun<CmdLogout>;
    [CmdEnum.Info]: CmdFun<CmdInfo>;
    [CmdEnum.IsLogin]: CmdFun<CmdIsLogin>;
    [CmdEnum.tenantList]: CmdFun<CmdTenantList>;
    [CmdEnum.switchTenant]: CmdFun<CmdSwitchTenant>;
    [CmdEnum.switchDebugTenant]: CmdFun<CmdSwitchDebugTenant>;
    [CmdEnum.switchEnv]: CmdFun<CmdSwitchEnv>;
    [CmdEnum.updateDebugTenant]: CmdFun<CmdUpdateDebugTenant>;
    [CmdEnum.updateAccount]: CmdFun<CmdUpdateAccount>;
    [CmdEnum.updateStatus]: CmdFun<CmdUpdateStatus>;
}
declare type ModuleDependencies = ModuleName.storage | ModuleName.ui | ModuleName.service | ModuleName.eventTracker | ModuleName.compile | ModuleName.static;
export declare const AccountDesc: ModuleDesc<EventMap, CmdMap, ModuleDependencies>;
export {};
