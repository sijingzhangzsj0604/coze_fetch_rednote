"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const env_1 = require("../utils/env");
const command_2 = __importDefault(require("../extends/command"));
const account_1 = __importDefault(require("../implements/account"));
class Switch extends command_2.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const { flags } = yield this.parse(Switch);
            const account = new account_1.default();
            account.eventTracker('switch_start', { tags: Object.assign({}, flags) });
            account_1.default.checkTokenExist(this.id);
            const switchEnv = Object.keys(flags).includes('environment');
            const switchTenant = Object.keys(flags).includes('tenant');
            if (switchEnv) {
                yield account.switchEnv({
                    environment: flags.environment,
                });
            }
            else if (switchTenant) {
                yield account.switchTenant();
            }
            else {
                yield account.switchEnv({});
                yield account.switchTenant();
            }
            console.info(this.success('Success') + ' switched, current user is: ', account.getUserInfo());
        });
    }
}
exports.default = Switch;
Switch.description = 'Switch identity';
Switch.flags = {
    environment: command_1.flags.string({
        char: 'e',
        description: 'switch env',
        options: [...env_1.environment],
    }),
    tenant: command_1.flags.boolean({
        char: 't',
        description: 'switch tenant',
    }),
    help: command_1.flags.help({
        char: 'h',
    }),
};
Switch.examples = [['$ {{cli}} env switch feishu', 'switch env to feishu']];
