import test from 'ava';
import sinon from 'sinon';
import { createClient } from '../client';
import { id, createBaseConfigManager, createMergeConfigManager, noopBuilder, noopSender } from '../utils';
test('client.config', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({
            a: 123,
            b: 456,
        }); },
        validateInitConfig: function (obj) { return typeof obj === 'object'; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    // not inited
    t.is(client.config(), undefined);
    // config before init is ignored
    client.config({
        b: 789,
        c: 456,
    });
    t.is(client.config(), undefined);
    // set before init is ignored
    client.set({ bid: 'xxx' });
    t.is(client.config(), undefined);
    // start before init is ignored
    var onStart = sinon.fake();
    client.on('start', onStart);
    client.start();
    t.assert(onStart.notCalled);
    t.throws(function () {
        // invalid init config
        client.init('xxx');
    });
    client.init({});
    t.deepEqual(client.config(), {
        a: 123,
        b: 456,
    });
    client.config({
        b: 789,
        c: 456,
    });
    t.deepEqual(client.config(), {
        a: 123,
        b: 789,
        c: 456,
    });
    client.set({
        a: 789,
    });
    t.deepEqual(client.config(), {
        a: 789,
        b: 789,
        c: 456,
    });
});
test('client.normalize', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({
            abc: 'abc',
            cde: ['cde'],
        }); },
        validateInitConfig: function (c) { return 'userAbc' in c; },
        initConfigNormalizer: function (_a) {
            var userAbc = _a.userAbc, userCde = _a.userCde;
            return ({ abc: userAbc, cde: userCde });
        },
        userConfigNormalizer: function (_a) {
            var userCde = _a.userCde;
            return ({ cde: userCde });
        },
        createConfigManager: createMergeConfigManager,
    });
    // not inited
    t.is(client.config(), undefined);
    var err = t.throws(function () {
        client.init({ abc: 'userAbc' });
    });
    t.true(err.message.includes('init failed'));
    client.init({
        userAbc: 'userAbc',
        userCde: ['userCde'],
    });
    t.deepEqual(client.config(), { abc: 'userAbc', cde: ['cde', 'userCde'] });
    client.config({
        userCde: ['anotherCde'],
    });
    t.deepEqual(client.config(), { abc: 'userAbc', cde: ['cde', 'userCde', 'anotherCde'] });
});
test('client - no default config', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return false; },
        validateInitConfig: function (obj) { return typeof obj === 'object'; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    t.throws(function () {
        client.init({});
    });
});
test('client - no sender', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return false; },
        createDefaultConfig: function () { return ({
            a: 123,
            b: 456,
        }); },
        validateInitConfig: function (obj) { return typeof obj === 'object'; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    t.throws(function () {
        client.init({});
    });
});
//# sourceMappingURL=client.config.spec.js.map