export declare function omit<T extends object, K extends (keyof T)[]>(object: T, ...keys: K): Pick<T, Exclude<keyof T, K[number]>>;
export declare function hasKey<T>(object: T, key: string): boolean;
export declare type ObjectForInCallback<O> = (index: keyof O, item: O[keyof O]) => void;
export declare function objectForIn<O>(object: O, callback: ObjectForInCallback<O>): void;
export declare function filterObjectValueBy<T>(obj: Record<string, T>, p: (v: T) => boolean): Record<string, T>;
export declare function mergeDeepCopyArray<T>(...source: Partial<T>[]): T;
export declare function mergeDeepConcatArray<T>(...source: Partial<T>[]): T;
export declare function cloneArray<T extends any>(array: T[]): T[];
export declare function arrayIncludes<T>(array: T[], value: T): boolean;
export declare const arrayRemove: <T>(arr: T[], e: T) => T[];
export interface Visitor {
    (target: any, property: string): any;
}
/**
 * 按路径访问对象属性
 * @param target 待访问对象
 * @param property 访问属性路径
 * @param { (target: any, property: string): any } visitor 访问器
 */
export declare const safeVisit: (target: any, path: string, visitor: Visitor) => any;
export declare const safeSet: (target: any, path: string, value: any) => void;
/**
 *  按路径调用函数
 * @param target 待调用对象，如 `client`
 * @param methods 待调用方法路径，可能是一级路径 `client.start`, 或者是多级命令 `client.context.set`
 * @param args 调用参数
 */
export declare const safeCall: (target: any, method: string, args: any[]) => any;
/**
 *  按路径调用函数或获取值
 * @param target 待调用对象，如 `client`
 * @param methods 待调用方法路径或属性路径
 * @param args 调用参数
 */
export declare const safeCallOrGet: (target: any, method: string, args?: any[] | undefined) => any;
export declare const applyRecord: <K extends string | number | symbol, T>() => readonly [Record<K, T>, (key: K, val: T) => T, (key: K) => boolean];
export declare const pick: <T extends Record<string, unknown>, K extends (keyof T)[]>(obj: T, keys: K) => Pick<T, K[number]>;
