import fetch, { RequestInfo, RequestInit, Response } from 'node-fetch';

/** 属性描述没有properties的时候type可选的值 */
type PropertyTypeWithoutProperties = 'string' | 'number' | 'array' | 'boolean' | 'link' | 'timestamp';
/** 属性描述有properties的时候type可选的值 */
type PropertyTypeWithProperties = 'object';
/** properties的类型 */
type PropertiesDesc = {
    [p: string]: PropertiesDescValueType;
};
/** resultType根type必须为'object' */
interface ResultType {
    type: PropertyTypeWithProperties;
    properties: PropertiesDesc;
    structureType?: StructureType;
    displayBy?: AddonsDisplayOption | string;
}
/** 所有属性描述的公共类型 */
interface PropertiesDescBase {
    label: string;
    structureType?: StructureType;
    displayBy?: AddonsDisplayOption | string;
}
interface PropertiesDescWithPropertis extends PropertiesDescBase {
    type: PropertyTypeWithProperties;
    properties: PropertiesDesc;
}
interface PropertiesDescWithoutPropertis extends PropertiesDescBase {
    type: PropertyTypeWithoutProperties;
}
type PropertiesDescValueType = PropertiesDescWithPropertis | PropertiesDescWithoutPropertis;

type ToolTips = ({
    type: 'text';
    content: string;
} | {
    type: 'link';
    text: string;
    link: string;
})[] | undefined;

declare enum FieldType {
    NotSupport = 0,
    Text = 1,
    Number = 2,
    SingleSelect = 3,
    MultiSelect = 4,
    DateTime = 5,
    Checkbox = 7,
    User = 11,
    Phone = 13,
    Url = 15,
    Attachment = 17,
    SingleLink = 18,
    Lookup = 19,
    Formula = 20,
    DuplexLink = 21,
    Location = 22,
    GroupChat = 23,
    Stage = 24,
    Object = 25,
    Denied = 403,
    /**
     * 引用类型字段，前后端约定用10xx公共前缀开头
     */
    CreatedTime = 1001,
    ModifiedTime = 1002,
    CreatedUser = 1003,
    ModifiedUser = 1004,
    AutoNumber = 1005,
    VirtualTrigger = 3001,
    Barcode = 99001,
    Progress = 99002,
    Currency = 99003,
    Rating = 99004,
    Email = 99005
}
declare enum ParamType {
    Null = "null",
    Number = "number",
    /** 字符串类型，可用于多行文本、 */
    String = "string",
    Boolean = "boolean",
    Link = "link",
    /** 可用于日期、 */
    Timestamp = "timestamp",
    Array = "array",
    Object = "object"
}
type InputValue = string;
type ContactType = 'user' | 'group';
type ContactPickerValue = Array<{
    id: string;
    type: ContactType;
}>;
type DateTimePickerValue = number;
type SingleSelectValue = number | string;
type MultipleSelectValue = SingleSelectValue[];
type CheckboxValue = boolean;
interface Attachment {
    id: string;
    attachmentToken: string;
    name: string;
    mimeType: string;
    size: number;
    timeStamp: number;
    extra?: string;
}
type AttachmentValue = Attachment[];
declare enum Component {
    /** 输入框组件 */
    Input = "TextEditor",
    /** 日期组件 */
    DateTimePicker = "DateTimeInput",
    /** 人员组件 */
    ContactPicker = "UserSelect",
    /** 展开收起组件 */
    Collapse = "Collapse",
    /** 多选框 */
    Checkbox = "CheckboxInput",
    /** 提示组件 */
    Tips = "InfoTips",
    /** @deprecated 不再推荐使用这个组件，请使用Input组件的"多维表格变量"功能替代; This component is no longer recommended, please use the multidimensional table variable function of the Input component instead */
    TableSelect = "TableSelect",
    /** @deprecated 不再推荐使用这个组件，请使用Input组件的"多维表格变量"功能替代; This component is no longer recommended, please use the multidimensional table variable function of the Input component instead */
    TableViewSelect = "TableViewSelect",
    /** 下拉单选组件 */
    SingleSelect = "SingleSelect",
    /** 下拉多选组件 */
    MultipleSelect = "MultipleSelect",
    /** 附件选择组件 */
    Attachment = "AttachmentInput",
    /** 单选框 */
    Radio = "Radio",
    /** 键值对组件 */
    KeyValuePair = "KeyValuePair"
}
declare enum FieldComponentEnum {
    Input = "TextEditor",
    SingleSelect = "SingleSelect",
    /** 下拉多选组件 */
    MultipleSelect = "MultipleSelect",
    Radio = "Radio",
    TableSelect = "TableSelect",
    FieldSelect = "FieldSelect"
}
interface DateTimePicker extends FormItem {
    component: Component.DateTimePicker;
}
interface Checkbox extends FormItem {
    component: Component.Checkbox;
}
/** @deprecated 不再推荐使用这个组件，请使用Input组件的"多维表格变量"功能替代; This component is no longer recommended, please use the multidimensional table variable function of the Input component instead */
interface TableSelect extends FormItem {
    component: Component.TableSelect;
}
interface KeyValuePairs extends FormItem {
    component: Component.KeyValuePair;
    componentProps?: {
        /** max limit */
        itemsLimit?: number;
        /** “Add button” */
        addText?: string;
        /** key placeholder */
        keyText?: string;
        /** value placeholder */
        valueText?: string;
    };
}
/** @deprecated 不再推荐使用这个组件，请使用Input组件的"多维表格变量"功能替代; This component is no longer recommended, please use the multidimensional table variable function of the Input component instead */
interface TableViewSelect extends FormItem {
    component: Component.TableViewSelect;
}
interface Radio extends FormItem {
    component: Component.Radio;
    group?: string[];
    componentProps: {
        placeholder?: string;
        defaultValue?: string;
        options: Array<{
            value: string;
            label: string;
        }>;
    };
}
declare enum StructureType {
    User = "user",
    Group = "group",
    Attachment = "attachment",
    Options = "options"
}
type TLink = {
    type: 'link';
    value: string;
    link: string;
};
type TIcon = {
    type: 'icon';
    value?: string;
    /** URL that the hyperlink points to */
    link?: string;
    /** URL of the icon  */
    src: string;
};
type THighlight = {
    type: 'highlight';
    value: string;
    color: string;
};
type TParam = {
    [key: string]: TLink | TIcon | THighlight;
};
type TOjbectResult = {
    text: string;
    param: TParam;
};
type TResult = string | TOjbectResult;
declare enum TriggerType {
    AddRecord = "AddRecordTrigger",
    SetRecord = "SetRecordTrigger",
    ChangeRecord = "ChangeRecordTrigger",
    Timer = "TimerTrigger",
    Reminder = "ReminderTrigger",
    Button = "ButtonTrigger"
}
interface App {
    logID: string;
    token: string;
    timeZone: string;
    url: string;
    trigger: {
        type: TriggerType;
        tableID?: string;
        recordID?: string;
    };
}
interface Context {
    app: App;
    /**
     * @deprecated `context.bitable` is deprecated and should not be used anymore.
     * Use `context.app` instead.
     */
    bitable?: App;
    authorization?: {
        type: string;
        token?: string;
    };
    packID: string;
    extensionID: string;
    tenantAccessToken: string;
    tenantKey: string;
    fetch: (url: RequestInfo, init?: RequestInit) => Promise<Response>;
}
interface FieldContext {
    /** 签名数据，与packID配合使用，可以在服务端验证请求是否来自此捷径，详见开发指南 “捷径流量标识” https://bytedance.larkoffice.com/docx/B2W2di5Zeov1OgxBprhcqAP9n6c */
    baseSignature: string;
    /** 多维表格的id，仅用于区分多维表格，无法通过此id定位到某一具体多维表格。 */
    baseID: string;
    /** 表格的id，在baseID下可以定位到某个具体的数据表 */
    tableID: string;
    /** 此捷径的ID */
    packID: string;
    /** 表格owner租户id，可用于计费 */
    tenantKey: string;
    logID: string;
    token: string;
    timeZone: string;
    /** 档owner用户在捷径字段场景下的唯一标识 */
    baseOwnerID: string;
    fetch: (url: RequestInfo, init?: RequestInit, authorizationId?: string) => Promise<Response>;
    /** 是否接入feishu付费体系 */
    isNeedPayPack: boolean;
    /** 是否具有feishu付费体系权益，当它为false，且isNeedPayPack为true的时候，插件可以返回FieldCode.FeishuPaidBenefitsExhausted，以通知使用者 */
    hasQuota: boolean;
}
interface AutocompleteResult {
    options: Array<{
        label: string;
        value: string | number;
    }>;
    isPaginated?: boolean;
    isLastPage?: boolean;
    nextPageRequestData?: unknown;
}
interface AutoCompletePayload {
    itemId: string;
    nextPageRequestData: unknown;
    keyword: string;
    lang: 'zh-CN' | 'en-US' | 'ja-JP' | 'zh-HK' | 'zh-TW';
}
interface AddonsDisplayOption {
    itemId: string;
    value: string | string[];
}
interface FormItem {
    itemId: string;
    label: string;
    /** 提示信息，展示在label右侧 */
    tooltip?: TResult;
    /** 帮助信息，展示在组件下方 */
    help?: TResult;
    required?: boolean;
    paramType?: ParamType;
    structureType?: StructureType;
    displayBy?: AddonsDisplayOption | string;
}
type AutocompleteFn = (args: {
    [key: string]: any;
}, context: Context, payload: AutoCompletePayload) => Promise<AutocompleteResult>;
interface AutocompleteFormItem extends FormItem {
    autocomplete?: AutocompleteFn;
    /** 其他formItem的itemId，把它们写进来，可以将它们收束到本组件下方 */
    group?: string[];
    component: Component.SingleSelect | Component.MultipleSelect;
}
interface Input extends FormItem {
    componentProps?: {
        placeholder?: string;
        mode?: 'textarea';
    };
    component: Component.Input;
}
interface ContactPicker extends FormItem {
    componentProps?: {
        placeholder?: string;
        /** 选择类型，默认人员和群都可选 */
        supportTypes?: Array<ContactType>;
        /** 外部人员和群的选择类型，默认外部人员和群都可选 */
        supportCrossTypes?: Array<ContactType>;
        /** 能否多选，默认为 multiple */
        mode: 'single' | 'multiple';
        /** 能否引用上一步，默认为 true */
        canQuotePrevStep?: boolean;
    };
    component: Component.ContactPicker;
}
interface SingleSelect extends AutocompleteFormItem {
    componentProps: {
        placeholder?: string;
        options: Array<{
            value: string;
            label: string;
        }>;
    };
    component: Component.SingleSelect;
}
interface MultipleSelect extends AutocompleteFormItem {
    componentProps: {
        options: Array<{
            value: string;
            label: string;
        }>;
    };
    component: Component.MultipleSelect;
}
interface AttachmentFormItem extends FormItem {
    componentProps?: {
        placeholder?: string;
    };
    component: Component.Attachment;
}
interface Tips {
    itemId: string;
    component: Component.Tips;
    componentProps: {
        message: string;
    };
}
interface Collapse {
    itemId: string;
    component: Component.Collapse;
    componentProps: {
        /** 其他选项的itemId，默认将会隐藏它们，点击即本组件可隐藏/显示它们 */
        displayItems: string[];
    };
}
declare enum NextStep {
    LarkMessage = "LarkMessageAction",
    AddRecord = "AddRecordAction",
    SetRecord = "SetRecordAction",
    FindRecord = "FindRecordAction",
    HTTPClient = "HTTPClientAction"
}
interface ComponentAuthorization extends Omit<FormItem, 'itemId' | 'label'> {
    label?: string;
    componentProps?: {
        placeholder?: string;
    };
}
/** formItems所有可用的组件中的非表单组件 */
type NotFormItemsComponents = Tips | Collapse;
type AllComponents = Input | ContactPicker | NotFormItemsComponents | SingleSelect | MultipleSelect | AttachmentFormItem | DateTimePicker | Checkbox | TableSelect | Radio | KeyValuePairs | TableViewSelect;
type FormItems = AllComponents[];
interface Action {
    description?: TResult;
    actionText?: string;
    permission?: {
        readonly type: 0 | 1 | 2;
    };
    useTenantAccessToken?: boolean;
    authorization?: {
        type: 'OAuth2' | 'APIKey';
        formItem?: ComponentAuthorization;
    };
    /** 扩展的配置表单 */
    formItems: FormItems;
    /** 扩展调用apiHub接口的顺序和参数 */
    execute: (args: {
        [key: string]: any;
    }, context: Context) => Promise<object>;
    /** 扩展出参，用于给后续Action消费 */
    resultType: ResultType;
    /** 新增自动化流程时，需要同步新增的节点 */
    nextSteps?: Array<NextStep>;
}
interface I18N {
    /** 默认语言环境 */
    defaultLocale?: string;
    messages: {
        [key: string]: object;
    };
}
interface IOption {
    name: string;
}
declare enum NumberFormatter {
    INTEGER = "0",
    DIGITAL_ROUNDED_1 = "0.0",
    DIGITAL_ROUNDED_2 = "0.00",
    DIGITAL_ROUNDED_3 = "0.000",
    DIGITAL_ROUNDED_4 = "0.0000",
    DIGITAL_THOUSANDS = "1,000",
    DIGITAL_THOUSANDS_DECIMALS = "1,000.00",
    PERCENTAGE_ROUNDED = "0%",
    PERCENTAGE = "0.00%"
}
declare enum DateFormatter {
    DATE_YMD_WITH_SLASH = "yyyy/MM/dd",
    DATE_TIME = "yyyy/MM/dd HH:mm",
    DATE_TIME_WITH_HYPHEN = "yyyy-MM-dd HH:mm",
    DATE_YMD_WITH_HYPHEN = "yyyy-MM-dd",
    DATE_MD_WITH_HYPHEN = "MM-dd",
    DATE_MMDD_WITH_SLASH = "MM/dd/yyyy",
    DATE_DDMM_WITH_SLASH = "dd/MM/yyyy"
}
type Property = {
    key: string;
    isGroupByKey: true;
    type: FieldType.Text;
    /** @deprecated 改用label  */
    title?: string;
    label: string;
    hidden?: boolean;
    primary?: true;
} | {
    key: string;
    type: FieldType.Text | FieldType.Number;
    primary: true;
    /** @deprecated 改用label  */
    title?: string;
    label: string;
    extra?: {
        formatter: NumberFormatter;
    };
} | {
    key: string;
    type: FieldType;
    /** @deprecated 改用label */
    title?: string;
    label: string;
    hidden?: boolean;
    primary?: never;
    isGroupByKey?: never;
    extra?: {
        options: IOption[];
    } | {
        formatter: NumberFormatter;
    } | {
        dateFormat: DateFormatter;
    };
};
type FieldResultType = {
    type: FieldType.Object;
    extra: {
        tips?: {
            imageUrl?: {
                light: string;
                dark?: string;
            };
            desc?: string;
        };
        icon: {
            light: string;
            dark?: string;
        };
        properties: Property[];
    };
} | {
    type: FieldType.Attachment;
} | {
    /** 对应execute函数返回值的data为null / 字符串 */
    type: FieldType.Text;
} | {
    /** 对应execute函数返回值的data为null / 毫秒时间戳 */
    type: FieldType.DateTime;
    extra?: {
        formatter: DateFormatter;
    };
} | {
    /** 对应execute函数返回值的data为null / 数字 */
    type: FieldType.Number;
    extra?: {
        formatter: NumberFormatter;
    };
} | {
    /** 对应execute函数返回值的data为null / 字符串数组 */
    type: FieldType.MultiSelect;
    extra?: {
        options: IOption[];
    };
} | {
    /** 对应execute函数返回值的data为null / 字符串 */
    type: FieldType.SingleSelect;
    extra?: {
        options: IOption[];
    };
};
declare enum FieldComponent {
    SingleSelect = "SingleSelect",
    Input = "Text",
    Radio = "Radio",
    FieldSelect = "FieldSelect",
    MultipleSelect = "MultipleSelect",
    TableSelect = "TableSelect"
}
interface IFormItem {
    component: FieldComponent;
    validator?: {
        required?: boolean;
        maxLength?: number;
        minLength?: number;
        maxItems?: number;
        minItems?: number;
    };
    tooltips?: ToolTips;
    key: string;
    label: string;
    props: Record<string, unknown>;
    defaultValue?: unknown;
}
declare enum FieldCode {
    Success = 0,
    /** 尽量用对应的错误码，而不是这个通用的错误码 */
    Error = 1254500,
    ConfigError = 1254400,
    /** 参数无效 */
    InvalidArgument = 1254406,
    AuthorizationError = 1254403,
    PayError = 1254505,
    RateLimit = 1254404,
    /** quota耗尽 */
    QuotaExhausted = 1254405,
    /** 付费权益耗尽（feishu付费体系，根据execute入参的hasQuota字段为false时返回此错误码） */
    FeishuPaidBenefitsExhausted = 1254506
}
declare enum AuthorizationType {
    HeaderBearerToken = "HeaderBearerToken",
    Basic = "Basic",
    CustomHeaderToken = "CustomHeaderToken",
    MultiHeaderToken = "MultiHeaderToken",
    QueryParamToken = "QueryParamToken",
    MultiQueryParamToken = "MultiQueryParamToken",
    Custom = "Custom",
    OAuth2 = "OAuth2"
}
interface CommonAuthorization {
    /** 授权的唯一标识 */
    id: string;
    /** 授权的文案，用于告知用户是输入什么平台的凭证信息 */
    label: string;
    /** 要和哪个平台进行授权连接？ */
    platform: string;
    /**
     * @deprecated
     * */
    isRequired?: boolean;
    /** 默认为true。如果设置为false，捷径使用者则可选择不填写授权信息。如果使用者未填写授权信息，则请求中也不会带上授权信息 */
    required?: boolean;
    /** 可选的提示 */
    tooltips?: ToolTips;
    /** 授权对象的icon */
    icon: {
        /** light模式 */
        light: string;
        dark: string;
    };
}
interface HeaderBearerTokenAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.HeaderBearerToken;
}
interface QueryParamTokenAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.QueryParamToken;
    params: {
        paramName: string;
    };
}
interface CustomHeaderTokenAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.CustomHeaderToken;
    params: {
        headerName: string;
    };
}
interface MultiHeaderTokenAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.MultiHeaderToken;
    params: {
        key: string;
        placeholder?: string;
    }[];
}
interface CustomAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.Custom;
    params: {
        key: string;
        placeholder?: string;
    }[];
}
interface MultiQueryParamTokenAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.MultiQueryParamToken;
    params: {
        key: string;
        placeholder?: string;
    }[];
}
interface OAuth2Authorization extends CommonAuthorization {
    type: AuthorizationType.OAuth2;
    /** 传给OAuth2授权端点的一些数据 */
    authorizationInputData: {
        key: string;
        value: string;
        /** 是否被npm run encrypt加密后的数据 */
        isEncrypt: boolean;
    }[];
}
interface BasicAuthorization extends CommonAuthorization {
    /** 告诉用户如何填写授权信息的地址 */
    instructionsUrl: string;
    type: AuthorizationType.Basic;
    params?: {
        usernamePlaceholder: string;
        passwordPlaceholder: string;
    };
}
type Authorization = HeaderBearerTokenAuthorization | OAuth2Authorization | BasicAuthorization | CustomHeaderTokenAuthorization | MultiHeaderTokenAuthorization | QueryParamTokenAuthorization | MultiQueryParamTokenAuthorization | CustomAuthorization;
type Authorizations = Authorization[];
interface FieldOptions {
    disableAutoUpdate?: boolean;
}
interface Field {
    domainList?: string[];
    authorizations?: Authorizations;
    i18n?: {
        messages: {
            [key: string]: object;
        };
    };
    formItems: IFormItem[];
    execute: (params: {
        [key: string]: any;
    }, context: FieldContext) => Promise<object>;
    resultType: FieldResultType;
    options?: FieldOptions;
}
declare class Basekit {
    action?: Action;
    field?: Field;
    i18n?: I18N;
    domainList?: string[];
    addDomainList(domainList: string[]): void;
    addAction(action: Action): void;
    addField(field: Field): void;
    setI18n(i18n: I18N): void;
}
declare const basekit: Basekit;
declare const field: {
    t(key: string): string;
};
/**
 * @deprecated This instance is deprecated and should not be used anymore.
 * Use `basekit` instead.
 */
declare const bitable: Basekit;
/**
 * @deprecated This instance is deprecated and should not be used anymore.
 * Use `basekit` instead.
 */
declare const base: Basekit;
/**
 * @deprecated This function is deprecated and should not be used anymore.
 * Use `basekit` instead.
 */
declare function newPack(): Basekit;
declare function testAction(args: {
    [key: string]: any;
}, context: Context): Promise<object | undefined>;
declare function testField(args: {
    [key: string]: unknown;
}, context: FieldContext): Promise<object | undefined>;
declare function testActionAutocomplete(args: {
    [key: string]: any;
}, context: Context, payload: AutoCompletePayload): Promise<void>;
/**
 * @deprecated This function is deprecated and should not be used anymore.
 * Use testAction instead.
 */
declare const execute: typeof testAction;
declare function createFieldContext(context?: Partial<FieldContext>): Promise<{
    logID: string;
    timeZone: string;
    tenantKey: string;
    fetch: typeof fetch;
} & Partial<FieldContext>>;
declare function createActionContext(context?: Partial<Context>): Promise<Context>;
declare function t(key: string): string;
declare function t(key: string, param?: TParam): TOjbectResult;
interface SimpleAttachment {
    name: string;
    mimeType?: string;
    file: Buffer;
}
interface CreateAttachmentsOptions {
    context: Context;
    env: 'feishu' | 'lark' | string;
    retry?: number;
}
declare function uploadAttachments(attachments: SimpleAttachment[], options: CreateAttachmentsOptions): Promise<Attachment[]>;
declare function generateOptions(options: Array<string>): Array<{
    name: string;
}>;
interface GetBasekitUrlOptions {
    url: string;
    tableId: string;
    viewId: string;
    recordId?: string;
    fieldId?: string;
}
/**
 * option中的参数会覆盖url中已有的参数:table,record,field,view
 * @param option
 * @returns
 */
declare function getBasekitUrl(option: GetBasekitUrlOptions): string;
declare function createFetch(authorizations: Authorizations | undefined, domainList: string[]): (url: RequestInfo, init?: RequestInit, id?: string) => Promise<Response>;

export { Action, AddonsDisplayOption, AllComponents, AttachmentFormItem, AttachmentValue, Authorization, AuthorizationType, Authorizations, AutocompleteFormItem, Basekit, CheckboxValue, Collapse, Component, ComponentAuthorization, ContactPicker, ContactPickerValue, Context, DateFormatter, DateTimePickerValue, Field, FieldCode, FieldComponent, FieldComponentEnum, FieldContext, FieldOptions, FieldResultType, FieldType, FormItem, FormItems, GetBasekitUrlOptions, I18N, IFormItem, Input, InputValue, MultipleSelect, MultipleSelectValue, NextStep, NotFormItemsComponents, NumberFormatter, OAuth2Authorization, ParamType, Property, SingleSelect, SingleSelectValue, StructureType, Tips, TriggerType, base, basekit, bitable, createActionContext, createFetch, createFieldContext, execute, field, generateOptions, getBasekitUrl, newPack, t, testAction, testActionAutocomplete, testField, uploadAttachments };
