import test from 'ava';
import { getPluginConfig } from '../utils';
var mockDefaultConfig = {
    b: 'bv2',
    c: 'cv',
};
test('should merge config, if config is object', function (t) {
    var mockClient = {
        config: function () {
            return {
                plugins: {
                    pn: {
                        a: 'av',
                        b: 'bv',
                    },
                },
            };
        },
    };
    var config = getPluginConfig(mockClient, 'pn', mockDefaultConfig);
    t.deepEqual(config, {
        a: 'av',
        b: 'bv',
        c: 'cv',
    });
});
test('should return default config, if plugin config is truthy', function (t) {
    var mockClient = {
        config: function () {
            return {
                plugins: {
                    pn: 'aaaa',
                },
            };
        },
    };
    var config = getPluginConfig(mockClient, 'pn', mockDefaultConfig);
    t.is(mockDefaultConfig, config);
});
test('should return default config, if plugin config is falsy', function (t) {
    var mockClient = {
        config: function () {
            return {
                plugins: {
                    pn: undefined,
                },
            };
        },
    };
    var config = getPluginConfig(mockClient, 'pn', mockDefaultConfig);
    t.false(config);
});
//# sourceMappingURL=utils.spec.js.map