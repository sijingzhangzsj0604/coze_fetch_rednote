"use strict";
/** ******************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeRequire = exports.isDevelopment = exports.isElectronNode = exports.isElectronRenderer = exports.isElectronEnv = exports.isNodeIntegrated = exports.OS = exports.cmd = void 0;
const platform_1 = require("./platform");
function cmd(command, ...args) {
    return [platform_1.isWindows ? 'cmd' : command, platform_1.isWindows ? ['/c', command, ...args] : args];
}
exports.cmd = cmd;
var OS;
(function (OS) {
    let Type;
    (function (Type) {
        Type[Type["Windows"] = 1] = "Windows";
        Type[Type["Linux"] = 3] = "Linux";
        Type[Type["OSX"] = 2] = "OSX";
    })(Type = OS.Type || (OS.Type = {}));
    function type() {
        if (platform_1.isWindows) {
            return platform_1.OperatingSystem.Windows;
        }
        if (platform_1.isMacintosh) {
            return platform_1.OperatingSystem.Macintosh;
        }
        return platform_1.OperatingSystem.Linux;
    }
    OS.type = type;
})(OS = exports.OS || (exports.OS = {}));
function isNodeIntegrated() {
    return typeof module !== 'undefined' && !!module.exports;
}
exports.isNodeIntegrated = isNodeIntegrated;
function isElectronEnv() {
    return isElectronRenderer() || isElectronNode();
}
exports.isElectronEnv = isElectronEnv;
/**
 * @deprecated isElectronRenderer will be removed in v2.26, please use appConfig#isElectronRenderer instead.
 */
function isElectronRenderer() {
    return (global.isElectronRenderer ||
        (typeof navigator === 'object' &&
            typeof navigator.userAgent === 'string' &&
            navigator.userAgent.indexOf('Electron') >= 0));
}
exports.isElectronRenderer = isElectronRenderer;
function isElectronNode() {
    return process && process.env && !!process.env.ELECTRON_RUN_AS_NODE;
}
exports.isElectronNode = isElectronNode;
function isDevelopment() {
    return global.isDev || (process && process.env.IS_DEV);
}
exports.isDevelopment = isDevelopment;
// https://github.com/webpack/webpack/issues/4175#issuecomment-342931035
function getNodeRequire() {
    return typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require;
}
exports.getNodeRequire = getNodeRequire;
//# sourceMappingURL=os.js.map