{"version":3,"sources":["../../src/factories/createInternalHttpTerminator.js"],"names":["log","Logger","child","namespace","configurationDefaults","gracefulTerminationTimeout","configurationInput","configuration","server","sockets","Set","secureSockets","terminating","on","socket","destroy","add","once","delete","destroySocket","http","Server","terminate","warn","resolveTerminating","rejectTerminating","Promise","resolve","reject","incomingMessage","outgoingMessage","headersSent","setHeader","serverResponse","_httpMessage","size","close","error"],"mappings":"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","sourcesContent":["// @flow\n\nimport http from 'http';\nimport delay from 'delay';\nimport type {\n  HttpTerminatorConfigurationInputType,\n  InternalHttpTerminatorType,\n} from '../types';\nimport Logger from '../Logger';\n\nconst log = Logger.child({\n  namespace: 'createHttpTerminator',\n});\n\nconst configurationDefaults = {\n  gracefulTerminationTimeout: 1000,\n};\n\nexport default (configurationInput: HttpTerminatorConfigurationInputType): InternalHttpTerminatorType => {\n  const configuration = {\n    ...configurationDefaults,\n    ...configurationInput,\n  };\n\n  const server = configuration.server;\n\n  const sockets = new Set();\n  const secureSockets = new Set();\n\n  let terminating;\n\n  server.on('connection', (socket) => {\n    if (terminating) {\n      socket.destroy();\n    } else {\n      sockets.add(socket);\n\n      socket.once('close', () => {\n        sockets.delete(socket);\n      });\n    }\n  });\n\n  server.on('secureConnection', (socket) => {\n    if (terminating) {\n      socket.destroy();\n    } else {\n      secureSockets.add(socket);\n\n      socket.once('close', () => {\n        secureSockets.delete(socket);\n      });\n    }\n  });\n\n  /**\n   * Evaluate whether additional steps are required to destroy the socket.\n   *\n   * @see https://github.com/nodejs/node/blob/57bd715d527aba8dae56b975056961b0e429e91e/lib/_http_client.js#L363-L413\n   */\n  const destroySocket = (socket) => {\n    socket.destroy();\n\n    if (socket.server instanceof http.Server) {\n      sockets.delete(socket);\n    } else {\n      secureSockets.delete(socket);\n    }\n  };\n\n  const terminate = async () => {\n    if (terminating) {\n      log.warn('already terminating HTTP server');\n\n      return terminating;\n    }\n\n    let resolveTerminating;\n    let rejectTerminating;\n\n    terminating = new Promise((resolve, reject) => {\n      resolveTerminating = resolve;\n      rejectTerminating = reject;\n    });\n\n    server.on('request', (incomingMessage, outgoingMessage) => {\n      if (!outgoingMessage.headersSent) {\n        outgoingMessage.setHeader('connection', 'close');\n      }\n    });\n\n    for (const socket of sockets) {\n      // This is the HTTP CONNECT request socket.\n      if (!(socket.server instanceof http.Server)) {\n        continue;\n      }\n\n      // $FlowFixMe\n      const serverResponse = socket._httpMessage;\n\n      if (serverResponse) {\n        if (!serverResponse.headersSent) {\n          serverResponse.setHeader('connection', 'close');\n        }\n\n        continue;\n      }\n\n      destroySocket(socket);\n    }\n\n    for (const socket of secureSockets) {\n      // $FlowFixMe\n      const serverResponse = socket._httpMessage;\n\n      if (serverResponse) {\n        if (!serverResponse.headersSent) {\n          serverResponse.setHeader('connection', 'close');\n        }\n\n        continue;\n      }\n\n      destroySocket(socket);\n    }\n\n    if (sockets.size) {\n      await delay(configuration.gracefulTerminationTimeout);\n\n      for (const socket of sockets) {\n        destroySocket(socket);\n      }\n    }\n\n    if (secureSockets.size) {\n      await delay(configuration.gracefulTerminationTimeout);\n\n      for (const socket of secureSockets) {\n        destroySocket(socket);\n      }\n    }\n\n    server.close((error) => {\n      if (error) {\n        rejectTerminating(error);\n      } else {\n        resolveTerminating();\n      }\n    });\n\n    return terminating;\n  };\n\n  return {\n    secureSockets,\n    sockets,\n    terminate,\n  };\n};\n"],"file":"createInternalHttpTerminator.js"}