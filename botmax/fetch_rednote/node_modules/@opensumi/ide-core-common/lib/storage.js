"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoragePaths = exports.DefaultStorageProvider = exports.STORAGE_NAMESPACE = exports.STORAGE_SCHEMA = exports.StorageResolverContribution = exports.StorageProvider = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@opensumi/di");
const ide_utils_1 = require("@opensumi/ide-utils");
const contribution_provider_1 = require("./contribution-provider");
exports.StorageProvider = Symbol('StorageProvider');
exports.StorageResolverContribution = Symbol('StorageResolverContribution');
exports.STORAGE_SCHEMA = {
    SCOPE: 'wsdb',
    GLOBAL: 'gldb',
};
// 在该对象定义的存储对象在初始化阶段时将默认通过 LocalStorage 缓存
// ref: https://github.com/opensumi/core/blob/f512897d691f1aa0d89ff6469ff2251ab2124f71/packages/storage/src/browser/storage.contribution.ts#L49
exports.STORAGE_NAMESPACE = {
    // workspace database
    WORKBENCH: new ide_utils_1.URI('workbench').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    EXTENSIONS: new ide_utils_1.URI('extensions').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    EXPLORER: new ide_utils_1.URI('explorer').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    LAYOUT: new ide_utils_1.URI('layout').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    RECENT_DATA: new ide_utils_1.URI('recent').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    DEBUG: new ide_utils_1.URI('debug').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    OUTLINE: new ide_utils_1.URI('outline').withScheme(exports.STORAGE_SCHEMA.SCOPE),
    // global database
    GLOBAL_LAYOUT: new ide_utils_1.URI('layout-global').withScheme(exports.STORAGE_SCHEMA.GLOBAL),
    GLOBAL_EXTENSIONS: new ide_utils_1.URI('extensions').withScheme(exports.STORAGE_SCHEMA.GLOBAL),
    GLOBAL_RECENT_DATA: new ide_utils_1.URI('recent').withScheme(exports.STORAGE_SCHEMA.GLOBAL),
};
let DefaultStorageProvider = class DefaultStorageProvider {
    constructor() {
        this.storageCacheMap = new Map();
    }
    /**
     * 返回对应storageId的Storage类
     */
    async get(storageId) {
        if (this.storageCacheMap.has(storageId.toString())) {
            return this.storageCacheMap.get(storageId.toString());
        }
        const resolvers = this.resolversProvider.getContributions();
        return Promise.race(resolvers.map(async (resolver) => {
            const storageResolver = await resolver.resolve(storageId);
            if (storageResolver) {
                this.storageCacheMap.set(storageId.toString(), storageResolver);
                return storageResolver;
            }
        }));
    }
};
tslib_1.__decorate([
    (0, di_1.Autowired)(exports.StorageResolverContribution),
    tslib_1.__metadata("design:type", Object)
], DefaultStorageProvider.prototype, "resolversProvider", void 0);
DefaultStorageProvider = tslib_1.__decorate([
    (0, di_1.Injectable)()
], DefaultStorageProvider);
exports.DefaultStorageProvider = DefaultStorageProvider;
var StoragePaths;
(function (StoragePaths) {
    StoragePaths.WINDOWS_APP_DATA_DIR = 'AppData';
    StoragePaths.WINDOWS_ROAMING_DIR = 'Roaming';
    // 可通过AppConfig配置替换，目前仅作为默认值使用
    StoragePaths.DEFAULT_STORAGE_DIR_NAME = '.sumi';
    StoragePaths.DEFAULT_DATA_DIR_NAME = 'datas';
    StoragePaths.MARKETPLACE_DIR = 'extensions';
    StoragePaths.EXTENSIONS_LOGS_DIR = 'extensions';
    StoragePaths.EXTENSIONS_GLOBAL_STORAGE_DIR = 'extension-storage';
    StoragePaths.EXTENSIONS_WORKSPACE_STORAGE_DIR = 'workspace-storage';
})(StoragePaths = exports.StoragePaths || (exports.StoragePaths = {}));
//# sourceMappingURL=storage.js.map