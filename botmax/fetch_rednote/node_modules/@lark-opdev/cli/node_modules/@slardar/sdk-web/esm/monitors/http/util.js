import { __read } from "tslib";
import { getRegexp } from '@slardar/sdk-template';
import { applyPerformance } from '../../utils';
var headerKeyRe = new RegExp('(cookie|auth|jwt|token|key|ticket|secret|credential|session|password)', 'i');
var headerValueRe = new RegExp('(bearer|session)', 'i');
export var getGetLatestEntryByName = function (performance) {
    var _a = __read(applyPerformance(performance), 5), getEntriesByName = _a[4];
    return function (name) {
        return getEntriesByName(name).pop();
    };
};
export var checkIsIgnored = function (ignoreUrls, url) {
    var ignoreRgx = getRegexp(ignoreUrls || []);
    return !!ignoreRgx && ignoreRgx.test(url);
};
export var isSensitiveHeader = function (key, value) {
    if (!key || !value)
        return false;
    return headerKeyRe.test(key) || headerValueRe.test(value);
};
export var applySendOnce = function (cb) {
    var hasInvoked = false;
    return function (metric) {
        if (hasInvoked)
            return;
        hasInvoked = true;
        cb(metric);
    };
};
//# sourceMappingURL=util.js.map