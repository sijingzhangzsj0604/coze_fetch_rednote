/// <reference types="packages/refactor/modules/simulator/webClient/preload/ttTypes" />
interface ExtraAPI {
    exitMiniProgram: 'exitMiniProgram';
    filePicker: 'filePicker';
    showRichText: 'showRichText';
    operateAudio: 'operateAudio';
    emitReload: 'emitReload';
    enableAccelerometer: 'enableAccelerometer';
    operateRecorder: 'operateRecorder';
    showDebugger: 'showDebugger';
    hideDebugger: 'hideDebuggger';
    insertHTMLWebView: 'insertHTMLWebView';
    removeHTMLWebView: 'removeHTMLWebView';
    updateHTMLWebView: 'updateHTMLWebView';
    saveFileAs: 'saveFileAs';
    openSchema: 'openSchema';
    sessionExpired: 'sessionExpired';
}
export declare type InvokeNames = Exclude<keyof tt.API, keyof ExtraAPI> | keyof ExtraAPI;
declare type BackByFn<F> = F extends (args: infer P) => infer T ? P extends {
    success?: (p: infer S) => any;
    fail?: (p: infer F) => any;
} ? Promise<S | F> : T : void;
declare type ApiKey = keyof tt.API;
export declare type Back<N extends InvokeNames> = N extends ApiKey ? BackByFn<tt.API[N]> : never;
export declare type SyncBack<N extends InvokeNames> = Back<N> extends Promise<any> ? void : Back<N>;
declare type HandlerParam<H> = H extends (arg: infer P) => any ? P : any;
declare type BaseParam<N extends InvokeNames> = N extends ApiKey ? HandlerParam<tt.API[N]> : never;
declare type ParamPick<P> = Pick<P, Exclude<keyof P, 'success' | 'fail' | 'complete'>>;
export declare type Param<N extends InvokeNames> = BaseParam<N> extends object ? ParamPick<BaseParam<N>> : BaseParam<N>;
export interface Handler<K extends InvokeNames> {
    (param: Param<K>, callbackId: number): Back<K> | void;
}
export declare type TTApiMap = {
    [K in InvokeNames]: Handler<K>;
};
export {};
