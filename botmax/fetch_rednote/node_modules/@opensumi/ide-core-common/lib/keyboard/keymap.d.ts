export interface IWindowsKeyboardMapping {
    [code: string]: IWindowsKeyMapping;
}
export interface IWindowsKeyMapping {
    vkey: string;
    value: string;
    withShift: string;
    withAltGr: string;
    withShiftAltGr: string;
}
export interface IWindowsKeyboardLayoutInfo {
    name: string;
    id: string;
    text: string;
}
export interface ILinuxKeyboardLayoutInfo {
    model: string;
    layout: string;
    variant: string;
    options: string;
    rules: string;
}
export interface IMacKeyboardLayoutInfo {
    id: string;
    localizedName?: string;
    lang: string;
}
export interface IWindowsKeyboardLayoutInfo {
    name: string;
    id: string;
    text: string;
}
export type IKeyboardLayoutInfo = (IWindowsKeyboardLayoutInfo | ILinuxKeyboardLayoutInfo | IMacKeyboardLayoutInfo) & {
    isUserKeyboardLayout?: boolean;
    isUSStandard?: true;
};
export interface ISerializedMapping {
    [key: string]: (string | number)[];
}
export interface IKeymapInfo {
    layout: IKeyboardLayoutInfo;
    secondaryLayouts: IKeyboardLayoutInfo[];
    mapping: ISerializedMapping;
    isUserKeyboardLayout?: boolean;
}
export interface IRawMixedKeyboardMapping {
    [key: string]: {
        value: string;
        withShift: string;
        withAltGr: string;
        withShiftAltGr: string;
        valueIsDeadKey?: boolean;
        withShiftIsDeadKey?: boolean;
        withAltGrIsDeadKey?: boolean;
        withShiftAltGrIsDeadKey?: boolean;
    };
}
export declare function getKeyboardLayoutId(layout: IKeyboardLayoutInfo): string;
export declare class KeymapInfo {
    layout: IKeyboardLayoutInfo;
    secondaryLayouts: IKeyboardLayoutInfo[];
    mapping: IRawMixedKeyboardMapping;
    isUserKeyboardLayout: boolean;
    constructor(layout: IKeyboardLayoutInfo, secondaryLayouts: IKeyboardLayoutInfo[], keyboardMapping: ISerializedMapping, isUserKeyboardLayout?: boolean);
    static createKeyboardLayoutFromDebugInfo(layout: IKeyboardLayoutInfo, value: IRawMixedKeyboardMapping, isUserKeyboardLayout?: boolean): KeymapInfo;
    update(other: KeymapInfo): void;
    getScore(other: IRawMixedKeyboardMapping): number;
    equal(other: KeymapInfo): boolean;
    fuzzyEqual(other: IRawMixedKeyboardMapping): boolean;
}
//# sourceMappingURL=keymap.d.ts.map