import { AnyClient, Client, ConfigManager, ConfigNormalizer, EventBuilder, EventSender } from './types';
export declare type CreateClientConfig<ReportEvent, SendEvent, Builder extends EventBuilder<ReportEvent, SendEvent>, Sender extends EventSender<SendEvent>, InitConfig, UserConfig, Config> = {
    createDefaultConfig: (c: Partial<InitConfig>) => Config;
    validateInitConfig: (c: InitConfig) => boolean;
    initConfigNormalizer: ConfigNormalizer<InitConfig, Config>;
    userConfigNormalizer: ConfigNormalizer<UserConfig, Config>;
    createConfigManager: (c: Config, clt?: AnyClient) => ConfigManager<Config>;
    createSender: (c: Config) => Sender;
    builder: Builder;
};
export declare function createClient<ReportEvent, SendEvent, Builder extends EventBuilder<ReportEvent, SendEvent>, Sender extends EventSender<SendEvent>, InitConfig, UserConfig, Config>(creationConfig: CreateClientConfig<ReportEvent, SendEvent, Builder, Sender, InitConfig, UserConfig, Config>): Client<ReportEvent, SendEvent, Builder, Sender, InitConfig, UserConfig, Config>;
