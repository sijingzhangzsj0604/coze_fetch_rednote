"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.flagUsages = exports.flags = exports.args = void 0;
const args = __importStar(require("@oclif/parser/lib/args"));
exports.args = args;
const deps_1 = __importDefault(require("@oclif/parser/lib/deps"));
const flags = __importStar(require("@oclif/parser/lib/flags"));
exports.flags = flags;
const parse_1 = require("./parse");
var help_1 = require("@oclif/parser/lib/help");
Object.defineProperty(exports, "flagUsages", { enumerable: true, get: function () { return help_1.flagUsages; } });
const m = (0, deps_1.default)().add('validate', () => require('@oclif/parser/lib/validate').validate);
function parse(argv, options) {
    const input = {
        argv,
        context: options.context,
        args: (options.args || []).map((a) => args.newArg(a)),
        '--': options['--'],
        flags: Object.assign({ color: flags.defaultFlags.color }, (options.flags || {})),
        strict: options.strict !== false,
    };
    const parser = new parse_1.Parser(input);
    const output = parser.parse();
    m.validate({ input, output });
    return output;
}
exports.parse = parse;
