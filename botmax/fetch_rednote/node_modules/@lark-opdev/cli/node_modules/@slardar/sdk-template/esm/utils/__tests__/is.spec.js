import test from 'ava';
import { isArray, isBoolean, isEqual, isEqualArray, isEqualPlainObject, isError, isFunction, isNumber, isObject, isPlainObject, isString, } from '../is';
var UNDEFINED = undefined;
var NULL = null;
var TRUE = true;
var FALSE = false;
var NUMBER = 1;
var STRING = '1';
var ARRAY = [1];
var OBJECT = {
    a: 1,
};
var FUNCTION = function () { };
var DATE = new Date();
var Class = /** @class */ (function () {
    function Class() {
    }
    return Class;
}());
var CLASS = new Class();
var ERROR = new Error('err');
var ERROR_LIKE = {
    name: 'Error',
    message: 'error message',
};
test('is - isObject', function (t) {
    t.false(isObject(UNDEFINED));
    t.false(isObject(NULL));
    t.false(isObject(NUMBER));
    t.false(isObject(TRUE));
    t.false(isObject(FALSE));
    t.false(isObject(STRING));
    t.assert(isObject(ARRAY));
    t.false(isObject(FUNCTION));
    t.assert(isObject(OBJECT));
});
test('is - isPlainObject', function (t) {
    t.assert(isPlainObject(OBJECT));
    t.false(isPlainObject(STRING));
    t.false(isPlainObject(NUMBER));
    t.false(isPlainObject(DATE));
    t.false(isPlainObject(CLASS));
});
test('is - isArray', function (t) {
    t.false(isArray(UNDEFINED));
    t.false(isArray(NULL));
    t.false(isArray(NUMBER));
    t.false(isArray(TRUE));
    t.false(isArray(FALSE));
    t.false(isArray(STRING));
    t.assert(isArray(ARRAY));
    t.false(isArray(FUNCTION));
    t.false(isArray(OBJECT));
});
test('is - isFunction', function (t) {
    t.false(isFunction(UNDEFINED));
    t.false(isFunction(NULL));
    t.false(isFunction(NUMBER));
    t.false(isFunction(TRUE));
    t.false(isFunction(FALSE));
    t.false(isFunction(STRING));
    t.false(isFunction(ARRAY));
    t.assert(isFunction(FUNCTION));
    t.false(isFunction(OBJECT));
});
test('is - isBoolean', function (t) {
    t.false(isBoolean(UNDEFINED));
    t.false(isBoolean(NULL));
    t.false(isBoolean(NUMBER));
    t.assert(isBoolean(TRUE));
    t.assert(isBoolean(FALSE));
    t.false(isBoolean(STRING));
    t.false(isBoolean(ARRAY));
    t.false(isBoolean(FUNCTION));
    t.false(isBoolean(OBJECT));
});
test('is - isNumber', function (t) {
    t.false(isNumber(UNDEFINED));
    t.false(isNumber(NULL));
    t.assert(isNumber(NUMBER));
    t.false(isNumber(TRUE));
    t.false(isNumber(FALSE));
    t.false(isNumber(STRING));
    t.false(isNumber(ARRAY));
    t.false(isNumber(FUNCTION));
    t.false(isNumber(OBJECT));
});
test('is - isString', function (t) {
    t.false(isString(UNDEFINED));
    t.false(isString(NULL));
    t.false(isString(NUMBER));
    t.false(isString(TRUE));
    t.false(isString(FALSE));
    t.assert(isString(STRING));
    t.false(isString(ARRAY));
    t.false(isString(FUNCTION));
    t.false(isString(OBJECT));
});
test('is - isEqual', function (t) {
    t.assert(isEqual(UNDEFINED, UNDEFINED));
    t.assert(isEqual(NULL, NULL));
    t.assert(isEqual(NaN, Number.NaN));
    t.assert(isEqual(true, true));
    t.assert(isEqual(false, false));
    t.assert(!isEqual(true, false));
    t.assert(!isEqual(false, true));
    t.assert(isEqual('', ''));
    t.assert(isEqual(0, 0));
    t.assert(isEqual(2, 2));
    t.assert(!isEqual(-2, 2));
    t.assert(!isEqual('2', 2));
    t.assert(isEqual([], []));
    t.assert(isEqual({}, {}));
    t.assert(isEqual({ a: 3 }, { a: 3 }));
    t.assert(isEqual({ a: [3] }, { a: [3] }));
    t.assert(isEqual({ a: [3, { b: 5 }] }, { a: [3, { b: 5 }] }));
    t.assert(!isEqual({ a: [3, { b: 5 }] }, { a: [3, { b: 6 }] }));
    var A = /** @class */ (function () {
        function A() {
        }
        return A;
    }());
    var B = /** @class */ (function () {
        function B() {
        }
        return B;
    }());
    t.assert(!isEqual(new A(), new B()));
});
test('is - isEqualPlainObject', function (t) {
    t.assert(isEqualPlainObject({}, {}));
    t.assert(isEqualPlainObject({
        a: { val: 3 },
    }, {
        a: { val: 3 },
    }));
    t.false(isEqualPlainObject({
        a: { val: 3 },
    }, {
        a: { val: 4 },
    }));
});
test('is - isEqualArray', function (t) {
    t.assert(isEqualArray([1, 2, 3], [1, 2, 3]));
    t.assert(isEqualArray([{ val: 1 }, [2], [3, null, { val: 'b' }]], [{ val: 1 }, [2], [3, null, { val: 'b' }]]));
    t.false(isEqualArray([{ val: 1 }, [2], [3, null, { val: 'c' }]], [{ val: 1 }, [2], [3, null, { val: 'b' }]]));
    t.false(isEqualArray([undefined, { val: 1 }, [2], [3, null, { val: 'c' }]], [{ val: 1 }, [2], [3, null, { val: 'b' }]]));
});
test('is - isError', function (t) {
    t.assert(isError(ERROR));
    t.false(isError(ERROR_LIKE));
});
//# sourceMappingURL=is.spec.js.map