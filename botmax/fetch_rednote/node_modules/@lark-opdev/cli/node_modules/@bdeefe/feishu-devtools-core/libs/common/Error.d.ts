export declare enum CoreErrorCode {
    UNKNOWN = -1,
    CORE_MODULE_ERROR = 1,
    FILE_NOT_FOUND = 2,
    REQUEST_ERROR = 3,
    NETWORK_ERROR = 4,
    PARAM_ERROR = 5,
    NO_PERMISSION = 6,
    TIMEOUT = 7,
    NOT_LOGIN = 8,
    COMPILE_PATH_ERROR = 9,
    ENTRY_ERROR = 10,
    COMPILE_ERROR = 11,
    UNPACK_FAIL = 12,
    CREATED_FAIL = 13,
    LAUNCH_FAIL = 14,
    SESSION_EXPIRED = 15,
    USER_ERROR = 16
}
export declare const enum TrackErrorCode {
    PRE_CHECK_FAIL = 2100000001,
    COMPILE_ERROR = 2100000002,
    UNKNOWN_ERROR = 2200000000,
    UPLOAD_UNKNOWN_ERROR = 2200000001,
    COMPILE_CHECK_UNKNOWN_ERROR = 2200000002,
    NETWORK_ERROR = 2300000001,
    COMPRESS_ERROR = 2300000002,
    FILE_NOT_FOUND = 2300000003,
    REQUEST_TIMEOUT = 2300000004
}
interface ErrorOptions {
    message: string;
    code: CoreErrorCode;
    advise?: string;
    status?: number;
}
export default class CoreError extends Error {
    name: string;
    code: CoreErrorCode;
    stack: Error['stack'];
    advise?: string;
    status?: number;
    constructor(error: Error | ErrorOptions);
    toJSON(): string;
    toString(): string;
    static isCoreError(error: Error): boolean;
}
export {};
