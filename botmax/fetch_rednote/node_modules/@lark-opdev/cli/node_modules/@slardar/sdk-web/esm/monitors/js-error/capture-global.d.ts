import { JsErrorPayload } from '../../types';
export declare const DEFAULT_EVENT_TARGET: readonly ["EventTarget", "Window", "Node", "ApplicationCache", "ChannelMergerNode", "EventSource", "FileReader", "HTMLUnknownElement", "IDBDatabase", "IDBRequest", "IDBTransaction", "MessagePort", "Notification", "SVGElementInstance", "Screen", "TextTrack", "TextTrackCue", "TextTrackList", "WebSocket", "Worker", "XMLHttpRequest", "XMLHttpRequestEventTarget", "XMLHttpRequestUpload"];
export declare const DEFAULT_TIME_FUNCTION: readonly ["setTimeout", "setInterval", "requestAnimationFrame", "requestIdleCallback"];
export declare const xmlHttpRequestProps: readonly ["onload", "onerror", "onprogress", "onreadystatechange"];
export declare const hookGlobalAsync: (report: ({ error, extra, react }: Partial<JsErrorPayload>) => void, window?: Window, xhr?: {
    new (): XMLHttpRequest;
    prototype: XMLHttpRequest;
    readonly DONE: number;
    readonly HEADERS_RECEIVED: number;
    readonly LOADING: number;
    readonly OPENED: number;
    readonly UNSENT: number;
}) => (() => void)[];
