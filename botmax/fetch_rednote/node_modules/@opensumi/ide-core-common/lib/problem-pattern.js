"use strict";
/** ******************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// Some code copied and modified from https://github.com/eclipse-theia/theia/tree/v1.14.0/packages/core/src/common/severity.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProblemPatternRegistryImpl = exports.IProblemPatternRegistry = exports.Severity = exports.ProblemMatchData = exports.diagnosticAreEquals = exports.rangeAreEqual = exports.ProblemPattern = exports.NamedMultiLineCheckedProblemPattern = exports.NamedProblemPattern = exports.MultiLineCheckedProblemPattern = exports.MultiLineProblemPattern = exports.CheckedProblemPattern = exports.FileLocationKind = exports.ProblemLocationKind = exports.ApplyToKind = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@opensumi/di");
const ide_utils_1 = require("@opensumi/ide-utils");
var ApplyToKind;
(function (ApplyToKind) {
    ApplyToKind[ApplyToKind["allDocuments"] = 0] = "allDocuments";
    ApplyToKind[ApplyToKind["openDocuments"] = 1] = "openDocuments";
    ApplyToKind[ApplyToKind["closedDocuments"] = 2] = "closedDocuments";
})(ApplyToKind = exports.ApplyToKind || (exports.ApplyToKind = {}));
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 1] = "Error";
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 2] = "Warning";
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 3] = "Information";
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 4] = "Hint";
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
(function (ApplyToKind) {
    function fromString(value) {
        if (value) {
            value = value.toLowerCase();
            if (value === 'alldocuments') {
                return ApplyToKind.allDocuments;
            }
            else if (value === 'opendocuments') {
                return ApplyToKind.openDocuments;
            }
            else if (value === 'closeddocuments') {
                return ApplyToKind.closedDocuments;
            }
        }
        return undefined;
    }
    ApplyToKind.fromString = fromString;
})(ApplyToKind = exports.ApplyToKind || (exports.ApplyToKind = {}));
var ProblemLocationKind;
(function (ProblemLocationKind) {
    ProblemLocationKind[ProblemLocationKind["File"] = 0] = "File";
    ProblemLocationKind[ProblemLocationKind["Location"] = 1] = "Location";
})(ProblemLocationKind = exports.ProblemLocationKind || (exports.ProblemLocationKind = {}));
(function (ProblemLocationKind) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'file') {
            return ProblemLocationKind.File;
        }
        else if (value === 'location') {
            return ProblemLocationKind.Location;
        }
        else {
            return undefined;
        }
    }
    ProblemLocationKind.fromString = fromString;
})(ProblemLocationKind = exports.ProblemLocationKind || (exports.ProblemLocationKind = {}));
var FileLocationKind;
(function (FileLocationKind) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'absolute') {
            return FileLocationKind.Absolute;
        }
        else if (value === 'relative') {
            return FileLocationKind.Relative;
        }
        else {
            return undefined;
        }
    }
    FileLocationKind.fromString = fromString;
})(FileLocationKind = exports.FileLocationKind || (exports.FileLocationKind = {}));
(function (FileLocationKind) {
    FileLocationKind[FileLocationKind["Default"] = 0] = "Default";
    FileLocationKind[FileLocationKind["Relative"] = 1] = "Relative";
    FileLocationKind[FileLocationKind["Absolute"] = 2] = "Absolute";
    FileLocationKind[FileLocationKind["AutoDetect"] = 3] = "AutoDetect";
})(FileLocationKind = exports.FileLocationKind || (exports.FileLocationKind = {}));
var CheckedProblemPattern;
(function (CheckedProblemPattern) {
    function is(value) {
        const candidate = value;
        return candidate && (0, ide_utils_1.isString)(candidate.regexp);
    }
    CheckedProblemPattern.is = is;
})(CheckedProblemPattern = exports.CheckedProblemPattern || (exports.CheckedProblemPattern = {}));
var MultiLineProblemPattern;
(function (MultiLineProblemPattern) {
    function is(value) {
        return value && (0, ide_utils_1.isArray)(value);
    }
    MultiLineProblemPattern.is = is;
})(MultiLineProblemPattern = exports.MultiLineProblemPattern || (exports.MultiLineProblemPattern = {}));
var MultiLineCheckedProblemPattern;
(function (MultiLineCheckedProblemPattern) {
    function is(value) {
        if (!MultiLineProblemPattern.is(value)) {
            return false;
        }
        for (const element of value) {
            if (!CheckedProblemPattern.is(element)) {
                return false;
            }
        }
        return true;
    }
    MultiLineCheckedProblemPattern.is = is;
})(MultiLineCheckedProblemPattern = exports.MultiLineCheckedProblemPattern || (exports.MultiLineCheckedProblemPattern = {}));
var NamedProblemPattern;
(function (NamedProblemPattern) {
    function is(value) {
        const candidate = value;
        return candidate && (0, ide_utils_1.isString)(candidate.name);
    }
    NamedProblemPattern.is = is;
})(NamedProblemPattern = exports.NamedProblemPattern || (exports.NamedProblemPattern = {}));
var NamedMultiLineCheckedProblemPattern;
(function (NamedMultiLineCheckedProblemPattern) {
    function is(value) {
        const candidate = value;
        return (candidate &&
            (0, ide_utils_1.isString)(candidate.name) &&
            (0, ide_utils_1.isArray)(candidate.patterns) &&
            MultiLineCheckedProblemPattern.is(candidate.patterns));
    }
    NamedMultiLineCheckedProblemPattern.is = is;
})(NamedMultiLineCheckedProblemPattern = exports.NamedMultiLineCheckedProblemPattern || (exports.NamedMultiLineCheckedProblemPattern = {}));
var ProblemPattern;
(function (ProblemPattern) {
    function fromProblemPatternContribution(value) {
        return {
            name: value.name,
            regexp: value.regexp,
            kind: value.kind ? ProblemLocationKind.fromString(value.kind) : undefined,
            file: value.file,
            message: value.message,
            location: value.location,
            line: value.line,
            character: value.column || value.character,
            endLine: value.endLine,
            endCharacter: value.endColumn || value.endCharacter,
            code: value.code,
            severity: value.severity,
            loop: value.loop,
        };
    }
    ProblemPattern.fromProblemPatternContribution = fromProblemPatternContribution;
})(ProblemPattern = exports.ProblemPattern || (exports.ProblemPattern = {}));
function rangeAreEqual(a, b) {
    if (typeof a === 'undefined' && typeof b === 'undefined') {
        return true;
    }
    return (a.start.line === b.start.line &&
        a.start.character === b.start.character &&
        a.end.line === b.end.line &&
        a.end.character === b.end.character);
}
exports.rangeAreEqual = rangeAreEqual;
function codeAreEquals(a, b) {
    if (typeof a === 'object' && typeof b === 'object') {
        return a.value === b.value && a.target === b.target;
    }
    return a === b;
}
function diagnosticAreEquals(a, b) {
    return (codeAreEquals(a === null || a === void 0 ? void 0 : a.code, b === null || b === void 0 ? void 0 : b.code) &&
        (a === null || a === void 0 ? void 0 : a.message) === (b === null || b === void 0 ? void 0 : b.message) &&
        (a === null || a === void 0 ? void 0 : a.source) === (b === null || b === void 0 ? void 0 : b.source) &&
        rangeAreEqual(a === null || a === void 0 ? void 0 : a.range, b === null || b === void 0 ? void 0 : b.range));
}
exports.diagnosticAreEquals = diagnosticAreEquals;
var ProblemMatchData;
(function (ProblemMatchData) {
    function is(data) {
        return 'marker' in data;
    }
    ProblemMatchData.is = is;
})(ProblemMatchData = exports.ProblemMatchData || (exports.ProblemMatchData = {}));
var Severity;
(function (Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Error"] = 1] = "Error";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Info"] = 3] = "Info";
    Severity[Severity["Log"] = 4] = "Log";
})(Severity = exports.Severity || (exports.Severity = {}));
(function (Severity) {
    const error = 'Errors';
    const warning = 'Warnings';
    const info = 'Info';
    const log = 'Log';
    const ignore = 'All';
    function fromValue(value) {
        value = value && value.toLowerCase();
        if (!value) {
            return Severity.Ignore;
        }
        if (['error', 'errors'].indexOf(value) !== -1) {
            return Severity.Error;
        }
        if (['warn', 'warning', 'warnings'].indexOf(value) !== -1) {
            return Severity.Warning;
        }
        if (value === 'info') {
            return Severity.Info;
        }
        if (value === 'log') {
            return Severity.Log;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toDiagnosticSeverity(value) {
        switch (value) {
            case Severity.Ignore:
                return DiagnosticSeverity.Hint;
            case Severity.Info:
                return DiagnosticSeverity.Information;
            case Severity.Log:
                return DiagnosticSeverity.Information;
            case Severity.Warning:
                return DiagnosticSeverity.Warning;
            case Severity.Error:
                return DiagnosticSeverity.Error;
            default:
                return DiagnosticSeverity.Error;
        }
    }
    Severity.toDiagnosticSeverity = toDiagnosticSeverity;
    function toString(severity) {
        switch (severity) {
            case Severity.Error:
                return error;
            case Severity.Warning:
                return warning;
            case Severity.Info:
                return info;
            case Severity.Log:
                return log;
            default:
                return ignore;
        }
    }
    Severity.toString = toString;
    function toArray() {
        return [ignore, error, warning, info, log];
    }
    Severity.toArray = toArray;
})(Severity = exports.Severity || (exports.Severity = {}));
exports.IProblemPatternRegistry = Symbol('ProblemPatternRegistry');
let ProblemPatternRegistryImpl = class ProblemPatternRegistryImpl {
    constructor() {
        this.patterns = new Map();
        this.init();
    }
    init() {
        this.fillDefaults();
        this.readyPromise = new Promise((res, rej) => res(undefined));
    }
    onReady() {
        return this.readyPromise;
    }
    /**
     * Add a problem pattern to the registry.
     *
     * @param definition the problem pattern to be added.
     */
    register(value) {
        if (Array.isArray(value)) {
            const toDispose = new ide_utils_1.DisposableCollection();
            value.forEach((problemPatternContribution) => toDispose.push(this.register(problemPatternContribution)));
            return toDispose;
        }
        if (!value.name) {
            // eslint-disable-next-line no-console
            console.error('Only named Problem Patterns can be registered.');
            return ide_utils_1.Disposable.NULL;
        }
        const problemPattern = ProblemPattern.fromProblemPatternContribution(value);
        return this.add(problemPattern.name, problemPattern);
    }
    /**
     * Finds the problem pattern(s) from the registry with the given name.
     *
     * @param key the name of the problem patterns
     * @return a problem pattern or an array of the problem patterns associated with the name. If no problem patterns are found, `undefined` is returned.
     */
    get(key) {
        if (key.startsWith('$')) {
            return this.patterns.get(key.slice(1));
        }
        return this.patterns.get(key);
    }
    add(key, value) {
        let toAdd;
        if (Array.isArray(value)) {
            toAdd = value.map((v) => Object.assign(v, { name: key }));
        }
        else {
            toAdd = Object.assign(value, { name: key });
        }
        this.patterns.set(key, toAdd);
        return ide_utils_1.Disposable.create(() => this.patterns.delete(key));
    }
    // copied from https://github.com/Microsoft/vscode/blob/1.33.1/src/vs/workbench/contrib/tasks/common/problemMatcher.ts
    fillDefaults() {
        this.add('msCompile', {
            regexp: /^(?:\s+\d+\>)?([^\s].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\)\s*:\s+(error|warning|info)\s+(\w{1,2}\d+)\s*:\s*(.*)$/
                .source,
            kind: ProblemLocationKind.Location,
            file: 1,
            location: 2,
            severity: 3,
            code: 4,
            message: 5,
        });
        this.add('gulp-tsc', {
            regexp: /^([^\s].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\):\s+(\d+)\s+(.*)$/.source,
            kind: ProblemLocationKind.Location,
            file: 1,
            location: 2,
            code: 3,
            message: 4,
        });
        this.add('cpp', {
            regexp: /^([^\s].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\):\s+(error|warning|info)\s+(C\d+)\s*:\s*(.*)$/.source,
            kind: ProblemLocationKind.Location,
            file: 1,
            location: 2,
            severity: 3,
            code: 4,
            message: 5,
        });
        this.add('csc', {
            regexp: /^([^\s].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\):\s+(error|warning|info)\s+(CS\d+)\s*:\s*(.*)$/.source,
            kind: ProblemLocationKind.Location,
            file: 1,
            location: 2,
            severity: 3,
            code: 4,
            message: 5,
        });
        this.add('vb', {
            regexp: /^([^\s].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\):\s+(error|warning|info)\s+(BC\d+)\s*:\s*(.*)$/.source,
            kind: ProblemLocationKind.Location,
            file: 1,
            location: 2,
            severity: 3,
            code: 4,
            message: 5,
        });
        this.add('lessCompile', {
            regexp: /^\s*(.*) in file (.*) line no. (\d+)$/.source,
            kind: ProblemLocationKind.Location,
            message: 1,
            file: 2,
            line: 3,
        });
        this.add('jshint', {
            regexp: /^(.*):\s+line\s+(\d+),\s+col\s+(\d+),\s(.+?)(?:\s+\((\w)(\d+)\))?$/.source,
            kind: ProblemLocationKind.Location,
            file: 1,
            line: 2,
            character: 3,
            message: 4,
            severity: 5,
            code: 6,
        });
        this.add('jshint-stylish', [
            {
                regexp: /^(.+)$/.source,
                kind: ProblemLocationKind.Location,
                file: 1,
            },
            {
                regexp: /^\s+line\s+(\d+)\s+col\s+(\d+)\s+(.+?)(?:\s+\((\w)(\d+)\))?$/.source,
                line: 1,
                character: 2,
                message: 3,
                severity: 4,
                code: 5,
                loop: true,
            },
        ]);
        this.add('eslint-compact', {
            regexp: /^(.+):\sline\s(\d+),\scol\s(\d+),\s(Error|Warning|Info)\s-\s(.+)\s\((.+)\)$/.source,
            file: 1,
            kind: ProblemLocationKind.Location,
            line: 2,
            character: 3,
            severity: 4,
            message: 5,
            code: 6,
        });
        this.add('eslint-stylish', [
            {
                regexp: /^([^\s].*)$/.source,
                kind: ProblemLocationKind.Location,
                file: 1,
            },
            {
                regexp: /^\s+(\d+):(\d+)\s+(error|warning|info)\s+(.+?)(?:\s\s+(.*))?$/.source,
                line: 1,
                character: 2,
                severity: 3,
                message: 4,
                code: 5,
                loop: true,
            },
        ]);
        this.add('go', {
            regexp: /^([^:]*: )?((.:)?[^:]*):(\d+)(:(\d+))?: (.*)$/.source,
            kind: ProblemLocationKind.Location,
            file: 2,
            line: 4,
            character: 6,
            message: 7,
        });
    }
};
ProblemPatternRegistryImpl = tslib_1.__decorate([
    (0, di_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [])
], ProblemPatternRegistryImpl);
exports.ProblemPatternRegistryImpl = ProblemPatternRegistryImpl;
//# sourceMappingURL=problem-pattern.js.map