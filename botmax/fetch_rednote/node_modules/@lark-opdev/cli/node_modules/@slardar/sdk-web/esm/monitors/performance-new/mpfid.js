import { __read } from "tslib";
import { getDefaultPerformanceObserver, getDefaultPerformance, applyPerformance } from '../../utils';
import { initMetric } from '../performance/util';
import { FCP_ENTRY_NAME } from './paint';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
export var MPFID_METRIC_NAME = "mpfid" /* mpfid */;
var getMPFID = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 3), loadObserver = _b[0], longtaskObserver = _b[2];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var performance = getDefaultPerformance();
    var metric = initMetric(MPFID_METRIC_NAME, 0);
    var list = [];
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!PerformanceObserver) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    tearDownGroup.push(longtaskObserver[0](function (entry) {
        list.push(entry);
    }));
    var calculateAndSendMetric = function () {
        var _a = __read(applyPerformance(performance), 5), getEntriesByName = _a[4];
        var paint = getEntriesByName(FCP_ENTRY_NAME)[0];
        var FCPStartTime = (paint && paint.startTime) || 0;
        metric.value = list.reduce(function (res, _a) {
            var duration = _a.duration, startTime = _a.startTime;
            return (res < duration && startTime > FCPStartTime ? duration : res);
        }, 0);
        list.length = 0;
        sendOnceAndTearDown(metric);
    };
    tearDownGroup.push(loadObserver[0](function () {
        setTimeout(calculateAndSendMetric, 200);
    }));
};
export var MPFID = [MPFID_METRIC_NAME, getMPFID];
//# sourceMappingURL=mpfid.js.map