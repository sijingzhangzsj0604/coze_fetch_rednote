import { __read, __spreadArray } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { pick } from '@slardar/sdk-template';
import { applyMonitor } from '@slardar/sdk-web';
import { mockTransport } from '../../__test__/utils/mockTransport';
import { createElectronClient } from '../../client';
import { JsErrorMonitor } from '../js-error';
var createProcess = function () {
    var cbs = {};
    return {
        on: function (type, cb) {
            cbs[type] = cb;
        },
        trigger: function (type) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (_a = cbs[type]) === null || _a === void 0 ? void 0 : _a.call.apply(_a, __spreadArray([cbs], __read(args), false));
        },
    };
};
test('should init without error', function (t) {
    var send = sinon.fake();
    var result = applyMonitor(JsErrorMonitor, { ignoreErrors: [/apple/], uncaughtException: false, unhandledRejection: false }, send, []);
    t.deepEqual(result, []);
});
test('should capture exception manually', function (t) {
    var send = sinon.fake();
    var _a = __read(applyMonitor(JsErrorMonitor, { ignoreErrors: [/apple/], uncaughtException: false, unhandledRejection: false }, send, [{}]), 1), captureJsError = _a[0];
    var error = new Error('123');
    var context = { context: 'context data ' };
    captureJsError(new Error('ignore apples'));
    t.true(send.notCalled);
    captureJsError(error);
    t.true(send.calledOnce);
    t.like(send.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: [],
            extra: undefined,
        },
    });
    captureJsError(error, context);
    t.true(send.calledTwice);
    t.like(send.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: [],
            extra: { context: 'context data ' },
        },
    });
});
test('should remove the same error as the previous error, if dedupe is true', function (t) {
    var send = sinon.fake();
    var _a = __read(applyMonitor(JsErrorMonitor, { uncaughtException: false, unhandledRejection: false, dedupe: true }, send, [{}]), 1), captureJsError = _a[0];
    var wrapError1 = new Error('1');
    var wrapError2 = new Error('2');
    var error2 = new Error('2');
    captureJsError(wrapError1);
    t.is(send.callCount, 1);
    captureJsError(wrapError1);
    t.is(send.callCount, 1);
    captureJsError(wrapError2);
    t.is(send.callCount, 2);
    captureJsError(error2);
    t.is(send.callCount, 2);
});
test('should listen error', function (t) {
    var process = createProcess();
    var send = sinon.fake();
    applyMonitor(JsErrorMonitor, { ignoreErrors: [/apple/], uncaughtException: true, unhandledRejection: true }, send, [
        process,
    ]);
    process.trigger('uncaughtException', { reason: 'ignore apple' });
    t.false(send.calledOnce);
    var error = new Error('123');
    process.trigger('unhandledRejection', error);
    t.true(send.calledOnce);
    t.like(send.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: [],
            extra: undefined,
        },
    });
});
test('should send a custom js error event', function (t) {
    var _a, _b;
    var _c = mockTransport(), transport = _c.transport, post = _c.post;
    var bid = 'slardar_sdk';
    var client = createElectronClient();
    client.init({ bid: bid, useLocalConfig: true, transport: transport });
    client.start();
    client.captureException('foo');
    (_a = client.getSender()) === null || _a === void 0 ? void 0 : _a.flush();
    t.true(post.callCount === 1);
    var firstData = JSON.parse(post.firstCall.firstArg.data);
    t.deepEqual(firstData.ev_type, 'batch');
    t.deepEqual(firstData.list[0].ev_type, 'js_error');
    t.deepEqual(firstData.list[0].payload, { error: { message: 'foo' }, breadcrumbs: [] });
    client.captureException(Error('foo'));
    (_b = client.getSender()) === null || _b === void 0 ? void 0 : _b.flush();
    t.true(post.callCount === 2);
    var secondData = JSON.parse(post.secondCall.firstArg.data);
    t.deepEqual(secondData.ev_type, 'batch');
    t.deepEqual(secondData.list[0].ev_type, 'js_error');
    t.deepEqual(pick(secondData.list[0].payload.error, ['name', 'message']), { name: 'Error', message: 'foo' });
});
//# sourceMappingURL=js-error.spec.js.map