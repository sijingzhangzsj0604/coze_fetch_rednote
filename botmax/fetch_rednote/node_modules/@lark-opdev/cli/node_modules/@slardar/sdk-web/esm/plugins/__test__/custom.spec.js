import { __assign } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../utils/__test__/util';
import { normalizeCustomEventData, normalizeCustomLogData, CustomPlugin } from '../custom';
test('normalizeCustomEventData', function (t) {
    t.is(normalizeCustomEventData(1), undefined);
    t.is(normalizeCustomEventData({}), undefined);
    t.is(normalizeCustomEventData({ noName: 'name' }), undefined);
    [
        {
            name: 'eventA',
        },
        {
            name: 'eventA',
            metrics: {
                load: 3,
            },
        },
        {
            name: 'eventA',
            metrics: {
                load: 3,
            },
            categories: {
                type: 'a',
            },
        },
    ].forEach(function (d) { return t.like(normalizeCustomEventData(d), __assign(__assign({}, d), { type: 'event' })); });
    [
        [
            {
                metrics: {
                    a: 123,
                    b: '123',
                },
            },
            {
                metrics: {
                    a: 123,
                },
            },
        ],
        [
            {
                categories: {
                    type: 'a',
                    case: 123,
                },
            },
            {
                categories: {
                    type: 'a',
                    case: '123',
                },
            },
        ],
    ].forEach(function (d) {
        return t.like(normalizeCustomEventData(__assign(__assign({ name: 'eventA' }, d[0]), { type: 'event' })), __assign(__assign({ name: 'eventA' }, d[1]), { type: 'event' }));
    });
});
test('normalizeCustomLogData', function (t) {
    t.is(normalizeCustomLogData(1), undefined);
    t.is(normalizeCustomLogData({}), undefined);
    t.is(normalizeCustomLogData({ noName: 'name' }), undefined);
    [
        {
            content: 'eventA',
        },
        {
            content: 'eventA',
            level: 'debug',
        },
        {
            content: 'eventA',
            level: 'error',
        },
        {
            content: 'eventA',
            level: 'warn',
        },
    ].forEach(function (d) { var _a; return t.like(normalizeCustomLogData(d), __assign(__assign({}, d), { type: 'log', level: (_a = d.level) !== null && _a !== void 0 ? _a : 'info' })); });
    [
        [
            {
                level: 'error',
                extra: {
                    a: 123,
                    b: '123',
                    c: {},
                },
            },
            {
                level: 'error',
                metrics: {
                    a: 123,
                },
                categories: {
                    b: '123',
                    c: '{}',
                },
            },
        ],
        [
            {
                level: 'err',
                extra: {
                    a: 123,
                },
            },
            {
                level: 'err',
                metrics: {
                    a: 123,
                },
                categories: {},
            },
        ],
    ].forEach(function (d) {
        return t.like(normalizeCustomLogData(__assign(__assign({ content: 'eventA' }, d[0]), { type: 'log' })), __assign(__assign({ content: 'eventA' }, d[1]), { type: 'log' }));
    });
});
test('CustomPlugin Event', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    CustomPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({});
    t.assert(client.sendEvent);
    (_a = client.sendEvent) === null || _a === void 0 ? void 0 : _a.call(client, {
        name: 'first-event',
    });
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'custom',
        payload: {
            name: 'first-event',
            type: 'event',
        },
    });
    (_b = client.sendEvent) === null || _b === void 0 ? void 0 : _b.call(client, {
        name: 'event-name',
        metrics: {
            // @ts-expect-error
            time: '1000',
            length: 200,
        },
        categories: {
            type: 'manual',
            // @ts-expect-error
            value: 999,
        },
    });
    t.assert(onReport.calledTwice);
    t.deepEqual(onReport.args[1][0].payload, {
        name: 'event-name',
        type: 'event',
        metrics: {
            length: 200,
        },
        categories: {
            type: 'manual',
            value: '999',
        },
    });
});
test('CustomPlugin Log', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    CustomPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({});
    t.assert(client.sendLog);
    (_a = client.sendLog) === null || _a === void 0 ? void 0 : _a.call(client, {
        content: 'first-event',
    });
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'custom',
        payload: {
            content: 'first-event',
            level: 'info',
            type: 'log',
        },
    });
    (_b = client.sendLog) === null || _b === void 0 ? void 0 : _b.call(client, {
        content: 'event-name',
        level: 'error',
        extra: {
            time: '1000',
            length: 200,
        },
    });
    t.assert(onReport.calledTwice);
    t.deepEqual(onReport.args[1][0].payload, {
        content: 'event-name',
        metrics: {
            length: 200,
        },
        categories: {
            time: '1000',
        },
        type: 'log',
        level: 'error',
    });
});
//# sourceMappingURL=custom.spec.js.map