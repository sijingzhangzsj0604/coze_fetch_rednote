import test from 'ava';
import sinon from 'sinon';
import { createClient } from '../client';
import { id, createBaseConfigManager, noopBuilder, noopSender } from '../utils';
test('client.destroy - call handlers', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onBeforeDestroy = sinon.fake();
    client.on('beforeDestroy', onBeforeDestroy);
    t.assert(onBeforeDestroy.notCalled);
    client.destroy();
    t.assert(onBeforeDestroy.calledOnce);
    // callback is cleared when executing
    client.destroy();
    t.assert(onBeforeDestroy.calledOnce);
    client.on('beforeDestroy', onBeforeDestroy);
    client.destroy();
    t.assert(onBeforeDestroy.calledTwice);
});
//# sourceMappingURL=client.destroy.spec.js.map