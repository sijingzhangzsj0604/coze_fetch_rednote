export interface AutoOptions {
    autoPort: number;
    account?: string;
    headless?: boolean;
}
export declare enum AutoModule {
    App = "App",
    Page = "Page",
    Element = "Element",
    Tool = "Tool"
}
export interface Element {
    elementId: number;
    tagName: string;
    nodeId: number;
    pageId: number;
    videoId: number;
}
export interface Page {
    path: string;
    query: string;
    pageId: number;
}
export interface Response {
    reqId: string;
    method: string;
    error: string;
    errorCode: number;
    data: any;
}
export interface Request {
    method: string;
    params: any;
    reqId: string;
}
export interface AutoRequestMessage {
    clientID: string;
    message: Request;
}
export interface AutoResponseMessage {
    clientID: string;
    message: Response;
}
export declare const AutoModules: AutoModule[];
export declare const AutoAPIErrorCode: {
    AppCallTTMethod: number;
    PageGetElementSelector: number;
    PageGetElement: number;
    ElementGetElement: number;
    APINotFound: number;
};
export declare const routeTTAPI: string[];
export declare const AutoAPIMethod: {
    App: {
        getPageStack: string;
        callTTMethod: string;
        mockTTMethod: string;
        restoreTTMethod: string;
        getCurrentPage: string;
        callFunction: string;
        exit: string;
        enableLog: string;
        addBinding: string;
        screenshot: string;
    };
    Page: {
        getElement: string;
        getElements: string;
        getData: string;
        setData: string;
        callMethod: string;
        getSize: string;
        getScrollTop: string;
    };
    Element: {
        getElement: string;
        getElements: string;
        getFields: string;
        getProperty: string;
        getStyles: string;
        getAttribute: string;
        getWXML: string;
        triggerEvent: string;
        callContextMethod: string;
        callActionFunc: string;
    };
    Tool: {
        close: string;
        enableRemoteDebug: string;
        onRemoteDebugConnected: string;
        getInfo: string;
        getTestAccounts: string;
        stopAudits: string;
    };
};
export interface Size {
    width: number;
    height: number;
}
export interface Point {
    x: number;
    y: number;
}
export interface Offset {
    left: number;
    width: number;
}
export interface Touch {
    identifier: number;
    pageX: number;
    pageY: number;
}
export interface TouchArgs {
    touches: Touch[];
    changedTouches: Touch[];
}
