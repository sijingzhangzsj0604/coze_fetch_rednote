import { __read } from "tslib";
import test from 'ava';
import { noop } from 'lodash';
import sinon from 'sinon';
import { applyMonitor } from '../../utils';
import { BreadcrumbMonitor } from '../breadcrumb';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    // eslint-disable-next-line compat/compat
    document.body.innerHTML = "\n<div>\n  <span id=\"username\">username</span>\n  <button id=\"button\">button</button>\n  <input id=\"input\" />\n</div>";
});
function simulateKeypress(_keyCode, element) {
    var event = document.createEvent('HTMLEvents');
    event.initEvent('keypress', true, false);
    element.dispatchEvent(event);
}
test('BreadcrumbMonitor - no document', function (t) {
    var res = applyMonitor(BreadcrumbMonitor, {
        dom: true,
    }, noop, [false]);
    t.deepEqual(res, []);
});
test.serial('BreadcrumbMonitor - click and keypress', function (t) {
    var _a, _b;
    var onAdd = sinon.spy(function (b) { return b; });
    var _c = __read(applyMonitor(BreadcrumbMonitor, {
        dom: true,
        onAddBreadcrumb: onAdd,
    }), 3), getBreadcrumbs = _c[0], addBreadcrumb = _c[1], teardown = _c[2];
    (_a = document.getElementById('button')) === null || _a === void 0 ? void 0 : _a.click();
    simulateKeypress(13, document.getElementById('input'));
    (_b = document.getElementById('username')) === null || _b === void 0 ? void 0 : _b.click();
    var breadcrumbs = getBreadcrumbs();
    t.is(breadcrumbs.length, 3);
    t.true(onAdd.calledThrice);
    t.deepEqual(breadcrumbs.map(function (_a) {
        var type = _a.type, category = _a.category, message = _a.message;
        return ({ type: type, category: category, message: message });
    }), [
        {
            type: 'dom',
            category: 'ui.click',
            message: 'body > div > button#button',
        },
        {
            type: 'dom',
            category: 'ui.input',
            message: 'body > div > input#input',
        },
        {
            type: 'dom',
            category: 'ui.click',
            message: 'body > div > span#username',
        },
    ]);
    breadcrumbs.forEach(function (b) { return t.true(Number.isInteger(b.timestamp)); });
    addBreadcrumb({
        type: 'dom',
        category: 'ui.keypress',
        message: 'keypress',
    });
    t.is(onAdd.callCount, 4);
    t.is(getBreadcrumbs().length, 4);
    teardown();
});
test.serial('BreadcrumbMonitor - click and keypress disabled', function (t) {
    var _a, _b;
    var _c = __read(applyMonitor(BreadcrumbMonitor, { dom: false }), 3), getBreadcrumbs = _c[0], teardown = _c[2];
    (_a = document.getElementById('button')) === null || _a === void 0 ? void 0 : _a.click();
    simulateKeypress(13, document.getElementById('input'));
    (_b = document.getElementById('username')) === null || _b === void 0 ? void 0 : _b.click();
    var breadcrumbs = getBreadcrumbs();
    t.is(breadcrumbs.length, 0);
    teardown();
});
test.serial('BreadcrumbMonitor - onMax', function (t) {
    var _a, _b;
    var onMax = sinon.spy(function (b) { return b.slice(-1); });
    var _c = __read(applyMonitor(BreadcrumbMonitor, {
        dom: true,
        maxBreadcrumbs: 2,
        onMaxBreadcrumbs: onMax,
    }), 3), getBreadcrumbs = _c[0], teardown = _c[2];
    (_a = document.getElementById('button')) === null || _a === void 0 ? void 0 : _a.click();
    simulateKeypress(13, document.getElementById('input'));
    (_b = document.getElementById('username')) === null || _b === void 0 ? void 0 : _b.click();
    t.is(onMax.callCount, 1);
    var breadcrumbs = getBreadcrumbs();
    t.is(breadcrumbs.length, 1);
    teardown();
});
//# sourceMappingURL=breadcrumb.spec.js.map