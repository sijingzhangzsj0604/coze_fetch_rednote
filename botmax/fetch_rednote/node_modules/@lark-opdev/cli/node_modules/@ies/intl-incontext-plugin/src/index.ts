import type { Module } from 'i18next'
const SOURCE_MATCH = 'INCONTEXT-SOURCE-MATCH'
const KEY_MATCH = 'INCONTEXT-KEY-MATCH'
const INCONTEXT_KEY_REG = /^\s*\[\[__starling_(\d+)_(.*)__\]\]\s*$/
/**
 * 目前IN-CONTEXT支持两种模式
 * 1：源文案匹配（默认）
 * 2：key匹配
 */
const supportKeyMatch = () => document.getElementById(KEY_MATCH)

if (typeof window !== 'undefined') {
  window['__STARLING_INCONTEXT_GLOBAL__HOOK__'] = {
    ...(window['__STARLING_INCONTEXT_GLOBAL__HOOK__'] || { payload: {} })
  }
}

export default {
  name: 'inContext',
  type: 'postProcessor',
  process(value, key, options, translator) {
    // 必须是浏览器环境 且 安装了Starling In-Context插件 (__STARLING_INCONTEXT_FLAG__ 为插件翻译标志)
    if (window && supportKeyMatch() && !options['__STARLING_INCONTEXT_FLAG__']) {
      /**
       * TODO: 所以I18N均可以接入 将功能抽离出一份通用sdk
       * t函数 (语言翻译由脚本来修改)
       * 不能直接给插件翻译 (无法传递过去)
       */
      if (!window['__STARLING_INCONTEXT_GLOBAL_I18N__']) {
        window['__STARLING_INCONTEXT_GLOBAL_I18N__'] = translator
      }

      delete options.keySeparator
      delete options.lngs
      let index = 0

      key = key.toString()

      // fixed: I18n.t嵌套使用时
      if (INCONTEXT_KEY_REG.test(key)) {
        const matchData = key.match(INCONTEXT_KEY_REG)
        const [_, _index, _key] = matchData
        index = _index
        key = _key
      }

      if (INCONTEXT_KEY_REG.test(value)) {
        const matchData = value.match(INCONTEXT_KEY_REG)
        const [_, _index, _key] = matchData
        value = _key
      }

      if (!window['__STARLING_INCONTEXT_GLOBAL__HOOK__'].payload[key]) {
        window['__STARLING_INCONTEXT_GLOBAL__HOOK__'].payload[key] = [
          {
            options: options,
            default: value
          }
        ]
        index = 0
      } else {
        // TODO: 规避时间戳(参数变化太快导致无用的累加)
        const findTIndex = window['__STARLING_INCONTEXT_GLOBAL__HOOK__'].payload[key].findIndex(
          item => JSON.stringify(item.options) === JSON.stringify(options)
        )
        if (findTIndex > -1) {
          window['__STARLING_INCONTEXT_GLOBAL__HOOK__'].payload[key][findTIndex].default = value
          index = findTIndex
        } else {
          index =
            window['__STARLING_INCONTEXT_GLOBAL__HOOK__'].payload[key].push({
              options: options,
              default: value
            }) - 1
        }
      }

      return `[[__starling_${index}_${key}__]]`
    } else {
      return value
    }
  }
} as Module
