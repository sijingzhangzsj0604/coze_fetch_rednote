import { isArray, isString, isObject } from './is';
export var camelToKebab = function (str) {
    return str.replace(/([a-z])([A-Z])/g, function (_, a, b) { return a + "-" + b.toLowerCase(); });
};
export function getRegexp(ignore) {
    if (!isArray(ignore)) {
        return null;
    }
    return ignore.length ? joinRegExp(ignore) : null;
}
export function joinRegExp(patterns) {
    var sources = [];
    var len = patterns.length;
    for (var i = 0; i < len; i++) {
        var pattern = patterns[i];
        if (isString(pattern)) {
            sources.push(pattern.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1'));
        }
        else if (pattern && pattern.source) {
            sources.push(pattern.source);
        }
    }
    return new RegExp(sources.join('|'), 'i');
}
export function safeStringify(a) {
    try {
        return isString(a) ? a : JSON.stringify(a);
    }
    catch (err) {
        return '[FAILED_TO_STRINGIFY]:' + String(err);
    }
}
export function safeJoin(input, delimiter) {
    if (!isArray(input)) {
        return '';
    }
    var output = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (var i = 0; i < input.length; i++) {
        try {
            output.push(String(input[i]));
        }
        catch (e) {
            output.push('[value cannot be serialized]');
        }
    }
    return output.join(delimiter);
}
/**
 * get query string from map
 * @param  {Record<string | number, string | number>} map
 */
export var joinQueryWithMap = function (map) {
    return isObject(map)
        ? Object.keys(map)
            .reduce(function (result, currentKey) {
            result += "&" + currentKey + "=" + map[currentKey];
            return result;
        }, '')
            .replace('&', '?')
        : '';
};
//# sourceMappingURL=string.js.map