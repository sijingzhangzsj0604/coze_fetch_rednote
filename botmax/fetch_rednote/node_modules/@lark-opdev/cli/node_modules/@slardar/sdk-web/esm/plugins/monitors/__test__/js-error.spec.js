import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { JsErrorMonitorPlugin } from '../js-error';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
// const createWindow = () => {
//   const cbs = {}
//   return {
//     addEventListener: (type: string, cb: any) => {
//       cbs[type] = cb
//     },
//     trigger: (type: string, ...args: any) => {
//       cbs[type]?.(...args)
//     },
//   }
// }
test('JsErrorMonitorPlugin - disabled', function (t) {
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    t.falsy(client.captureException);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({});
    t.falsy(client.captureException);
});
test('JsErrorMonitorPlugin - no breadcrumbs', function (t) {
    var _a;
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    t.falsy(client.captureException);
    t.falsy(client.getBreadcrumbs);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: true,
        },
    });
    t.assert(client.captureException);
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, new Error('123'));
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            extra: undefined,
        },
    });
});
test('JsErrorMonitorPlugin - with breadcrumbs', function (t) {
    var _a, _b;
    var breadcrumbs = [
        {
            type: 'dom',
            category: 'ui.click',
            message: 'body',
            timestamp: 0,
        },
    ];
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    client.getBreadcrumbs = sinon.spy(function () { return breadcrumbs; });
    t.assert(client.getBreadcrumbs);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: true,
        },
    });
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, new Error('123'));
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: breadcrumbs,
            extra: undefined,
        },
    });
    breadcrumbs.push({
        type: 'dom',
        category: 'ui.click',
        message: 'body',
        timestamp: 0,
    });
    (_b = client.captureException) === null || _b === void 0 ? void 0 : _b.call(client, new Error('1234'));
    t.assert(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '1234',
            },
            breadcrumbs: breadcrumbs,
            extra: undefined,
        },
    });
});
test('JsErrorMonitor - ignoreErrors', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: {
                ignoreErrors: ['123'],
            },
        },
    });
    var ignoreError = new Error('123');
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, ignoreError);
    t.true(onReport.notCalled);
    (_b = client.captureException) === null || _b === void 0 ? void 0 : _b.call(client, new Error('xxx'));
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: 'xxx',
            },
            breadcrumbs: [],
        },
    });
});
test('JsErrorMonitor - capture exception manual', function (t) {
    var _a, _b, _c;
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    t.falsy(client.captureException);
    t.falsy(client.getBreadcrumbs);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: true,
        },
    });
    t.assert(client.captureException);
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, new Error('123'));
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            extra: undefined,
        },
    });
    var error = new Error('123');
    (_b = client.captureException) === null || _b === void 0 ? void 0 : _b.call(client, error);
    t.assert(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: [],
            extra: undefined,
            source: {
                type: 'manual',
            },
        },
    });
    var context = { context: 'context data ' };
    (_c = client.captureException) === null || _c === void 0 ? void 0 : _c.call(client, new Error('123'), context);
    t.true(onReport.calledThrice);
    t.like(onReport.args[2][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: '123',
            },
            breadcrumbs: [],
            extra: { context: 'context data ' },
            source: {
                type: 'manual',
            },
        },
    });
});
test('JsErrorMonitor - dedupe true', function (t) {
    var _a, _b, _c;
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: true,
        },
    });
    var dedupeError = new Error('dedupe');
    dedupeError.stack = 'mockStack';
    var dedupeError2 = new Error('dedupe');
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, dedupeError);
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: 'dedupe',
                stack: 'mockStack',
            },
            breadcrumbs: [],
            extra: undefined,
        },
    });
    (_b = client.captureException) === null || _b === void 0 ? void 0 : _b.call(client, dedupeError);
    t.true(onReport.calledOnce);
    (_c = client.captureException) === null || _c === void 0 ? void 0 : _c.call(client, dedupeError2);
    t.true(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: 'dedupe',
            },
            breadcrumbs: [],
        },
    });
});
test('JsErrorMonitor - dedupe false', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: {
                dedupe: false,
            },
        },
    });
    var dedupeError = new Error('dedupe');
    (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, dedupeError);
    t.true(onReport.calledOnce);
    (_b = client.captureException) === null || _b === void 0 ? void 0 : _b.call(client, dedupeError);
    t.true(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                message: 'dedupe',
            },
            breadcrumbs: [],
        },
    });
});
test('JsErrorMonitor - captureGlobalAsync setTimeout', function (t) {
    var _a;
    var window = {};
    window.setTimeout = function (cb) {
        cb();
    };
    var client = createTestWebClient();
    JsErrorMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        plugins: {
            jsError: {
                onerror: false,
                onunhandledrejection: false,
                captureGlobalAsync: true,
            },
        },
    });
    var cb = function () {
        throw new Error('test');
    };
    try {
        // auto report firstly
        window.setTimeout(cb);
        t.is(onReport.callCount, 1);
    }
    catch (error) {
        // manually report second
        (_a = client.captureException) === null || _a === void 0 ? void 0 : _a.call(client, error);
        t.is(onReport.callCount, 1);
    }
});
//# sourceMappingURL=js-error.spec.js.map