"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomainConstructors = exports.EffectDomain = exports.Domain = void 0;
const di_1 = require("@opensumi/di");
/**
 * 修饰一个 Class 是某个特定的 DI 分组的装饰器
 * @param domains
 */
function Domain(...domains) {
    return (target) => {
        const opts = (0, di_1.getInjectableOpts)(target) || {};
        opts.domain = domains;
        (0, di_1.markInjectable)(target, opts);
    };
}
exports.Domain = Domain;
const domainMap = new Map();
/**
 * 带全局记录的 Domain 装饰器
 * @param domain
 */
function EffectDomain(domain) {
    return (target) => {
        const opts = (0, di_1.getInjectableOpts)(target) || {};
        opts.domain = domain;
        (0, di_1.markInjectable)(target, opts);
        const tmp = domainMap.get(domain);
        if (!tmp) {
            domainMap.set(domain, target);
        }
    };
}
exports.EffectDomain = EffectDomain;
function getDomainConstructors(...domains) {
    const constructorSet = new Set();
    for (const domain of domains) {
        const constructor = domainMap.get(domain);
        if (constructor) {
            constructorSet.add(constructor);
        }
        else {
            // eslint-disable-next-line no-console
            console.error(`Unable to retrieve the Constructor for ${String(domain)}`);
        }
    }
    return Array.from(constructorSet);
}
exports.getDomainConstructors = getDomainConstructors;
//# sourceMappingURL=domain-helper.js.map