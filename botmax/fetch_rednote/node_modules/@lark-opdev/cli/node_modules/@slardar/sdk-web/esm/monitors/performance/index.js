import { __read } from "tslib";
import { applyPerformance, getDefaultPerformance, applyMonitor, onPageLoad, onPageUnload, invokeCallbackOnce, } from '../../utils';
import { FIDMonitor } from './fid-monitor';
import { LCPMonitor } from './lcp-monitor';
import { MPFIDMonitor } from './mpfid-monitor';
import { PaintMonitor, FP_ENTRY_NAME, FCP_ENTRY_NAME } from './paint-monitor';
// fmp && tti 需要MutationObserver, 所以需要先开启
export var PerformanceMonitor = function (performance) {
    if (performance === void 0) { performance = getDefaultPerformance(); }
    return function (props, cb) {
        var precollect = props.precollect, fpEnable = props.fp, fcpEnanble = props.fcp, lcpEnable = props.lcp, fidEnable = props.fid, mpfidEnable = props.mpfid, timingEable = props.timing;
        var invokeMetricCb = function (singleMetric) {
            cb &&
                cb({
                    ev_type: 'performance',
                    payload: singleMetric,
                });
        };
        // fp
        fpEnable && applyMonitor(PaintMonitor, { metricName: "fp" /* fp */, entryName: FP_ENTRY_NAME }, invokeMetricCb);
        // fcp
        fcpEnanble && applyMonitor(PaintMonitor, { metricName: "fcp" /* fcp */, entryName: FCP_ENTRY_NAME }, invokeMetricCb);
        // lcp
        lcpEnable && applyMonitor(LCPMonitor, { precollect: precollect }, invokeMetricCb);
        // fid
        fidEnable && applyMonitor(FIDMonitor, 0, invokeMetricCb);
        // mpfid
        if (mpfidEnable) {
            var _a = __read(applyMonitor(MPFIDMonitor, { precollect: precollect }, invokeMetricCb), 1), tiggerMPFID_1 = _a[0];
            // trigger mpfid
            onPageLoad(function () { return setTimeout(tiggerMPFID_1, 200); });
        }
        // timing
        if (timingEable) {
            var _b = __read(applyPerformance(performance), 3), getEntriesByType_1 = _b[2];
            var buildTimingAndCb = function (isBounced) {
                var timing = (performance && performance.timing) || undefined;
                var navigation = getEntriesByType_1('navigation')[0];
                cb &&
                    cb({
                        ev_type: 'performance_timing',
                        payload: {
                            isBounced: isBounced,
                            timing: timing,
                            navigation_timing: navigation,
                        },
                    });
            };
            var _c = __read(invokeCallbackOnce(buildTimingAndCb), 1), buildAndInvokeTimingCbOnce_1 = _c[0];
            onPageLoad(function () {
                buildAndInvokeTimingCbOnce_1(false);
            });
            onPageUnload(function () {
                buildAndInvokeTimingCbOnce_1(true);
            });
        }
    };
};
//# sourceMappingURL=index.js.map