import { ModuleDesc, ModuleName, ModuleEventMap, ModuleCmdMap, CmdFun } from '../types/protocol';
import { CompileType } from '../types/commonData';
import { ConnectFrom } from '../types/debugger';
export declare enum CmdEnum {
    DebuggerStart = "Debugger.start",
    DebuggerStop = "Debugger.stop"
}
export declare enum EventEnum {
    DebuggerInit = "debuggerInit",
    DebuggerWaiting = "debuggerWaiting",
    DebuggerStarting = "debuggerStarting",
    DebuggerRunning = "debuggerRunning",
    DebuggerOver = "debuggerOver",
    DebuggerVersionInvalid = "debuggerVersionInvalid",
    DebugWSConnnected = "debuggerWSConnected",
    DebuggerError = "debuggerError"
}
export interface EventMap extends ModuleEventMap<EventEnum> {
    DebuggerInit: {
        type: '';
        params: {
            platform: CompileType | null;
        };
    };
    DebuggerWaiting: {
        type: '';
        params: {
            mobileDebugUrl?: string;
            host?: string;
            platform: CompileType | null;
        };
    };
    DebuggerStarting: {
        type: '';
        params: {
            platform: CompileType | null;
        };
    };
    DebuggerRunning: {
        type: '';
        params: {
            platform: CompileType | null;
        };
    };
    DebuggerOver: {
        type: '';
        params: {
            platform: CompileType | null;
        };
    };
    DebuggerWSConnnected: {
        type: '';
        params: {
            connectFrom: ConnectFrom;
            webviewId?: string;
        };
    };
    DebuggerVersionInvalid: {
        type: '';
        params: {
            platform: CompileType | null;
        };
    };
    DebuggerError: {
        type: '';
        params: {
            platform: CompileType | null;
            error: string[];
        };
    };
}
declare type CmdDebugStart = (m: ModuleName.debuggerBlock, cmd: CmdEnum.DebuggerStart, opts: {
    platform: CompileType;
    blockTypeId?: string;
    mode: CompileType;
    compilePath: string;
}) => Promise<void>;
declare type CmdDebugStop = (m: ModuleName.debuggerBlock, cmd: CmdEnum.DebuggerStop, opts: {}) => void;
export declare type Command = CmdDebugStart & CmdDebugStop;
export interface CmdMap extends ModuleCmdMap<CmdEnum> {
    [CmdEnum.DebuggerStart]: CmdFun<CmdDebugStart>;
    [CmdEnum.DebuggerStop]: CmdFun<CmdDebugStop>;
}
export declare const DebuggerBlockDesc: ModuleDesc<EventMap, CmdMap, ModuleName.account | ModuleName.compile | ModuleName.storage | ModuleName.ui | ModuleName.service | ModuleName.eventTracker | ModuleName.preview | ModuleName.jssdk | ModuleName.compile>;
export {};
