import * as _slardar_sdk_template from '@slardar/sdk-template';
import { BatchSender, EventBuilder, ContextAgent, Integration, WithContext, Client, WithCommandArray, WithCommandContext } from '@slardar/sdk-template';
import { WebReport, ReportToReportEvent, CommonContext, MonitorConstructor, JsErrorReport, CustomReport, CustomPayload, WebConfig, WithSendCustom, SdkServerSettings, SampleConfig } from '@slardar/sdk-web';
import { CrashReporter } from 'electron';

declare const electronClient: ElectronCommandClient;

declare type ElectronReport = WebReport;
declare type ElectronReportEvent = ReportToReportEvent<ElectronReport>;

declare type ElectronSendEvent = ElectronReport & {
    common: Partial<CommonContext>;
};
declare type ElectronSender = BatchSender<ElectronSendEvent>;

declare type ElectronBuilder = EventBuilder<ElectronReportEvent, ElectronSendEvent>;

declare const JS_ERR_PLUGIN_NAME = "jsError";
declare const JS_ERROR_EV_TYPE = "js_error";
declare type ReportJsError = (ex: any, extra?: Record<string, string>) => void;
interface JSErrorConfig {
    ignoreErrors?: (string | RegExp)[];
    uncaughtException: boolean;
    unhandledRejection: boolean;
    dedupe?: boolean;
}
interface JSErrorMonitorPluginConfig {
    [JS_ERR_PLUGIN_NAME]?: Partial<JSErrorConfig> | boolean;
}
declare type WithCaptureException<C extends ElectronClient> = C & {
    captureException?: ReportJsError;
};
declare function JsErrorMonitorPlugin<C extends ElectronClient>(client: C): void;
interface TearDown$1 {
    (): void;
}
declare type JsErrorMonitorConstructor = MonitorConstructor<JSErrorConfig, JsErrorReport, [
    _process: NodeJS.Process
], [
    ReportJsError,
    TearDown$1
]>;
declare const JsErrorMonitor: JsErrorMonitorConstructor;

declare type State = 'pause' | 'running' | 'stop';
declare type SampleUserConfig = {
    collectInterval: number;
    sampleRate: number;
    collectCb: (() => any) | (() => Promise<any>);
    reportCb: (...args: any[]) => void;
    transSucCb?: (lastState: State, curState: State) => void;
    async?: {
        isWaitTillReturn: boolean;
    };
};

declare const PC_PERF_PLUGIN_NAME = "pcPerf";
declare type PcPerfReport = CustomReport;
declare type PcPerfConfigItem = Partial<{
    collectInterval: SampleUserConfig['collectInterval'];
    sampleRate: SampleUserConfig['sampleRate'];
    async: SampleUserConfig['async'];
    transSucCb: SampleUserConfig['transSucCb'];
    extraMetrics: CustomPayload['metrics'];
    categories: CustomPayload['categories'];
}> & {
    dataGetter: (() => CustomPayload['metrics']) | (() => Promise<CustomPayload['metrics']>);
};
declare type PcPerfUserConfig = {
    cpu: PcPerfConfigItem | false;
    memory: PcPerfConfigItem | false;
};
interface PcPerfMonitorPluginConfig {
    [PC_PERF_PLUGIN_NAME]: PcPerfUserConfig;
}
declare type WithSampleController<C extends ElectronClient> = C & {};
declare function PcPerfMonitorPlugin<C extends ElectronClient>(client: C): void;
interface TearDown {
    (): void;
}
declare type Name = 'cpu' | 'memory';
declare const wrapperFunc: () => {
    startAction: (name: Name, options?: {
        isImmediately: boolean;
    }) => boolean;
    stopAction: (name: Name, options?: {
        isReportAll: boolean;
    }) => boolean;
    pauseAction: (name: Name, options?: {
        capacity: number;
    }) => boolean;
    update: (name: Name, updateConfig: Partial<SampleUserConfig>, options?: {
        isReStartImmediately?: boolean | undefined;
        startOptions?: {
            isImmediately: boolean;
        } | undefined;
        stopOptions?: {
            isReportAll: boolean;
        } | undefined;
    }) => void;
    getState: (name: Name) => State;
    getQueueSize: (name: Name) => number;
};
declare type PcPerfConstructor = MonitorConstructor<PcPerfUserConfig, PcPerfReport, [
], [
    ReturnType<typeof wrapperFunc>,
    TearDown
]>;
declare const PcPerfMonitor: PcPerfConstructor;

declare const addConfigToReportEvent: (ev: ElectronReportEvent, config: ElectronConfig) => ElectronReportEvent;
declare const InjectConfigPlugin: (client: ElectronClient) => void;

declare const addEnvToSendEvent: (ev: ElectronReportEvent) => ElectronReportEvent & {
    extra: Partial<CommonContext> & {
        timestamp: number;
        sdk_version: string;
        sdk_name: string;
    };
};
declare const InjectEnvPlugin: (client: ElectronClient) => void;

declare function getPluginConfig<C>(client: ElectronClient, pluginName: string, defaultConfig: C): C | false;

declare const CRASH_PLUGIN_NAME = "crash";
declare const CRASH_EV_TYPE = "crash";
interface CrashConfig {
    crashReporter: CrashReporter | null;
}
interface CrashMonitorPluginConfig {
    [CRASH_PLUGIN_NAME]: CrashConfig;
}
declare const defaultConfig: CrashConfig;
declare type WithCaptureCrash<C extends ElectronClient> = C;
declare function CrashMonitorPlugin<C extends ElectronClient>(client: C): void;
/** 创建一个通知 context 更新的 listener */
declare function createContextListener(context: ContextAgent, onUpdate: () => void): {
    restoreFns: ((strict?: boolean | undefined) => void)[];
};

declare type ElectronTransportOptions = {
    url: string;
    data?: any;
    success?: (res: any) => void;
    fail?: (err: Error) => void;
};
declare type ElectronTransport = {
    get: (options: ElectronTransportOptions) => void;
    post: (options: ElectronTransportOptions) => void;
};

declare type ElectronConfig = Omit<WebConfig, 'plugins' | 'actionId' | 'heatmap'> & {
    plugins: JSErrorMonitorPluginConfig & PcPerfMonitorPluginConfig & CrashMonitorPluginConfig;
} & {
    bid: string;
    release: string;
    localDataPath?: string;
    useLocalConfig?: boolean;
    env: string;
    serverTimestamp?: number;
    integrations?: Integration<ElectronClient>[];
    transport: ElectronTransport;
    reportDomain: string;
    reportPath: string;
    serverDomain: string;
    serverPath: string;
    crashDomain: string;
    crashPath: string;
};
declare type ElectronUserConfig = Pick<ElectronConfig, 'deviceId' | 'release' | 'userId' | 'env'>;
declare type Optional = Partial<Omit<ElectronConfig, keyof ElectronUserConfig | 'bid' | 'viewId' | 'sessionId' | 'serverTimestamp'>>;
declare type ElectronInitConfig = Pick<ElectronConfig, 'bid' | 'transport'> & Optional & Partial<ElectronUserConfig>;

declare type ElectronClient = WithContext<WithSendCustom<WithCaptureCrash<WithSampleController<WithCaptureException<Client<ElectronReportEvent, ElectronSendEvent, ElectronBuilder, ElectronSender, ElectronInitConfig, ElectronUserConfig, ElectronConfig>>>>>>;
declare type ElectronCommandClient = WithCommandArray<WithCommandContext<ElectronClient>>;

declare type ElectronServerConfig = SdkServerSettings;

declare const electronBuilder: ElectronBuilder;

interface CreateElectronClientConfig {
    createSender?: (c: ElectronConfig) => ElectronSender;
    createDefaultConfig?: (c: Partial<ElectronConfig>) => ElectronConfig;
    builder?: ElectronBuilder;
}
declare const createMinimalElectronClient: ({ createSender, builder, createDefaultConfig, }?: CreateElectronClientConfig) => _slardar_sdk_template.Client<ElectronReportEvent, ElectronSendEvent, ElectronBuilder, ElectronSender, ElectronInitConfig, ElectronUserConfig, ElectronConfig>;
declare const createElectronClient: (config?: CreateElectronClientConfig) => ElectronCommandClient;

declare const DEFAULT_SENDER_BATCH_SIZE = 20;
declare const REPORT_DOMAIN: string;
declare const BATCH_REPORT_PATH: string;
declare const SETTINGS_PATH = "/monitor_web/settings/browser-settings";
declare const SETTINGS_DOMAIN: string;
declare const CRASH_DOMAIN: string;
declare const CRASH_PATH: string;
declare const DEFAULT_SAMPLE_GRANULARITY = "session";
declare const SDK_VERSION: string;
declare const SDK_NAME = "SDK_SLARDAR_ELECTRON";
declare const DEFAULT_SAMPLE_CONFIG: SampleConfig;
declare const STORAGE_PREFIX = "SLARDAR";

declare function validateInitConfig(config: ElectronInitConfig): boolean;
declare function normalizeUserConfig(config: Partial<ElectronUserConfig>): Partial<ElectronConfig>;
declare function initConfigNormalizer(config: Partial<ElectronInitConfig>): Partial<ElectronConfig>;
declare function parseServerConfig(serverConfig?: Partial<ElectronServerConfig>): Partial<ElectronConfig>;

declare const getReportUrl: (domain?: string, path?: string) => string;
declare const getCrashReportUrl: (domain?: string, path?: string) => string;

declare const getDefaultConfig: (_c: Partial<ElectronConfig>) => ElectronConfig;
declare const getDefaultSessionId: () => string;
declare const defaultPlugins: {
    pcPerf: {
        cpu: {
            dataGetter: any;
        };
        memory: {
            dataGetter: any;
        };
    };
    crash: {
        crashReporter: null;
    };
    jsError: {};
};

declare const getSettingsUrl: (serverDomain?: string, serverPath?: string) => string;

declare const getStorageKey: (bid: string) => string;
declare type StorageUserInfo = {
    userId: string;
    deviceId: string;
};
declare const getDefaultUserIdAndDeviceId: (bid?: string, localDataPath?: string | undefined) => StorageUserInfo;
declare const hasSetStorageItem: (bid?: string, localDataPath?: string | undefined) => boolean;
declare const setStorageUserIdAndDeviceId: (config: ElectronConfig) => void;
declare const Storage: {
    get: (name: string, localDataPath: string) => any;
    set: (key: string, value: any, localDataPath: string) => void;
};

interface ConfigHolder {
    __SLARDAR__REPALCE__HOLDER__?: ElectronServerConfig;
    get: () => ElectronServerConfig | undefined;
}
declare const configHolder: ConfigHolder;
declare const createElectronConfigManager: (defaultConfig: ElectronConfig) => {
    getConfig(): ElectronConfig;
    setConfig(c: Partial<ElectronConfig>): ElectronConfig;
    onChange(fn: () => void): void;
    onReady(fn: () => void): void;
};
declare function getServerConfig(config: ElectronConfig, cb: (setting?: any) => void): void;
declare function mergeSampleConfig(a?: Partial<SampleConfig>, b?: Partial<SampleConfig>): Partial<SampleConfig> | undefined;

export { BATCH_REPORT_PATH, CRASH_DOMAIN, CRASH_EV_TYPE, CRASH_PATH, CRASH_PLUGIN_NAME, CrashConfig, CrashMonitorPlugin, CrashMonitorPluginConfig, CreateElectronClientConfig, DEFAULT_SAMPLE_CONFIG, DEFAULT_SAMPLE_GRANULARITY, DEFAULT_SENDER_BATCH_SIZE, ElectronBuilder, ElectronClient, ElectronCommandClient, ElectronConfig, ElectronInitConfig, ElectronReport, ElectronReportEvent, ElectronSendEvent, ElectronSender, ElectronServerConfig, ElectronTransport, ElectronTransportOptions, ElectronUserConfig, InjectConfigPlugin, InjectEnvPlugin, JSErrorConfig, JSErrorMonitorPluginConfig, JS_ERROR_EV_TYPE, JS_ERR_PLUGIN_NAME, JsErrorMonitor, JsErrorMonitorConstructor, JsErrorMonitorPlugin, PC_PERF_PLUGIN_NAME, PcPerfConstructor, PcPerfMonitor, PcPerfMonitorPlugin, PcPerfMonitorPluginConfig, PcPerfReport, PcPerfUserConfig, REPORT_DOMAIN, ReportJsError, SDK_NAME, SDK_VERSION, SETTINGS_DOMAIN, SETTINGS_PATH, STORAGE_PREFIX, Storage, WithCaptureCrash, WithCaptureException, WithSampleController, addConfigToReportEvent, addEnvToSendEvent, configHolder, createContextListener, createElectronClient, createElectronConfigManager, createMinimalElectronClient, electronClient as default, defaultConfig, defaultPlugins, electronBuilder, getCrashReportUrl, getDefaultConfig, getDefaultSessionId, getDefaultUserIdAndDeviceId, getPluginConfig, getReportUrl, getServerConfig, getSettingsUrl, getStorageKey, hasSetStorageItem, initConfigNormalizer, mergeSampleConfig, normalizeUserConfig, parseServerConfig, setStorageUserIdAndDeviceId, validateInitConfig };
