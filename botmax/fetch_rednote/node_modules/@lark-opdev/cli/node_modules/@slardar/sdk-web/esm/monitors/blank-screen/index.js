import { __read } from "tslib";
import { applyPerformance, applyMutationObserver, applyPerformanceObserver, getDefaultBrowser, getDefaultPerformance, getDefaultDocument, getDefaultMutationObserver, getDefaultPerformanceObserver, onPageUnload, applyRequestIdleCallback, now, onDOMContentLoaded, } from '../../utils';
import { screenshot, measure, MAX_RELATED_TIME, blankErrorCompare, MAX_RENDER_TIME, DEFAULT_CHECK_TIME, MAX_CHECK_TIME, isSkipBeforeCheck, } from './util';
export var BlankScreenMonitor = function (win, document, performanceObserver, mutationObserver, performance) {
    if (win === void 0) { win = getDefaultBrowser(); }
    if (document === void 0) { document = getDefaultDocument(); }
    if (performanceObserver === void 0) { performanceObserver = getDefaultPerformanceObserver(); }
    if (mutationObserver === void 0) { mutationObserver = getDefaultMutationObserver(); }
    if (performance === void 0) { performance = getDefaultPerformance(); }
    if (!document || !win) {
        return;
    }
    return function (_b, cb) {
        var threshold = _b.threshold, takeScreenshot = _b.screenshot, rootSelector = _b.rootSelector, autoDetect = _b.autoDetect, ssUrl = _b.ssUrl, quality = _b.quality, mask = _b.mask, partialShot = _b.partialShot;
        var requestIdleCallback = applyRequestIdleCallback(win);
        var _c = __read(applyPerformance(performance), 2), relativeNow = _c[1];
        var blankInfo;
        var errorInfo;
        var otherReportedTimestamp = 0;
        var reported = false;
        var timer;
        var pureReport = function (base64) {
            blankInfo &&
                cb &&
                cb({
                    ev_type: 'blank_screen',
                    payload: {
                        timestamp: blankInfo[0],
                        score: blankInfo[1],
                        screenshot: base64,
                        error: errorInfo,
                    },
                });
        };
        var report = function () {
            if (!blankInfo || reported) {
                return;
            }
            reported = true;
            tearDown();
            takeScreenshot
                ? screenshot({
                    cb: pureReport,
                    screenshotUrl: ssUrl,
                    window: win,
                    document: document,
                    mask: mask,
                    partialShot: partialShot,
                    quality: quality,
                    rootSelector: rootSelector,
                })
                : pureReport();
        };
        var applyOtherReport = function (ev) {
            if (reported || isSkipBeforeCheck(ev))
                return;
            otherReportedTimestamp = now();
            if (errorInfo && otherReportedTimestamp - errorInfo.timestamp > MAX_RELATED_TIME) {
                errorInfo = undefined;
            }
            errorInfo = blankErrorCompare(errorInfo, ev);
        };
        var applyCheck = function (cb) {
            var checkTimer;
            var checkTimestamp;
            return function () {
                if (checkTimer) {
                    return;
                }
                checkTimestamp = now();
                checkTimer = win.setTimeout(function () {
                    checkTimer = 0;
                    if (otherReportedTimestamp > checkTimestamp) {
                        return;
                    }
                    cb();
                }, relativeNow() > MAX_RENDER_TIME ? DEFAULT_CHECK_TIME : MAX_CHECK_TIME);
            };
        };
        var checkAndReport = applyCheck(report);
        onPageUnload(function () {
            !reported && errorInfo && pureReport();
        });
        var schedule = function () {
            timer && clearTimeout(timer);
            timer = win.setTimeout(function () {
                requestIdleCallback(function () {
                    win.requestAnimationFrame(function () {
                        // eslint-disable-next-line compat/compat
                        var element = rootSelector ? document.querySelector(rootSelector) : document.body;
                        if (!element) {
                            return;
                        }
                        var score = measure(element, 0, 0, threshold);
                        if (score < threshold) {
                            blankInfo = [now(), score];
                            checkAndReport();
                        }
                        else {
                            blankInfo = undefined;
                        }
                    });
                });
            }, 1000);
        };
        var tearDown = function () {
            clearTimeout(timer);
            mutDisconnect && mutDisconnect();
            perfDisconnect && perfDisconnect();
        };
        var _d = __read(applyMutationObserver(mutationObserver, schedule), 2), mutObserve = _d[0], mutDisconnect = _d[1];
        var _e = __read(applyPerformanceObserver(performanceObserver, function (_a, _i, arr) { return timer && arr.length > 1 && schedule(); }), 2), perfObserve = _e[0], perfDisconnect = _e[1];
        if (autoDetect)
            // start observe blank screen after DOMContentLoaded
            onDOMContentLoaded(function () {
                var _b;
                mutObserve((_b = getDefaultDocument()) === null || _b === void 0 ? void 0 : _b.body, { subtree: true, childList: true });
                perfObserve('longtask', 'resource');
                schedule();
            });
        return [tearDown, applyOtherReport, schedule];
    };
};
//# sourceMappingURL=index.js.map