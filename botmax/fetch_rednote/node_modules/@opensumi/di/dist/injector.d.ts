import { Provider, Token, InstanceCreator, TokenResult, InstanceOpts, ConstructorOf, InjectorOpts, Domain, Tag, IHookStore, IValidAspectHook, IDisposable } from './declare';
export declare class Injector {
    private opts;
    id: string;
    private instanceIdGenerator;
    depth: number;
    tag?: string;
    hookStore: IHookStore;
    parent?: Injector;
    private tagMatrix;
    private domainMap;
    creatorMap: Map<Token, InstanceCreator>;
    instanceRefMap: Map<any, string>;
    private instanceDisposedEmitter;
    constructor(providers?: Provider[], opts?: InjectorOpts, parent?: Injector);
    createChild(providers?: Provider[], opts?: InjectorOpts): InstanceType<ConstructorOf<this>>;
    get<T extends ConstructorOf<any>>(token: T, args?: ConstructorParameters<T>, opts?: InstanceOpts): TokenResult<T>;
    get<T extends Token>(token: T, opts?: InstanceOpts): TokenResult<T>;
    get<T extends Token, K extends ConstructorOf<any> = ConstructorOf<any>>(token: T, opts?: ConstructorParameters<K>): TokenResult<T>;
    private getTokenForDomain;
    getFromDomain<T = any>(...domains: Domain[]): Array<T>;
    /**
     * Only check this injector whether has the singleton instance.
     */
    hasInstance(instance: any): boolean;
    addProviders(...providers: Provider[]): void;
    overrideProviders(...providers: Provider[]): void;
    parseDependencies(...targets: Token[]): void;
    exchangeToken(token: Token, tag: Tag): Token;
    createHooks(hooks: IValidAspectHook[]): IDisposable;
    createHook<ThisType, Args extends any[], Result>(hook: IValidAspectHook<ThisType, Args, Result>): IDisposable;
    onceInstanceDisposed(instance: any, cb: () => void): (() => void) | undefined;
    disposeOne(token: Token, key?: string): Promise<unknown> | undefined;
    disposeAll(key?: string): Promise<void>;
    protected getTagToken(token: Token, tag: Tag): Token | undefined | null;
    private setProviders;
    private addToDomain;
    private getNextInstanceId;
    private resolveToken;
    private getCreator;
    private getOrSaveInstanceId;
    private createInstance;
    private createInstanceFromClassCreator;
    private getParameters;
    private createInstanceWithInjector;
    getInstanceId(instance: any): string | undefined;
}
