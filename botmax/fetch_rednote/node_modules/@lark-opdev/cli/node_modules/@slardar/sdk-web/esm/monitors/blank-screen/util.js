import { getDefaultPromise, applyRequestIdleCallback, now } from '../../utils';
export var DEFAULT_IGNORE_TAGS = ['SCRIPT', 'STYLE', 'META', 'HEAD'];
export var ERROR_RELATED_TYPE = ['js_error', 'http', 'resource_error'];
export var DEFAULT_THRESHOLD = 1.5;
export var MAX_RENDER_TIME = 10000;
export var MAX_CHECK_TIME = 8000;
export var DEFAULT_CHECK_TIME = 2000;
export var MAX_RELATED_TIME = 10000;
export var DEFAULT_T0_DATA_URL_QUALITY = 0.1;
var CHECK_EXCLUSIVE_EV_TYPES = [
    'performance',
    'performance_longtask',
    'performance_timing',
    'custom',
];
export var isSkipBeforeCheck = function (ev) { return ~CHECK_EXCLUSIVE_EV_TYPES.indexOf(ev.ev_type); };
export var blankErrorCompare = function (relatedError, ev) {
    if (ERROR_RELATED_TYPE.indexOf(ev.ev_type) === -1)
        return relatedError;
    if (ev.ev_type === 'http' && ev.payload.response.status < 400) {
        return relatedError;
    }
    if (relatedError && ERROR_RELATED_TYPE.indexOf(relatedError.type) < ERROR_RELATED_TYPE.indexOf(ev.ev_type)) {
        return relatedError;
    }
    var message = '';
    switch (ev.ev_type) {
        case 'js_error':
            message = ev.payload.error.message;
            break;
        case 'http':
            message = ev.payload.request.url;
            break;
        case 'resource_error':
            message = ev.payload.url;
            break;
        default:
            break;
    }
    return { type: ev.ev_type, message: message, timestamp: now() };
};
export var measure = function (element, depth, sum, threshold, ignoreTags) {
    if (depth === void 0) { depth = 0; }
    if (sum === void 0) { sum = 0; }
    if (threshold === void 0) { threshold = DEFAULT_THRESHOLD; }
    if (ignoreTags === void 0) { ignoreTags = DEFAULT_IGNORE_TAGS; }
    if (!element || ignoreTags.indexOf(element.tagName) > -1 || sum >= threshold || depth > 4) {
        return sum;
    }
    var score = (function () {
        if (!depth)
            return 0;
        var _a = element.getBoundingClientRect(), top = _a.top, height = _a.height;
        return top > innerHeight || height <= 0 ? 0 : 1 / Math.pow(2, depth - 1);
    })();
    return [].reduceRight.call(element.children, function (all, child) { return measure(child, depth + 1, all, threshold, ignoreTags); }, sum + score);
};
export var screenshot = function (_a) {
    var _b;
    var cb = _a.cb, screenshotUrl = _a.screenshotUrl, window = _a.window, document = _a.document, mask = _a.mask, partialShot = _a.partialShot, quality = _a.quality, rootSelector = _a.rootSelector;
    if (!getDefaultPromise() || !window || !document) {
        return;
    }
    function onload() {
        var requestIdleCallback = applyRequestIdleCallback(window);
        requestIdleCallback(function () {
            window.html2canvas &&
                window.html2canvas((partialShot && rootSelector && document.querySelector(rootSelector)) || document.body, {
                    scale: 360 / window.innerWidth,
                    mask: mask,
                }).then(function (canvas) {
                    cb(canvas.toDataURL('image/jpeg', quality));
                });
        });
    }
    if (window.html2canvas) {
        return onload();
    }
    var script = document.createElement('script');
    script.src = screenshotUrl;
    // eslint-disable-next-line compat/compat
    (_b = document.head) === null || _b === void 0 ? void 0 : _b.appendChild(script);
    script.onload = onload;
};
//# sourceMappingURL=util.js.map