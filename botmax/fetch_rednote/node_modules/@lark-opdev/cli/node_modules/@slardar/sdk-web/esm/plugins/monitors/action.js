import { __read } from "tslib";
import { initSubjectInGlobal } from '@slardar/sdk-template';
import { fetchSubject, XHR_SUBJECT_NAME, applyXHR } from '../../collector/http';
import { actionGetterWithFetchObserver } from '../../monitors/action';
import { getDefaultDocument, getDefaultBrowser } from '../../utils';
import { getPluginConfig } from './utils';
export var ACTION_MONITOR_PLUGIN_NAME = 'action';
var defaultConfig = {
    types: ["click" /* CLICK */],
};
export function ActionMonitorBasePlugin(client, config) {
    if (config === void 0) { config = defaultConfig; }
    var tearDownGroup = [];
    var document = getDefaultDocument();
    var window = getDefaultBrowser();
    if (!document || !window)
        return;
    var _a = __read(actionGetterWithFetchObserver(client.report.bind(client), tearDownGroup, [
        initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
        initSubjectInGlobal(client, fetchSubject),
    ], config), 2), applyOtherReport = _a[0], startAction = _a[1];
    var listenOtherReport = function (ev) {
        var actionId = applyOtherReport(ev);
        actionId && ev.extra && (ev.extra.action_id = actionId);
        return ev;
    };
    client.on('report', listenOtherReport);
    client.provide('startAction', startAction);
    client.on('beforeDestroy', function () {
        tearDownGroup.forEach(function (e) { return e(); });
        client.off('report', listenOtherReport);
    });
}
export function ActionMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, ACTION_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        ActionMonitorBasePlugin(client, config);
    });
}
//# sourceMappingURL=action.js.map