import { __assign } from "tslib";
import test from 'ava';
import { omit } from 'sdk-template/src/utils';
import sinon from 'sinon';
import { mockTransport } from '../../__test__/utils/mockTransport';
import { createElectronClient } from '../../client';
import { defaultPlugins } from '../../utils';
import { createContextListener } from '../crash';
function createMockClient() {
    var mockStart = sinon.stub();
    var mockAddExtraParameter = sinon.stub();
    var client = createElectronClient();
    client.init({
        bid: 'test',
        deviceId: '1',
        transport: mockTransport(),
        plugins: __assign(__assign({}, defaultPlugins), { crash: {
                crashReporter: {
                    start: mockStart,
                    addExtraParameter: mockAddExtraParameter,
                },
            } }),
    });
    return { client: client, mockStart: mockStart, mockAddExtraParameter: mockAddExtraParameter };
}
test('should subscribe context update', function (t) {
    var mockContext = {
        set: sinon.stub(),
        merge: sinon.stub(),
        delete: sinon.stub(),
        clear: sinon.stub(),
        get: sinon.stub(),
        toString: sinon.stub(),
    };
    var originContext = __assign({}, mockContext);
    var update = sinon.stub();
    var restoreFns = createContextListener(mockContext, update).restoreFns;
    t.notDeepEqual(originContext, mockContext);
    mockContext.set();
    t.is(update.callCount, 1);
    mockContext.merge();
    t.is(update.callCount, 2);
    mockContext.delete();
    t.is(update.callCount, 3);
    mockContext.clear();
    t.is(update.callCount, 4);
    mockContext.set();
    t.is(update.callCount, 5);
    mockContext.get();
    mockContext.toString();
    t.is(update.callCount, 5);
    restoreFns.forEach(function (fn) { return fn(); });
    t.deepEqual(originContext, mockContext);
});
test('should update extraParameters', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, mockStart = _c.mockStart, mockAddExtraParameter = _c.mockAddExtraParameter;
    t.deepEqual(omit(mockStart.getCall(0).args[0].extra, 'slardar_session_id'), {
        bid: 'test',
        context: '{}',
        ev_type: 'pc_crash',
        slardar_web_id: '1',
    });
    mockAddExtraParameter.reset();
    client.config({ deviceId: '2' });
    t.deepEqual(mockAddExtraParameter.getCall(2).args, ['slardar_web_id', '2']);
    t.deepEqual(mockAddExtraParameter.getCall(4).args, ['context', '{}']);
    mockAddExtraParameter.reset();
    client.config({ env: '111' });
    t.false(mockAddExtraParameter.called);
    mockAddExtraParameter.reset();
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('1', '2');
    t.deepEqual(mockAddExtraParameter.getCall(2).args, ['slardar_web_id', '2']);
    t.deepEqual(mockAddExtraParameter.getCall(4).args, ['context', JSON.stringify({ '1': '2' })]);
    mockAddExtraParameter.reset();
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.clear();
    t.deepEqual(mockAddExtraParameter.getCall(2).args, ['slardar_web_id', '2']);
    t.deepEqual(mockAddExtraParameter.getCall(4).args, ['context', '{}']);
});
//# sourceMappingURL=crash.spec.js.map