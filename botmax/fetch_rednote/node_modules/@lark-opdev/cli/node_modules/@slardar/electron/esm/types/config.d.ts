import { Integration } from '@slardar/sdk-template';
import { WebConfig } from '@slardar/sdk-web';
import { JSErrorMonitorPluginConfig, PcPerfMonitorPluginConfig } from '../plugins';
import { CrashMonitorPluginConfig } from '../plugins/crash';
import { ElectronClient } from './client';
import { ElectronTransport } from './transport';
export declare type ElectronConfig = Omit<WebConfig, 'plugins' | 'actionId' | 'heatmap'> & {
    plugins: JSErrorMonitorPluginConfig & PcPerfMonitorPluginConfig & CrashMonitorPluginConfig;
} & {
    bid: string;
    release: string;
    localDataPath?: string;
    useLocalConfig?: boolean;
    env: string;
    serverTimestamp?: number;
    integrations?: Integration<ElectronClient>[];
    transport: ElectronTransport;
    reportDomain: string;
    reportPath: string;
    serverDomain: string;
    serverPath: string;
    crashDomain: string;
    crashPath: string;
};
export declare type ElectronUserConfig = Pick<ElectronConfig, 'deviceId' | 'release' | 'userId' | 'env'>;
declare type Optional = Partial<Omit<ElectronConfig, keyof ElectronUserConfig | 'bid' | 'viewId' | 'sessionId' | 'serverTimestamp'>>;
export declare type ElectronInitConfig = Pick<ElectronConfig, 'bid' | 'transport'> & Optional & Partial<ElectronUserConfig>;
export {};
