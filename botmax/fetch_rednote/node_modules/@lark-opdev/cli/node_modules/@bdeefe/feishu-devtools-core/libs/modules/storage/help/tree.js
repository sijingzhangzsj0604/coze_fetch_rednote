"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class Tree{constructor(){this.handlers=[],this.children=new Map}addListener(e,t=[]){if(0===t.length)this.handlers.push(e);else{const s=t.shift(),h=this.children.get(s)||new Tree;h.addListener(e,t),this.children.has(s)||this.children.set(s,h)}return e}remove(e,t,s,h){if(0===t.length){const t=this.handlers.indexOf(e);return-1!==t&&(this.handlers.splice(t,1),s&&0===this.handlers.length&&0===this.children.size&&s.children.delete(h),!0)}{const s=t.shift();return this.remove(e,t,this,s)}}removeListener(e,t=[]){return this.remove(e,t)}run(e){if(e.includes(this))return;const t=this.handlers.slice();for(let e=0,s=t.length;e<s;e++)t[e]();e.push(this);for(const t of this.children.values())t.run(e)}_emit(e){if(e.length){const t=e.shift(),s=this.children.get(t);s&&s._emit(e)}else this.run(Tree.hasRun)}emit(e){if(e.length)for(let t=0,s=e.length;t<s;t++)this._emit(e[t]);else this.run(Tree.hasRun);Tree.hasRun.length=0}}exports.default=Tree,Tree.hasRun=[];