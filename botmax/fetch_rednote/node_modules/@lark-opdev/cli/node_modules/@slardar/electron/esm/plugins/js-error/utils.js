import { isError, isEvent, isPlainObject, isString, pick, safeStringify } from '@slardar/sdk-template';
export var dedupe = function () {
    var __previousError;
    return function (currentError) {
        if (shouldDropEvent(currentError, __previousError)) {
            __previousError = currentError;
            return undefined;
        }
        __previousError = currentError;
        return currentError;
    };
};
var shouldDropEvent = function (currentError, previousError) {
    if (!currentError || !previousError) {
        return false;
    }
    if (isSameErrorString(currentError.message, previousError.message) ||
        isSameErrorString(currentError.stack, previousError.stack)) {
        return true;
    }
    return false;
};
var isSameErrorString = function (current, previous) {
    return current && previous && current === previous;
};
var ERROR_FIELDS = ['name', 'message', 'stack', 'filename', 'lineno', 'colno'];
export var normalize = function (ex) {
    var error;
    if (!isError(ex)) {
        if (isPlainObject(ex) || isEvent(ex) || isString(ex)) {
            error = {
                message: safeStringify(ex),
            };
        }
    }
    else {
        error = pick(ex, ERROR_FIELDS);
    }
    return error;
};
//# sourceMappingURL=utils.js.map