"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParameterDeps = exports.getParameterOpts = exports.setParameterIn = exports.setParameters = void 0;
var reflect_helper_1 = require("./reflect-helper");
var PARAMETER_KEY = Symbol('PARAMETER_KEY');
var parametersMeta = (0, reflect_helper_1.createConstructorMetadataManager)(PARAMETER_KEY);
function getParameters(target) {
    return parametersMeta.get(target) || [];
}
function setParameters(target, parameters) {
    return parametersMeta.set(parameters, target);
}
exports.setParameters = setParameters;
var TOKEN_KEY = Symbol('TOKEN_KEY');
var tokenMeta = (0, reflect_helper_1.createConstructorMetadataManager)(TOKEN_KEY);
function getParameterTokens(target) {
    return tokenMeta.get(target) || [];
}
function setParameterIn(target, opts, index) {
    var tokens = __spreadArray([], __read(getParameterTokens(target)), false);
    tokens[index] = opts;
    return tokenMeta.set(tokens, target);
}
exports.setParameterIn = setParameterIn;
function getParameterOpts(target) {
    var parameters = getParameters(target).map(function (token) { return ({ token: token }); });
    var tokens = getParameterTokens(target);
    return mergeParameters(parameters, tokens);
}
exports.getParameterOpts = getParameterOpts;
function getParameterDeps(target) {
    var opts = getParameterOpts(target);
    return opts.map(function (_a) {
        var token = _a.token;
        return token;
    });
}
exports.getParameterDeps = getParameterDeps;
function mergeParameters(first, second) {
    var arr = [];
    var len = Math.max(first.length, second.length);
    if (len === 0) {
        return [];
    }
    for (var i = 0; i < len; i++) {
        var item = second[i];
        if (item) {
            arr[i] = item;
        }
        else {
            arr[i] = first[i];
        }
    }
    return arr;
}
