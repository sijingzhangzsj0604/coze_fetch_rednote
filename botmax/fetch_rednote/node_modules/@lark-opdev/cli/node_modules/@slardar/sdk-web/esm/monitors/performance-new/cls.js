import { __read } from "tslib";
import { observePerfWithBuffer } from '../../collector/pref';
import { getDefaultPerformanceObserver } from '../../utils';
import { initMetric } from '../performance/util';
import { applyReportMetric } from './util';
export var LS_ENTRY_NAME = 'layout-shift';
export var CLS_METRIC_NAME = "cls" /* cls */;
export var applyHandleEntries = function () {
    var sessionValue = 0;
    var sessionTimes = [];
    var resetSessionValue = function () {
        sessionValue = 0;
    };
    var handleEntriesWithMetric = function (callback, entry) {
        // Only count layout shifts without recent user input.
        if (!entry.hadRecentInput) {
            var firstSessionTime = sessionTimes[0];
            var lastSessionTime = sessionTimes[sessionTimes.length - 1];
            if (sessionValue && entry.startTime - lastSessionTime < 1000 && entry.startTime - firstSessionTime < 5000) {
                sessionValue += entry.value;
                sessionTimes.push(entry.startTime);
            }
            else {
                sessionValue = entry.value;
                sessionTimes = [entry.startTime];
            }
            callback(sessionValue);
        }
    };
    return [resetSessionValue, handleEntriesWithMetric];
};
var getCLS = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 3), hiddenObserver = _b[0], unloadObserver = _b[1], pvObserver = _b[2];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var metric = initMetric(CLS_METRIC_NAME, 0);
    var reportMetric = applyReportMetric(report);
    if (!PerformanceObserver) {
        metric.isSupport = false;
        reportMetric(metric);
        return;
    }
    var _c = __read(applyHandleEntries(), 2), resetSessionValue = _c[0], handleEntriesWithMetric = _c[1];
    var handleEntries = handleEntriesWithMetric.bind(null, function (sessionValue) {
        sessionValue > metric.value && (metric.value = sessionValue);
    });
    tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, handleEntries, LS_ENTRY_NAME));
    tearDownGroup.push(hiddenObserver[0](resetSessionValue));
    tearDownGroup.push(pvObserver[0](function (overrides) {
        reportMetric(metric, overrides);
        resetSessionValue();
        metric = initMetric(CLS_METRIC_NAME, 0);
    }));
    tearDownGroup.push(unloadObserver[0](function () {
        reportMetric(metric);
    }));
};
export var CLS = [CLS_METRIC_NAME, getCLS];
//# sourceMappingURL=cls.js.map