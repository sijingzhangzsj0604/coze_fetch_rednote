import { parseUrl } from '../../utils';
export var getDefaultExtractor = function (routeMode) { return function (url) {
    var _a;
    if (routeMode === 'hash') {
        return ((_a = parseUrl(url).hash) === null || _a === void 0 ? void 0 : _a.replace(/^#/, '')) || '/';
    }
    else {
        return parseUrl(url).path;
    }
}; };
export var applyOnPidChange = function (cb, initPid, firstOriginPid, onPidUpdate) {
    // store originalPid from url
    var originalPid = firstOriginPid;
    // store finalPid send to server
    var finalPid = initPid;
    // set init pid in config
    onPidUpdate && onPidUpdate(initPid);
    var onPidChange = function (source, newPid, customPid) {
        // newPid is extractPid from url, should send pageview if changed, no matter customPid changed
        if (source !== "user_set" /* user_set */ && newPid !== originalPid) {
            originalPid = newPid;
            finalPid = customPid !== null && customPid !== void 0 ? customPid : originalPid;
            onPidUpdate && onPidUpdate(finalPid); // update pid in common
            cb(source, finalPid);
            // newPid is by user set, should send pageview if not equal to finalPid
        }
        else if (source === "user_set" /* user_set */ && newPid !== finalPid) {
            finalPid = newPid;
            onPidUpdate && onPidUpdate(finalPid); // update pid in common
            cb(source, finalPid);
        }
    };
    var sendInit = function () {
        initPid && cb("init" /* init */, initPid);
    };
    return [onPidChange, sendInit];
};
export var applyOnUrlChange = function (cb, initUrl) {
    var url = initUrl;
    var onUrlChange = function (source, newUrl) {
        if (newUrl !== url) {
            url = newUrl;
            cb(source, url);
        }
    };
    return [onUrlChange];
};
export var wrapPageview = function (source, pid) { return ({
    ev_type: 'pageview',
    payload: {
        pid: pid,
        source: source,
    },
}); };
export var applyReportPageview = function (report) {
    return function (source, pid) {
        report(wrapPageview(source, pid));
    };
};
export var isManualMode = function (routeMode) { return routeMode === 'manual'; };
//# sourceMappingURL=util.js.map