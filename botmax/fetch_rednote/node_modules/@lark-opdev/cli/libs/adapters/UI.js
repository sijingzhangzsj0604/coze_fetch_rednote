"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const open_1 = __importDefault(require("open"));
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const feishu_devtools_core_1 = require("@bdeefe/feishu-devtools-core");
const ora_1 = __importDefault(require("ora"));
const AppName = {
    darwin: 'google chrome',
    linux: 'google-chrome',
    win32: 'chrome',
};
function getMsg(pre, msg) {
    return pre ? `${pre}(${msg})` : msg;
}
class UI extends feishu_devtools_core_1.UIModule {
    [feishu_devtools_core_1.UICmdEnum.pick](list, message) {
        return inquirer_1.default
            .prompt([
            {
                type: 'list',
                name: 'pick',
                message,
                choices: list,
            },
        ])
            .then((ans) => ans.pick);
    }
    [feishu_devtools_core_1.UICmdEnum.showInfo](info) {
        const msg = getMsg(info.title, info.content);
        if (info.type) {
            switch (info.type) {
                case 'error':
                    console.error(chalk_1.default.red(msg));
                    break;
                case 'info':
                    console.log(msg);
                    break;
                case 'warn':
                    console.warn(chalk_1.default.yellow(msg));
            }
        }
        else {
            console.log(msg);
        }
    }
    [feishu_devtools_core_1.UICmdEnum.confirm](info) {
        return inquirer_1.default
            .prompt([
            {
                name: 'confirm',
                message: getMsg(info.title, info.content),
                default: info.default,
                type: 'confirm',
            },
        ])
            .then((ans) => ans.confirm);
    }
    [feishu_devtools_core_1.UICmdEnum.input](info) {
        return inquirer_1.default
            .prompt([
            {
                name: 'input',
                type: 'input',
                message: getMsg(info.label, info.placeholder),
                validate(input) {
                    if (info.checker) {
                        return info.checker(input);
                    }
                    return true;
                },
                default: info.default,
            },
        ])
            .then((ans) => ans.input);
    }
    [feishu_devtools_core_1.UICmdEnum.openPage](url, options) {
        if (options === null || options === void 0 ? void 0 : options.forceChrome) {
            const opt = {
                wait: true,
            };
            if (process.platform in AppName) {
                opt.app = [AppName[process.platform]];
            }
            (0, open_1.default)(url, opt).catch((error) => {
                if (error.message.includes('Exited with code')) {
                    throw new Error('Chrome is not installed, the simulator requires Chrome');
                }
                throw error;
            });
        }
        else {
            (0, open_1.default)(url);
        }
        return Promise.resolve();
    }
    [feishu_devtools_core_1.UICmdEnum.link](url, tooltip) {
        return (0, terminal_link_1.default)(tooltip || '', url, {
            fallback(text, url) {
                return url;
            },
        });
    }
    [feishu_devtools_core_1.UICmdEnum.dialog](info) {
        console.log('info', info);
    }
    [feishu_devtools_core_1.UICmdEnum.showLoading](info) {
        const loading = (0, ora_1.default)({
            text: info.text,
        });
        loading.start();
        return {
            hideLoading: () => loading.stop(),
        };
    }
    [feishu_devtools_core_1.UICmdEnum.multiPick](list, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const ans = yield inquirer_1.default.prompt([
                {
                    type: 'checkbox',
                    name: 'multiSelect',
                    message,
                    choices: list,
                },
            ]);
            return ans.multiSelect;
        });
    }
}
exports.default = UI;
