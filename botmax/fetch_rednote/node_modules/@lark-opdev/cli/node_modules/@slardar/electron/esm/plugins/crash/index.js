import { __assign, __read, __values } from "tslib";
import { hookObjectProperty, safeStringify } from '@slardar/sdk-template';
import { getCrashReportUrl } from '../../utils';
import { getPluginConfig } from '../utils';
export var CRASH_PLUGIN_NAME = 'crash';
export var CRASH_EV_TYPE = 'crash';
export var defaultConfig = {
    crashReporter: null,
};
export function CrashMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, CRASH_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var c = client.config();
        start(c, client.context);
        // 订阅 context 的更新
        var restoreFns = createContextListener(client.context, function () {
            addExtraParameters(config.crashReporter, getExtra(client.config(), client.context).extra);
        }).restoreFns;
        var needUpdateFields = false;
        // 当 config 将要更新时
        var extraFields = ['bid', 'deviceId', 'sessionId'];
        client.on('beforeConfig', function (newConfig) {
            var e_1, _a;
            try {
                for (var extraFields_1 = __values(extraFields), extraFields_1_1 = extraFields_1.next(); !extraFields_1_1.done; extraFields_1_1 = extraFields_1.next()) {
                    var field = extraFields_1_1.value;
                    if (!newConfig[field]) {
                        continue;
                    }
                    if (client.config()[field] !== newConfig[field]) {
                        needUpdateFields = true;
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (extraFields_1_1 && !extraFields_1_1.done && (_a = extraFields_1.return)) _a.call(extraFields_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        // 当更新配置时
        client.on('config', function () {
            if (needUpdateFields) {
                addExtraParameters(config.crashReporter, getExtra(client.config(), client.context).extra);
            }
            needUpdateFields = false;
        });
        function start(c, context) {
            var submitURL = getCrashReportUrl(c.crashDomain, c.crashPath);
            if (!config) {
                return;
            }
            if (config.crashReporter) {
                config.crashReporter.start(__assign({ compress: false, companyName: 'CrashReporterPlugin', productName: 'Slardar_Crash_Report', submitURL: submitURL }, getExtra(c, context)));
            }
        }
        function getExtra(c, context) {
            return {
                extra: {
                    bid: c.bid,
                    ev_type: 'pc_crash',
                    slardar_web_id: typeof c.deviceId === 'string' ? c.deviceId : '',
                    slardar_session_id: c.sessionId,
                    context: safeStringify(context === null || context === void 0 ? void 0 : context.toString()),
                },
            };
        }
        function addExtraParameters(crashReporter, extras) {
            if (crashReporter) {
                Object.entries(extras).forEach(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    crashReporter.addExtraParameter(k, v);
                });
            }
        }
        var tearDown = function () {
            restoreFns.forEach(function (fn) { return fn(); });
        };
        client.on('beforeDestroy', tearDown);
    });
}
//TODO: 目前没有通知 context 更新的能力，这里先使用 hook 的方式解决
/** 创建一个通知 context 更新的 listener */
export function createContextListener(context, onUpdate) {
    var hookMethods = ['set', 'merge', 'delete', 'clear'];
    var restoreFns = hookMethods.map(function (method) {
        return hookObjectProperty(context, method, function (origin) {
            return function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var res = origin.apply(context, params);
                try {
                    // eslint-disable-next-line no-empty
                }
                catch (error) { }
                onUpdate();
                return res;
            };
        })();
    });
    return { restoreFns: restoreFns };
}
//# sourceMappingURL=index.js.map