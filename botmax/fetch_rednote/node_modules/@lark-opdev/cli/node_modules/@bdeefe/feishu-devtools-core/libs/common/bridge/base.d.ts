import { ApiMap, HandlerMap, Schema, Config, InvokeParam, SubscribeParam, Param, SDK } from './types';
export default abstract class Bridge<A extends ApiMap, E extends HandlerMap, S = Schema<A, E>> {
    private transform;
    private format;
    private listenerMap;
    private id;
    private tasks;
    private execute;
    constructor(conf: Config<A, E, S> | void | SDK<A, Bridge<A, E, S>>, sdk: SDK<A, Bridge<A, E, S>> | void, autoInit?: boolean);
    invoke(id: number, param: InvokeParam<A>): void;
    subscribe<N extends keyof A>(name: N, param: SubscribeParam<A, N>): void;
    addEventListener<N extends keyof E>(name: N, handler: E[N]): () => void;
    sendData(name: keyof E, data: Param<E[keyof E]>): void;
    protected messageHandler: (data: S) => void;
    protected abstract postMessage(data: S): void;
    protected abstract onmessage(): void;
}
