declare module '@ies/starling_intl' {
  export { IntlMessageFormat } from '@ies/intl-icu-plugin'

  import type {
    InitOptions,
    TFunction,
    Callback,
    FallbackLng,
    TFunctionKeys,
    StringMap,
    i18n
  } from 'i18next'

  /**
   * 插值 Missing 后的业务兜底方法
   */
  export type IMissingInterpolationHandler = (param: {
    key: string
    text: string
    locale: string
    interpolation: { key: string; val: any }
  }) => string

  /**
   * Intl 插件类型
   */
  export enum IntlModuleType {
    intl3rdParty = 'intl3rdParty',
    backend = 'backend',
    logger = 'logger',
    languageDetector = 'languageDetector',
    postProcessor = 'postProcessor',
    i18nFormat = 'i18nFormat',
    '3rdParty' = '3rdParty'
  }

  /**
   * Intl 插件需要实现的接口
   */
  export interface IntlModule<T extends keyof typeof IntlModuleType = any> {
    type: T
    name?: string
    init?: (i18n: any) => void | Promise<any>
  }

  /**
   * Intl 第三方插件类型
   */
  export type IntlThirdPartyModule = IntlModule<'intl3rdParty'>

  /**
   * ICU 配置，在 ICU 插件中去 declare module 进行扩展声明
   */
  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  export interface IIcuConfig {
    [k: string]: any
  }

  /**
   * 初始化 Intl 实例配置参数
   */
  export interface IIntlInitOptions extends Omit<InitOptions, 'missingInterpolationHandler'> {
    /**
     * t 方法是否开启第三个参数兜底
     * @default true
     */
    thirdParamFallback?: boolean

    /**
     * 忽略所有控制台输出，不建议设置为 true
     * @default false
     */
    ignoreWarning?: boolean

    /**
     * ICU 配置
     */
    icuConfig?: IIcuConfig

    /**
     * 插值 Missing 业务兜底
     * @see https://starling.bytedance.net/open/content/9163/111691#插值相关
     */
    missingInterpolationHandler?: IMissingInterpolationHandler
  }

  /**
   * I18n 内核
   */
  export class I18nCore {
    public instance: i18n
  }

  /**
   * Starling Intl
   */
  export class Intl {
    public i18nInstance: I18nCore

    constructor()

    /**
     * 初始化 I18n 实例，这是一个异步方法
     * @async
     */
    init(config: IIntlInitOptions, callback?: Callback): Promise<{ err: Error; t: TFunction }>

    /**
     * 注册一个插件，支持链式调用
     */
    use(plugin: IntlModule): Intl

    /**
     * 获取当前国际化语言
     */
    get language(): string

    /**
     * 设置语言
     */
    setLang(lng: string, callback?: Callback): void

    /**
     * 获取 i18n 实例初始化的所有语言，第一个值为当前语言
     */
    getLanguages(): FallbackLng

    /**
     * 获取当前语言的文字排版方向
     */
    dir(): 'ltr' | 'rtl'

    /**
     * 为某个语言动态添加文案，常见与 @ies/starling_client 配合使用
     *
     * ```javascript
     * i18n.addResourceBundle(
     *   i18n.language, // 当前语言
     *   'translation', // 默认的命名空间是 translation，无需修改
     *   {}, // 文本 KV
     *   true, // 下面两项在初始化时建议为 true
     *   true
     * )
     * ```
     */
    addResourceBundle(
      lng: string,
      ns: string,
      resources: any,
      deep?: boolean,
      overwrite?: boolean
    ): void

    /**
     * 国际化文案
     *
     * ```javascript
     * i18n.t('文案 Key', { 插值Key: 插值Val }, '兜底文案')
     * ```
     */
    t<TKeys extends TFunctionKeys = string, TInterpolationMap extends object = StringMap>(
      keys: TKeys | TKeys[],
      options?: TInterpolationMap,
      fallbackText?: string
    ): string
  }

  export const I18n: Intl
  export const I18nConstructor: new () => Intl

  export default I18n
}
