import { __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-optional-chain */
import { noop } from '@slardar/sdk-template';
import { getDefaultPerformanceObserver, getDefaultPerformance, applyPerformanceObserver, applyPerformance, invokeCallbackOnce, } from '../../../utils';
import { FCP_ENTRY_NAME } from '../paint-monitor';
import { initMetric } from '../util';
var MPFIDMonitorMetricName = 'mpfid';
var LONGTASK = 'longtask';
export var MPFIDMonitor = function (PerformanceObserver, performance) {
    if (PerformanceObserver === void 0) { PerformanceObserver = getDefaultPerformanceObserver(); }
    if (performance === void 0) { performance = getDefaultPerformance(); }
    return function (props, cb) {
        var metric = initMetric(MPFIDMonitorMetricName, 0);
        var _a = __read(invokeCallbackOnce(cb), 1), invokeCbOnce = _a[0];
        if (!PerformanceObserver) {
            metric.isSupport = false;
            invokeCbOnce(metric);
            return [noop];
        }
        var list = [];
        var precollect = props.precollect;
        // 处理预收集数据
        if (precollect) {
            ;
            (precollect.entries || []).forEach(function (entry) {
                entry.entryType === LONGTASK && list.push(entry);
            });
        }
        // 持续监听并记录下 longtask
        var _b = __read(applyPerformanceObserver(PerformanceObserver, function (entry) { return list.push(entry); }), 2), observe = _b[0], disconnect = _b[1];
        observe(LONGTASK);
        // MPFID 理论上是第一次交互时, 但是first-input本身有兼容性问题  后续考虑polyfill支持, 调整结算时机
        // 从记录中计算出 duration 最长的时间作为 mpfid
        var triggerMPFID = function () {
            disconnect();
            var _a = __read(applyPerformance(performance), 5), getEntriesByName = _a[4];
            var paint = getEntriesByName(FCP_ENTRY_NAME)[0];
            var FCPStartTime = (paint && paint.startTime) || 0;
            metric.value = list.reduce(function (res, _a) {
                var duration = _a.duration, startTime = _a.startTime;
                return (res < duration && startTime > FCPStartTime ? duration : res);
            }, 0);
            invokeCbOnce(metric);
        };
        return [triggerMPFID];
    };
};
//# sourceMappingURL=index.js.map