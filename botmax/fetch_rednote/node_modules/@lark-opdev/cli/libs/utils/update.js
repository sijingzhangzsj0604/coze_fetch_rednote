"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeFGData = exports.getFGData = exports.writeUpdateData = exports.fetchUpdateData = void 0;
const axios_1 = __importDefault(require("axios"));
const index_1 = __importDefault(require("@bdeefe/feishu-devtools-core/libs/utils/update/index"));
class CliUpdate extends index_1.default {
    fetchDebugTemplateMeta() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = process.env.DEBUG_TEMPLATES_ROOT;
            if (!url) {
                throw new Error(JSON.stringify({
                    msg: 'can not find DEBUG_TEMPLATES_ROOT in env variables',
                }));
            }
            const response = yield axios_1.default.get(url);
            if (response.status === 200 && response.data) {
                const config = response.data;
                return config;
            }
            else {
                throw new Error(JSON.stringify({ msg: 'fetch template meta error' }));
            }
        });
    }
    writeDebugTemplateMeta() {
        return __awaiter(this, void 0, void 0, function* () {
            this.debugTemplateMeta = yield this.fetchDebugTemplateMeta();
        });
    }
    getUpdateData() {
        const data = super.getUpdateData();
        if (this.debugTemplateMeta) {
            data.cli.templateMeta = this.debugTemplateMeta;
        }
        return data;
    }
}
const update = new CliUpdate();
exports.fetchUpdateData = update.fetchUpdateData.bind(update);
exports.writeUpdateData = update.writeUpdateData.bind(update);
exports.getFGData = update.getFGData.bind(update);
exports.writeFGData = update.writeFGData.bind(update);
exports.default = update;
