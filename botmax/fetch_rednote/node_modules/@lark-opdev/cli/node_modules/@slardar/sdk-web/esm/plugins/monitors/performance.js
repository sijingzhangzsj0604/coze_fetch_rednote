import { __assign, __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { PerformanceMonitor } from '../../monitors/performance';
import { CLSMonitor } from '../../monitors/performance/cls-monitor';
import { LongtaskMonitor } from '../../monitors/performance/longtask-monitor';
import { SPAMonitor } from '../../monitors/performance/spa-monitor';
import { defaultMetricContext } from '../../monitors/performance/util';
import { applyMonitor, onPageUnload, getLocationUrl } from '../../utils';
import { getPluginConfig, reportOnInitCommonParams } from './utils';
export var PERFORMANCE_MONITOR_PLUGIN_NAME = 'performance';
export var defaultPerformancePrecollect = {
    entries: [],
    observer: undefined,
};
var defaultConfig = {
    fp: true,
    fcp: true,
    fid: true,
    mpfid: true,
    lcp: true,
    cls: true,
    timing: true,
    longtask: true,
};
export function PerformanceMonitorPlugin(client) {
    client.on('init', function () {
        var _a;
        var precollect = client.pp || defaultPerformancePrecollect;
        // clear precollect observer no matter what is configured
        (_a = precollect.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
        var config = getPluginConfig(client, PERFORMANCE_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        applyMonitor(PerformanceMonitor, __assign(__assign({}, config), { precollect: precollect }), reportOnInitCommonParams(client));
        var sendPrefMetric = function (metric) {
            client.report({ ev_type: 'performance', payload: metric });
        };
        // spa_load
        var _b = __read(applyMonitor(SPAMonitor, 0, sendPrefMetric), 2), performanceInit = _b[0], performanceSend = _b[1];
        client.provide('performanceInit', performanceInit);
        client.provide('performanceSend', performanceSend);
        // longtasks
        if (config.longtask) {
            var sendPerformanceLongtask = function (longtaskPayload) {
                client.report({ ev_type: 'performance_longtask', payload: longtaskPayload });
            };
            var _c = __read(applyMonitor(LongtaskMonitor, { precollect: precollect }, sendPerformanceLongtask), 1), longtaskTearDown = _c[0];
            client.on('beforeDestroy', longtaskTearDown);
        }
        // cls
        if (config.cls) {
            var originUrl_1 = getLocationUrl();
            var sendCLS = function (metric) {
                client.report({ ev_type: 'performance', payload: metric, overrides: { url: originUrl_1 } });
            };
            var _d = __read(applyMonitor(CLSMonitor, [precollect], sendCLS), 2), countAndClear_1 = _d[0], tearDown = _d[1];
            client.on('beforeConfig', function (newConfig) {
                var _a;
                if (newConfig.viewId && newConfig.viewId !== ((_a = client.config()) === null || _a === void 0 ? void 0 : _a.viewId)) {
                    countAndClear_1();
                    originUrl_1 = getLocationUrl();
                }
            });
            client.on('beforeDestroy', tearDown);
            onPageUnload(countAndClear_1);
        }
        // clear precollect data after consumed
        precollect.entries.length = 0;
        // provide custom performance API
        var invokeCustomMetricCb = function (customMetric) {
            var payload = __assign(__assign(__assign({}, defaultMetricContext), customMetric), { isCustom: true });
            sendPrefMetric(payload);
        };
        client.provide('sendCustomPerfMetric', invokeCustomMetricCb);
    });
}
//# sourceMappingURL=performance.js.map