import { __read } from "tslib";
import { observePerfWithBuffer } from '../../collector';
import { getDefaultPerformanceObserver } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
export var LCP_ENTRY_NAME = 'largest-contentful-paint';
export var LCP_METRIC_NAME = "lcp" /* lcp */;
var LCPListenerEventTypes = ['keydown', 'click'];
var getLCP = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 2), hiddenObserver = _b[0], unloadObserver = _b[1];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var metric = initMetric(LCP_METRIC_NAME, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!PerformanceObserver) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, function (_a) {
        var startTime = _a.startTime;
        metric.value = startTime;
    }, LCP_ENTRY_NAME));
    var inputEventHandler = function () {
        sendOnceAndTearDown(metric);
    };
    LCPListenerEventTypes.forEach(function (type) {
        window.addEventListener(type, inputEventHandler, true);
        tearDownGroup.push(function () {
            window.removeEventListener(type, inputEventHandler, true);
        });
    });
    tearDownGroup.push(hiddenObserver[0](function () {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
    }));
    tearDownGroup.push(unloadObserver[0](function () {
        metric.isBounced = true;
        sendOnceAndTearDown(metric);
    }));
};
export var LCP = [LCP_METRIC_NAME, getLCP];
//# sourceMappingURL=lcp.js.map