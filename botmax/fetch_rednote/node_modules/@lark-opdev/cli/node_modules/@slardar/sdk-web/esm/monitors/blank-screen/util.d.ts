import { WebReportEvent } from '../../types';
import { BlankRelatedErrorInfo } from './type';
export declare const DEFAULT_IGNORE_TAGS: string[];
export declare const ERROR_RELATED_TYPE: string[];
export declare const DEFAULT_THRESHOLD = 1.5;
export declare const MAX_RENDER_TIME = 10000;
export declare const MAX_CHECK_TIME = 8000;
export declare const DEFAULT_CHECK_TIME = 2000;
export declare const MAX_RELATED_TIME = 10000;
export declare const DEFAULT_T0_DATA_URL_QUALITY = 0.1;
export declare const isSkipBeforeCheck: (ev: WebReportEvent) => number;
export declare const blankErrorCompare: (relatedError: BlankRelatedErrorInfo | undefined, ev: WebReportEvent) => BlankRelatedErrorInfo | undefined;
export declare const measure: (element: Element | null | undefined | false, depth?: number, sum?: number, threshold?: number, ignoreTags?: string[]) => number;
declare global {
    interface Window {
        html2canvas?: (element: HTMLElement, options?: any) => Promise<HTMLCanvasElement>;
    }
}
interface TakeScreenshotType {
    cb: (base64: string) => void;
    screenshotUrl: string;
    window: Window;
    document: Document;
    mask: boolean;
    partialShot: boolean;
    quality: number;
    rootSelector?: string;
}
export declare const screenshot: ({ cb, screenshotUrl, window, document, mask, partialShot, quality, rootSelector, }: TakeScreenshotType) => void;
export {};
