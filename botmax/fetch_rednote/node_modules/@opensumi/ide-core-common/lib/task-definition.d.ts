import { IDisposable } from '@opensumi/ide-utils';
import { IJSONSchemaMap, IJSONSchema } from './json-schema';
interface TaskDefinition {
    extensionId: string;
    taskType: string;
    required: string[];
    properties: IJSONSchemaMap;
}
export interface TaskIdentifier {
    type: string;
    [name: string]: any;
}
export interface KeyedTaskIdentifier extends TaskIdentifier {
    _key: string;
}
export declare namespace KeyedTaskIdentifier {
    function create(value: TaskIdentifier): KeyedTaskIdentifier;
}
export declare const ITaskDefinitionRegistry: unique symbol;
export interface ITaskDefinitionRegistry {
    onReady(): Promise<void>;
    register(taskType: string, definition: TaskDefinition): IDisposable;
    get(key: string): TaskDefinition;
    all(): TaskDefinition[];
    getJsonSchema(): IJSONSchema;
    createTaskIdentifier(external: TaskIdentifier, reporter: {
        error(message: string): void;
    }): KeyedTaskIdentifier | undefined;
}
export declare class TaskDefinitionRegistryImpl implements ITaskDefinitionRegistry {
    private taskTypes;
    private readyPromise;
    private _schema;
    constructor();
    onReady(): Promise<void>;
    register(taskType: string, definition: TaskDefinition): IDisposable;
    get(key: string): TaskDefinition;
    all(): TaskDefinition[];
    createTaskIdentifier: (external: TaskIdentifier, reporter: {
        error(message: string): void;
    }) => KeyedTaskIdentifier | undefined;
    getJsonSchema(): IJSONSchema;
}
export {};
//# sourceMappingURL=task-definition.d.ts.map