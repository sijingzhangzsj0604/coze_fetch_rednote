import { Commands } from '../protocol';
import { Deps } from '../protocol/typeUtil';
import { LogType, Params } from '../types/log';
import { CmdInput, CmdOutput, EventParam, ModuleCmdMap, ModuleEventMap, ModuleName } from '../types/protocol';
import Logger from './Logger';
import ModuleManager from './ModuleManager';
export default abstract class BaseModule<N extends ModuleName = ModuleName, E extends ModuleEventMap = {}, C extends ModuleCmdMap = any> {
    moduleName: N;
    protected execute: Commands<Deps<N>>;
    protected listeners: Map<keyof E, ((params: EventParam<E, keyof E, 'params'>) => void)[]>;
    protected logger: Logger<N>;
    constructor(moduleName: N);
    install(manager: ModuleManager): Promise<void>;
    protected created(): Promise<void> | void;
    protected registerEvents(manager: ModuleManager): void;
    addEventListener<N extends keyof E>(name: N, handler: (params: EventParam<E, N, 'params'>) => void): () => void;
    emit<N extends keyof E>(name: N, data: EventParam<E, N, 'params'>): void;
    exec<N extends keyof C>(name: N, ...params: CmdInput<N, C[N]>): CmdOutput<N, C[N]>;
    log: (type: LogType, ...params: Params<N>) => void;
}
