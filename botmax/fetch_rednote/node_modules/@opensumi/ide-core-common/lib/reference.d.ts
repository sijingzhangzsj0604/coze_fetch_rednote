import { Emitter, Event, Disposable, MaybePromise } from '@opensumi/ide-utils';
export interface IRef<T> {
    instance: T;
    reason?: string;
    dispose(): void;
    hold(reason?: string): IRef<T>;
    disposed: boolean;
}
export declare function normalizeFileUrl(uri: string): string;
export declare class ReferenceManager<T> {
    private factory;
    protected instances: Map<string, T>;
    protected refs: Map<string, Array<IRef<T>>>;
    protected _onReferenceAllDisposed: Emitter<string>;
    protected _onInstanceCreated: Emitter<T>;
    onReferenceAllDisposed: Event<string>;
    onInstanceCreated: Event<T>;
    protected _creating: Map<string, Promise<void>>;
    constructor(factory: (key: string) => MaybePromise<T>);
    getReference(uri: string, reason?: string): Promise<IRef<T>>;
    getReferenceIfHasInstance(key: string, reason?: string): IRef<T> | null;
    private createRef;
    private addRef;
    private removeRef;
}
export declare class Ref<T> extends Disposable implements IRef<T> {
    private _instance;
    readonly reason: string | undefined;
    private _clone;
    constructor(_instance: T | null, reason: string | undefined, _clone: null | ((reason?: string) => Ref<T>));
    get instance(): NonNullable<T>;
    hold(reason?: string): Ref<T>;
}
//# sourceMappingURL=reference.d.ts.map