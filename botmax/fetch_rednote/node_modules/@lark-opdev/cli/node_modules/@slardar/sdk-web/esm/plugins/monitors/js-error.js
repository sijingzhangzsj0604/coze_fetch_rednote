import { initSubjectInGlobal } from '@slardar/sdk-template';
import { errorSubject, promiseRejectionSubject } from '../../collector/error';
import { jsErrorGetterWithContext } from '../../monitors/js-error';
import { getPluginConfig } from './utils';
export { JS_ERROR_EV_TYPE } from '../../monitors/js-error';
export { normalizeUnknownError } from '../../monitors/js-error/util';
export var JS_ERROR_MONITOR_PLUGIN_NAME = 'jsError';
var defaultConfig = {
    ignoreErrors: [],
    onerror: true,
    onunhandledrejection: true,
    captureGlobalAsync: false,
    dedupe: true,
};
export function JsErrorMonitorPlugin(client) {
    client.on('init', function () {
        // stop precollect listener no matter what is configured
        window.removeEventListener('error', client.pcErr, true);
        window.removeEventListener('unhandledrejection', client.pcRej, true);
        var config = getPluginConfig(client, JS_ERROR_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var reportJsError = jsErrorGetterWithContext(function (ev) {
            client.getBreadcrumbs && (ev.payload.breadcrumbs = client.getBreadcrumbs());
            client.report(ev);
        }, tearDownGroup, [initSubjectInGlobal(client, errorSubject), initSubjectInGlobal(client, promiseRejectionSubject)], config);
        client.on('beforeDestroy', function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
        client.provide('captureException', reportJsError);
    });
}
//# sourceMappingURL=js-error.js.map