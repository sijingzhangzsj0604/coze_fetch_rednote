"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indent_string_1 = __importDefault(require("indent-string"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const wrap_ansi_1 = __importDefault(require("wrap-ansi"));
const list_1 = require("@oclif/plugin-help/lib/list");
const util_1 = require("@oclif/plugin-help/lib/util");
const base_1 = __importDefault(require("./base"));
const cache_1 = require("../../implements/cache");
const enum_1 = require("../../utils/enum");
class CommandHelp extends base_1.default {
    constructor(command, config, opts) {
        super();
        this.command = command;
        this.config = config;
        this.opts = opts;
        this.render = (0, util_1.template)(this);
    }
    generate() {
        const cmd = this.command;
        const flags = Object.entries(cmd.flags || {})
            .filter(([, v]) => !v.hidden)
            .map(([k, v]) => {
            v.name = k;
            return v;
        });
        const args = (cmd.args || []).filter((a) => !a.hidden);
        let output = (0, util_1.compact)([
            this.usage(flags),
            this.aliases(cmd.aliases),
            this.args(args),
            this.flags(flags),
            this.description(),
            this.examples(cmd.examples),
        ]).join('\n\n');
        if (this.opts.stripAnsi) {
            output = (0, strip_ansi_1.default)(output);
        }
        return output;
    }
    usage(flags) {
        const usage = this.command.usage;
        const body = (usage ? (0, util_1.castArray)(usage) : [this.defaultUsage(flags)])
            .map((u) => `$ ${this.config.bin} ${u}`.trim())
            .join('\n');
        return [
            this.highlight('USAGE'),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(this.render(body), this.opts.maxWidth - 2, {
                trim: false,
                hard: true,
            }), 2),
        ].join('\n');
    }
    defaultUsage(flags) {
        const flagsWithoutHelp = flags.filter((f) => f.name !== 'help') || [];
        return (0, util_1.compact)([
            this.command.id,
            this.command.args
                .filter((a) => !a.hidden)
                .map((a) => this.arg(a))
                .join(' '),
            flagsWithoutHelp.length > 0 && '[OPTIONS]',
        ]).join(' ');
    }
    description() {
        const cmd = this.command;
        const description = cmd.description &&
            this.render(cmd.description).split('\n').slice(1).join('\n');
        if (!description) {
            return;
        }
        return [
            this.highlight('DESCRIPTION'),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(description.trim(), this.opts.maxWidth - 2, {
                trim: false,
                hard: true,
            }), 2),
        ].join('\n');
    }
    aliases(aliases) {
        if (!aliases || aliases.length === 0) {
            return;
        }
        const body = aliases
            .map((a) => ['$', this.config.bin, a].join(' '))
            .join('\n');
        return [
            this.highlight('ALIASES'),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(body, this.opts.maxWidth - 2, { trim: false, hard: true }), 2),
        ].join('\n');
    }
    examples(examples) {
        if (!examples || examples.length === 0) {
            return;
        }
        const body = (0, list_1.renderList)((0, util_1.castArray)(examples).map((a) => [
            this.render(a[0].replace('{{cli}}', this.config.bin)),
            this.gray(a[1]),
        ]), { stripAnsi: this.opts.stripAnsi, maxWidth: this.opts.maxWidth - 2 });
        return [
            this.highlight('EXAMPLE' + (examples.length > 1 ? 'S' : '')),
            (0, indent_string_1.default)((0, wrap_ansi_1.default)(body, this.opts.maxWidth - 2, { trim: false, hard: true }), 2),
        ].join('\n');
    }
    args(args) {
        if (args.filter((a) => a.description).length === 0) {
            return;
        }
        const body = (0, list_1.renderList)(args.map((a) => {
            const name = a.name.toUpperCase();
            let description = a.description || '';
            if (a.default) {
                description += ` [default: ${a.default}]`;
            }
            if (a.options) {
                description = `(${a.options.join('|')}) ${description}`;
            }
            return [name, description ? this.gray(description) : undefined];
        }), { stripAnsi: this.opts.stripAnsi, maxWidth: this.opts.maxWidth - 2 });
        return [this.highlight('ARGUMENTS'), (0, indent_string_1.default)(body, 2)].join('\n');
    }
    arg(arg) {
        const name = arg.name.toUpperCase();
        if (arg.required) {
            return `${name}`;
        }
        return `[${name}]`;
    }
    flags(flags) {
        if (flags.length === 0) {
            return;
        }
        const body = (0, list_1.renderList)(flags.map((flag) => {
            let left = flag.helpLabel;
            if (!left) {
                const label = [];
                if (flag.char) {
                    label.push(`-${flag.char[0]}`);
                }
                if (flag.name) {
                    if (flag.type === 'boolean' && flag.allowNo) {
                        label.push(`--[no-]${flag.name.trim()}`);
                    }
                    else {
                        label.push(`--${flag.name.trim()}`);
                    }
                }
                left = label.join(', ');
            }
            if (flag.type === 'option') {
                let value = flag.helpValue || flag.name;
                if (!flag.helpValue && flag.options) {
                    value = flag.options.join('|');
                }
                if (!value.includes('|')) {
                    value = this.underline(value);
                }
                left += `=${value}`;
            }
            let right = flag.description || '';
            if (flag.type === 'option' && flag.default) {
                right += ` [default: ${flag.default}]`;
            }
            if (flag.required) {
                right += ' (required)';
            }
            return [left, this.gray(right.trim())];
        }), { stripAnsi: this.opts.stripAnsi, maxWidth: this.opts.maxWidth - 2 });
        return [this.highlight('OPTIONS'), (0, indent_string_1.default)(body, 2)]
            .concat(this.flagsExtend())
            .join('\n');
    }
    flagsExtend() {
        const messages = [];
        if (this.command.id === 'clear') {
            const type = Object.entries(cache_1.config).map(([key, item]) => [
                key,
                item.title,
            ]);
            type.push([enum_1.CacheType.all, 'Clear All']);
            const body = (0, list_1.renderList)(type, {
                stripAnsi: this.opts.stripAnsi,
                maxWidth: this.opts.maxWidth - 2,
            });
            messages.push('\nThe cache type can be one of the following:');
            messages.push((0, indent_string_1.default)(body, 2));
        }
        return messages;
    }
}
exports.default = CommandHelp;
