import { __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-optional-chain */
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { applyRecord, hookObjectProperty } from '@slardar/sdk-template';
import { getDefaultBrowser, getDefaultFetch, getDefaultMutationObserver, getDefaultPerformanceObserver, getDefaultPerformance, getDefaultXMLHttpRequest, applyPerformance, applyPerformanceObserver, invokeCallbackOnce, } from '../../../utils';
import { initMetric, buildSingleMetricPayload } from '../util';
import { calcLastNet2Busy, computeTTI, getRequestTimes, getMinValue, observeResFetchMutations, applyScheduler, hookFetch, hookXHROpen, hookXHRSend, gatherLongTaskAndNetworks, } from './util';
var TTIMonitorMetricName = 'tti';
/**
 * 劫持 XHR 和 fetch，监听当前页面未完成的 GET 请求数量
 */
export var applyIncompleteReq = function (global, XMLHttpRequest) {
    var _a = __read(applyRecord(), 3), incompleteInitReqStartTimes = _a[0], before = _a[1], after = _a[2];
    var restoreXHROpen = XMLHttpRequest && hookObjectProperty(XMLHttpRequest.prototype, 'open', hookXHROpen)();
    var restoreXHRSend = XMLHttpRequest && hookObjectProperty(XMLHttpRequest.prototype, 'send', hookXHRSend)(before, after);
    var restoreFetch = global && hookObjectProperty(global, 'fetch', hookFetch)(before, after);
    var restore = function () {
        restoreXHROpen && restoreXHROpen(true);
        restoreXHRSend && restoreXHRSend(true);
        restoreFetch && restoreFetch(true);
    };
    return [incompleteInitReqStartTimes, restore];
};
/**
 * 监听 longtask resource 和 网络请求
 * 返回 longtasks 数组、停止监听的函数、拿到最近一次请求大于2的时间的函数
 */
export var observeLongTaskAndNetAndResource = function (global, XMLHttpRequest, PerformanceObserver, MutationObserver) {
    return function (precollect, scheduler, // checkTTI 调度器
    now) {
        var _a = __read(gatherLongTaskAndNetworks(), 3), longTasks = _a[0], networkRequests = _a[1], iterEntries = _a[2];
        var _b = __read(applyIncompleteReq(global, XMLHttpRequest), 2), incompleteInitReqStartTimes = _b[0], restoreHook = _b[1];
        // 如果有资源节点新增，那么五秒后尝试 checkTTI
        var _c = __read((MutationObserver && observeResFetchMutations(MutationObserver, function () { return scheduler(now() + 5000); })) || [], 2), observeRes = _c[0], stopObserveRes = _c[1];
        observeRes && observeRes();
        var getLastBusy = function () { return calcLastNet2Busy(getRequestTimes(incompleteInitReqStartTimes), networkRequests, now); };
        var _d = __read(applyPerformanceObserver(PerformanceObserver, iterEntries(
        // 遇到 longTask 则在 longTask 5秒后 checkTTI
        function (_a) {
            var startTime = _a.startTime, duration = _a.duration;
            return scheduler(startTime + duration + 5000);
        }, 
        // 遇到 resource 加载，则在最后一次 busy 5 秒后 checkTTI
        function () { return scheduler(getLastBusy() + 5000); }), false, function () { return (longTasks.notSupport = true); }), 2), observe = _d[0], stopLongTaskAndNetwork = _d[1];
        var teardown = function () {
            restoreHook();
            stopLongTaskAndNetwork();
            stopObserveRes && stopObserveRes();
        };
        observe('longtask', 'resource');
        precollect.forEach(iterEntries());
        return [longTasks, teardown, getLastBusy];
    };
};
export var TTIMonitor = function (XMLHttpRequest, window, PerformanceObserver, MutationObserver, performance) {
    if (XMLHttpRequest === void 0) { XMLHttpRequest = getDefaultXMLHttpRequest(); }
    if (window === void 0) { window = getDefaultFetch() && getDefaultBrowser(); }
    if (PerformanceObserver === void 0) { PerformanceObserver = getDefaultPerformanceObserver(); }
    if (MutationObserver === void 0) { MutationObserver = getDefaultMutationObserver(); }
    if (performance === void 0) { performance = getDefaultPerformance(); }
    return function (props, cb, tearDown, polyfill) {
        var metric = initMetric(TTIMonitorMetricName, 0);
        var buildTTIAndCb = function (_metric) {
            var payload = buildSingleMetricPayload(_metric);
            cb && cb(payload);
        };
        var _a = __read(invokeCallbackOnce(buildTTIAndCb), 1), buildAndInvokeCbOnce = _a[0];
        if (!XMLHttpRequest || !window || !PerformanceObserver || !performance) {
            metric.isSupport = false;
            buildAndInvokeCbOnce(metric);
            return [function () { return 0; }];
        }
        // If minValue is null, by default it is DOMContentLoadedEnd.
        var precollect = props.precollect, _b = props.isAsync, isAsync = _b === void 0 ? 0 : _b, _c = props.minValue, minValue = _c === void 0 ? null : _c;
        var _d = precollect || {}, _e = _d.entries, entries = _e === void 0 ? [] : _e, snippetObserver = _d.observer;
        var _f = __read(applyPerformance(performance), 5), timing = _f[0], now = _f[1], getEntriesByName = _f[4];
        var _g = __read(applyScheduler(now), 3), startSchedule = _g[0], stopSchedule = _g[1], reschedule = _g[2];
        var _h = __read(observeLongTaskAndNetAndResource(window, XMLHttpRequest, PerformanceObserver, MutationObserver)(!isAsync ? entries : [], reschedule, now), 3), longTasks = _h[0], stopObserve = _h[1], getLastBusy = _h[2];
        var disable = function () {
            stopSchedule();
            stopObserve();
            tearDown && tearDown();
            snippetObserver && snippetObserver.disconnect();
            entries.length = 0;
        };
        var checkTTI = function (checkCb) {
            var firstContentfulPaint = getEntriesByName('first-contentful-paint')[0];
            var maybeFCI = computeTTI((firstContentfulPaint ? firstContentfulPaint.startTime : getMinValue(timing)) || 0, minValue || getMinValue(timing) || 0, getLastBusy(), now() + (checkCb ? 0 : 5000), // 同步模式下加 5 秒保证静默窗口
            longTasks);
            if (!checkCb) {
                // 同步模式下立即返回
                disable();
                return maybeFCI;
            }
            if (!maybeFCI)
                return reschedule(now() + 1000);
            disable();
            checkCb(maybeFCI);
        };
        polyfill && polyfill(longTasks, reschedule, metric);
        if (longTasks.notSupport) {
            metric.isSupport = false;
            buildAndInvokeCbOnce(metric);
            return [function () { return 0; }];
        }
        var invokeCb = function (value) {
            metric.value = value;
            buildAndInvokeCbOnce(metric);
        };
        var lastLongTask = longTasks[longTasks.length - 1];
        startSchedule(function () { return checkTTI(invokeCb); }, Math.max(getLastBusy() + 5000, lastLongTask ? lastLongTask.end : 0));
        var getTTISync = function () {
            return checkTTI() || 0;
        };
        return [getTTISync];
    };
};
//# sourceMappingURL=index.js.map