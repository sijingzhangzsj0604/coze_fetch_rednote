"use strict";
/* ---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Some code copied and modified from https://github.com/microsoft/vscode/blob/1.44.0/src/vs/base/node/ports.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFreePortFaster = exports.findFreePort = exports.randomPort = void 0;
const tslib_1 = require("tslib");
const net_1 = tslib_1.__importDefault(require("net"));
/**
 * @returns Returns a random port between 1025 and 65535.
 */
function randomPort() {
    const min = 1025;
    const max = 65535;
    return min + Math.floor((max - min) * Math.random());
}
exports.randomPort = randomPort;
const defaultHost = process.env.HOST || '127.0.0.1';
/**
 * Given a start point and a max number of retries, will find a port that
 * is openable. Will return 0 in case no free port can be found.
 */
function findFreePort(startPort, giveUpAfter, timeout) {
    let done = false;
    return new Promise((resolve) => {
        const timeoutHandle = setTimeout(() => {
            if (!done) {
                done = true;
                return resolve(0);
            }
        }, timeout);
        doFindFreePort(startPort, giveUpAfter, (port) => {
            if (!done) {
                done = true;
                clearTimeout(timeoutHandle);
                return resolve(port);
            }
        });
    });
}
exports.findFreePort = findFreePort;
function doFindFreePort(startPort, giveUpAfter, clb) {
    if (giveUpAfter === 0) {
        return clb(0);
    }
    const client = new net_1.default.Socket();
    // If we can connect to the port it means the port is already taken so we continue searching
    client.once('connect', () => {
        dispose(client);
        return doFindFreePort(startPort + 1, giveUpAfter - 1, clb);
    });
    client.once('data', () => {
        // this listener is required since node.js 8.x
    });
    client.once('error', (err) => {
        dispose(client);
        // If we receive any non ECONNREFUSED error, it means the port is used but we cannot connect
        if (err.code !== 'ECONNREFUSED') {
            return doFindFreePort(startPort + 1, giveUpAfter - 1, clb);
        }
        // Otherwise it means the port is free to use!
        return clb(startPort);
    });
    client.connect(startPort, defaultHost);
}
/**
 * Uses listen instead of connect. Is faster, but if there is another listener on 127.0.0.1 then this will take 127.0.0.1 from that listener.
 */
function findFreePortFaster(startPort, giveUpAfter, timeout) {
    let resolved = false;
    let timeoutHandle;
    let countTried = 1;
    const server = net_1.default.createServer({ pauseOnConnect: true });
    function doResolve(port, resolve) {
        if (!resolved) {
            resolved = true;
            server.removeAllListeners();
            server.close();
            if (timeoutHandle) {
                clearTimeout(timeoutHandle);
            }
            resolve(port);
        }
    }
    return new Promise((resolve) => {
        // 使用 global.setTimeout 消除歧义，减少测试问题
        // ref: https://github.com/Microsoft/TypeScript/issues/30128#issuecomment-467968688
        timeoutHandle = global.setTimeout(() => {
            doResolve(0, resolve);
        }, timeout);
        server.on('listening', () => {
            doResolve(startPort, resolve);
        });
        server.on('error', (err) => {
            if (err && (err.code === 'EADDRINUSE' || err.code === 'EACCES') && countTried < giveUpAfter) {
                startPort++;
                countTried++;
                server.listen(startPort, defaultHost);
            }
            else {
                doResolve(0, resolve);
            }
        });
        server.on('close', () => {
            doResolve(0, resolve);
        });
        server.listen(startPort, defaultHost);
    });
}
exports.findFreePortFaster = findFreePortFaster;
function dispose(socket) {
    try {
        socket.removeAllListeners('connect');
        socket.removeAllListeners('error');
        socket.end();
        socket.destroy();
        socket.unref();
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.error(error); // otherwise this error would get lost in the callback chain
    }
}
//# sourceMappingURL=port.js.map