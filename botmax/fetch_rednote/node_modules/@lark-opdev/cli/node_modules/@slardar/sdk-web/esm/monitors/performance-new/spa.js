import { __read } from "tslib";
import { applyMutationObserver } from '../../utils';
import { now } from '../../utils/date';
import { applyIncompleteReq } from '../action';
import { waitActionComplete } from '../action/util';
import { initMetric } from '../performance/util';
import { SPA_LOAD_METRIC_NAME, applyReportMetric } from './util';
export var getSPA = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 6), pvObserver = _b[0], xhrObserver = _b[1], fetchObserver = _b[2], resourceObserver = _b[3], longtaskObserver = _b[4], MutationObserver = _b[5];
    var spa_load_start = 0;
    var reportMetric = applyReportMetric(report);
    var startSPA = function () {
        spa_load_start = now();
        observe(document, {
            childList: true,
            subtree: true,
        });
        start();
    };
    var reportSPAIfAllowed = function () {
        if (Object.keys(incompleteReq).length || !spa_load_start) {
            return;
        }
        reportMetric(initMetric(SPA_LOAD_METRIC_NAME, now() - spa_load_start));
        endSPA();
    };
    var endSPA = function () {
        complete();
        spa_load_start = 0;
        disconnect();
    };
    var _c = __read(waitActionComplete(reportSPAIfAllowed, endSPA, window), 3), start = _c[0], notify = _c[1], complete = _c[2];
    // request
    var incompleteReq = applyIncompleteReq(tearDownGroup, [xhrObserver, fetchObserver], notify);
    // resource
    tearDownGroup.push(resourceObserver[0](notify));
    // longtask
    tearDownGroup.push(longtaskObserver[0](notify));
    // dom
    var _d = __read(applyMutationObserver(MutationObserver, notify), 2), observe = _d[0], disconnect = _d[1];
    tearDownGroup.push(disconnect);
    var isFirstPV = true;
    // start SPA when PV change
    tearDownGroup.push(pvObserver[0](function () {
        if (isFirstPV) {
            isFirstPV = false;
            return;
        }
        // force end last SPA if not report
        endSPA();
        // start a new SPA metric
        startSPA();
    }));
    // reset SPA status when tear down
    tearDownGroup.push(endSPA);
};
//# sourceMappingURL=spa.js.map