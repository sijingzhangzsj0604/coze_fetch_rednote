import test from 'ava';
import { normalizeUserConfig, parseServerConfig, validateInitConfig } from '../normalize';
import { defaultPlugins } from '../utils';
test('should not config valid if config is not an object', function (t) {
    var config = undefined;
    t.false(validateInitConfig(config));
});
test('should not config valid if bid is not in config', function (t) {
    var config = {};
    t.false(validateInitConfig(config));
});
test('should not config valid if bid in config is not truthy', function (t) {
    var config = { bid: 0 };
    t.false(validateInitConfig(config));
});
test('should config valid', function (t) {
    var config = { bid: '1' };
    t.true(validateInitConfig(config));
});
test('should normalize user config', function (t) {
    var cfg = {
        pid: 'index',
    };
    t.not(normalizeUserConfig(cfg), cfg);
    t.deepEqual(normalizeUserConfig(cfg), cfg);
});
test('parseServerConfig', function (t) {
    var fakeServerTimestamp = Date.now();
    t.deepEqual(parseServerConfig(), {});
    t.deepEqual(parseServerConfig({}), {
        userId: undefined,
    });
    t.deepEqual(parseServerConfig({
        user_id: 'cookie-id',
    }), {
        userId: 'cookie-id',
    });
    t.deepEqual(parseServerConfig({
        user_id: 'user-id',
        sample: {
            sample_rate: 1,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: [
                {
                    name: 'pageview',
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            ],
        },
        timestamp: fakeServerTimestamp,
    }), {
        userId: 'user-id',
        sample: {
            sample_rate: 1,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: {
                pageview: {
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            },
        },
        plugins: defaultPlugins,
        serverTimestamp: fakeServerTimestamp,
    });
});
//# sourceMappingURL=normalize.spec.js.map