import { SafeObservable } from '@slardar/sdk-template';
import { ErrorNext, PromiseRejectionNext } from '../../collector/error';
import { ReportToReportEvent, JsErrorReport } from '../../types';
import { ReactInfo } from '../../types/thrift/browser/collector_v2/js_error';
export declare type ReportJsError = (ex: any, extra?: Record<string, string>, react?: ReactInfo) => void;
export interface JsErrorConfig {
    ignoreErrors: (string | RegExp)[];
    onerror: boolean;
    onunhandledrejection: boolean;
    captureGlobalAsync?: boolean;
    dedupe?: boolean;
}
export declare const JS_ERROR_EV_TYPE = "js_error";
declare type JSErrorGetterWithContext = (report: (ev: ReportToReportEvent<JsErrorReport>) => void, tearDownGroup: (() => void)[], context: [SafeObservable<ErrorNext>, SafeObservable<PromiseRejectionNext>], config: JsErrorConfig) => ReportJsError;
export declare const jsErrorGetterWithContext: JSErrorGetterWithContext;
export {};
