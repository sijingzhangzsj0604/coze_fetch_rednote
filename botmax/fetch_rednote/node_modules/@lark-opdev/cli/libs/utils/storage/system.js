"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.secretManager = exports.SecretManager = void 0;
const crypto_1 = __importDefault(require("crypto"));
class SecretManager {
    constructor() {
        this.serviceName = 'opdev-cli';
        this.accountName = 'secret';
        this.available = false;
        this.secret = SecretManager.createSecret();
    }
    static createSecret() {
        const iv = crypto_1.default.randomBytes(16).toString('hex');
        const key = crypto_1.default.randomBytes(32).toString('hex');
        return {
            iv,
            key,
        };
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.keytar = yield Promise.resolve().then(() => __importStar(require('keytar')));
                this.available = true;
                const secretJSONString = yield this.getSecretFromSystem();
                if (!secretJSONString) {
                    this.secret = SecretManager.createSecret();
                    yield this.setSecretToSystem(JSON.stringify(this.secret));
                }
                else {
                    try {
                        this.secret = JSON.parse(secretJSONString);
                    }
                    catch (err) {
                        this.secret = SecretManager.createSecret();
                        yield this.setSecretToSystem(JSON.stringify(this.secret));
                    }
                }
            }
            catch (err) {
            }
        });
    }
    getSecret() {
        return this.secret;
    }
    clearSecret() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.keytar) === null || _a === void 0 ? void 0 : _a.deletePassword(this.serviceName, this.accountName));
        });
    }
    getSecretFromSystem() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const secret = yield ((_a = this.keytar) === null || _a === void 0 ? void 0 : _a.getPassword(this.serviceName, this.accountName));
            return secret;
        });
    }
    setSecretToSystem(secret) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.keytar) === null || _a === void 0 ? void 0 : _a.setPassword(this.serviceName, this.accountName, secret));
        });
    }
}
exports.SecretManager = SecretManager;
exports.secretManager = new SecretManager();
