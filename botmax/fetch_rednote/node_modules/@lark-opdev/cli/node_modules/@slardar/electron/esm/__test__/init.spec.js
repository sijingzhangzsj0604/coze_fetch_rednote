import anyTest from 'ava';
import { pick } from '@slardar/sdk-template';
import { createMinimalElectronClient } from '../client';
import { getStorageKey } from '../utils';
import { mockTransport } from './utils/mockTransport';
import { getMockVal, stubStorage } from './utils/stubStorage';
var test = anyTest;
test.beforeEach(function (t) {
    t.context.bid = 'test';
});
test('should throw without bid', function (t) {
    var client = createMinimalElectronClient();
    t.throws(function () { return client.init({ bid: '', transport: mockTransport() }); }, null, 'invalid InitConfig, init failed');
});
test('should send settings after init', function (t) {
    var restore = stubStorage().restore;
    var _a = mockTransport(), transport = _a.transport, get = _a.get;
    var client = createMinimalElectronClient();
    client.init({ bid: 'test', transport: transport });
    t.is(get.callCount, 1);
    // The reason why the domain of url is undefined is that process.env.xxx will be not defined in development.
    t.is(get.firstCall.firstArg.url, 'https://undefined/monitor_web/settings/browser-settings?bid=test&store=1');
    client.destroy();
    restore();
});
test('should not send config setting request if useLocalConfig is true', function (t) {
    var restore = stubStorage().restore;
    var _a = mockTransport(), transport = _a.transport, get = _a.get;
    var client = createMinimalElectronClient();
    client.init({ bid: 'test', transport: transport, useLocalConfig: true });
    t.is(get.callCount, 0);
    restore();
});
test('should merge server config if useLocalConfig is false', function (t) {
    var restore = stubStorage().restore;
    var _a = mockTransport({ isSuccess: false }), transport = _a.transport, get = _a.get, setOptions = _a.setOptions;
    var client = createMinimalElectronClient();
    client.init({ bid: 'test', transport: transport, useLocalConfig: false });
    t.is(get.callCount, 1);
    setOptions({ isSuccess: true, returnData: {} });
    client.destroy();
    client.init({ bid: 'test', transport: transport, useLocalConfig: false });
    restore();
});
test('should get userId and deviceId from store', function (t) {
    var _a;
    var localDataPath = 'path';
    var bid = t.context.bid;
    var transport = mockTransport({ isSuccess: true, returnData: {} }).transport;
    var _b = stubStorage((_a = {},
        _a[getStorageKey(bid)] = {
            userId: getMockVal('userId'),
            deviceId: getMockVal('deviceId'),
        },
        _a)), restore = _b.restore, set = _b.set, get = _b.get;
    var client = createMinimalElectronClient();
    client.init({ bid: bid, transport: transport, localDataPath: localDataPath });
    client.start();
    t.deepEqual(set.getCall(0).args, [
        'SLARDARtest',
        { userId: 'mock_userId_value', deviceId: 'mock_deviceId_value' },
        'path',
    ]);
    t.deepEqual(get.getCall(0).args, [getStorageKey(bid), localDataPath]);
    t.deepEqual(pick(client.config(), ['userId', 'deviceId']), {
        userId: 'mock_userId_value',
        deviceId: 'mock_deviceId_value',
    });
    restore();
});
//# sourceMappingURL=init.spec.js.map