"use strict";
/* ---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Some code copied and modified from https://github.com/microsoft/vscode/blob/01d1ea52e639615c4513689ce66576829438f748/src/vs/base/common/platform.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSafari = exports.isChrome = exports.userAgent = exports.OperatingSystem = exports.setImmediate = exports.globals = exports.translationsConfigFile = exports.locale = exports.Language = exports.language = exports.isRootUser = exports.isWebKit = exports.platform = exports.isWeb = exports.isNative = exports.isLinux = exports.isOSX = exports.isMacintosh = exports.isWindows = exports.PlatformToString = void 0;
const LANGUAGE_DEFAULT = 'en';
let _isWindows = false;
let _isMacintosh = false;
let _isLinux = false;
let _isNative = false;
let _isWeb = false;
let _locale;
let _language = LANGUAGE_DEFAULT;
let _translationsConfigFile;
let _isWebKit = false;
const isElectronRenderer = typeof process !== 'undefined' &&
    typeof process.versions !== 'undefined' &&
    typeof process.versions.electron !== 'undefined' &&
    process.type === 'renderer';
// OS detection
if (typeof navigator === 'object' && !isElectronRenderer) {
    const userAgent = navigator.userAgent;
    _isWindows = userAgent.indexOf('Windows') >= 0;
    _isMacintosh = userAgent.indexOf('Macintosh') >= 0;
    _isLinux = userAgent.indexOf('Linux') >= 0;
    _isWeb = true;
    _locale = navigator.language;
    _language = _locale;
    _isWebKit = userAgent.indexOf('AppleWebKit') >= 0;
}
else if (typeof process === 'object') {
    _isWindows = process.platform === 'win32';
    _isMacintosh = process.platform === 'darwin';
    _isLinux = process.platform === 'linux';
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    const rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];
    if (rawNlsConfig) {
        try {
            const nlsConfig = JSON.parse(rawNlsConfig);
            const resolved = nlsConfig.availableLanguages['*'];
            _locale = nlsConfig.locale;
            // VSCode's default language is 'en'
            _language = resolved ? resolved : LANGUAGE_DEFAULT;
            _translationsConfigFile = nlsConfig._translationsConfigFile;
        }
        catch (e) { }
    }
    _isNative = true;
}
function PlatformToString(platform) {
    switch (platform) {
        case 0 /* Platform.Web */:
            return 'Web';
        case 1 /* Platform.Mac */:
            return 'Mac';
        case 2 /* Platform.Linux */:
            return 'Linux';
        case 3 /* Platform.Windows */:
            return 'Windows';
    }
}
exports.PlatformToString = PlatformToString;
let _platform = 0 /* Platform.Web */;
if (_isNative) {
    if (_isMacintosh) {
        _platform = 1 /* Platform.Mac */;
    }
    else if (_isWindows) {
        _platform = 3 /* Platform.Windows */;
    }
    else if (_isLinux) {
        _platform = 2 /* Platform.Linux */;
    }
}
exports.isWindows = _isWindows;
exports.isMacintosh = _isMacintosh;
exports.isOSX = _isMacintosh;
exports.isLinux = _isLinux;
exports.isNative = _isNative;
exports.isWeb = _isWeb;
exports.platform = _platform;
exports.isWebKit = _isWebKit;
function isRootUser() {
    return _isNative && !_isWindows && process.getuid() === 0;
}
exports.isRootUser = isRootUser;
/**
 * The language used for the user interface. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese)
 */
exports.language = _language;
var Language;
(function (Language) {
    function value() {
        return exports.language;
    }
    Language.value = value;
    function isDefaultVariant() {
        if (exports.language.length === 2) {
            return exports.language === 'en';
        }
        else if (exports.language.length >= 3) {
            return exports.language[0] === 'e' && exports.language[1] === 'n' && exports.language[2] === '-';
        }
        else {
            return false;
        }
    }
    Language.isDefaultVariant = isDefaultVariant;
    function isDefault() {
        return exports.language === 'en';
    }
    Language.isDefault = isDefault;
})(Language = exports.Language || (exports.Language = {}));
/**
 * The OS locale or the locale specified by --locale. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese). The UI is not necessarily shown in the provided locale.
 */
exports.locale = _locale;
/**
 * The translatios that are available through language packs.
 */
exports.translationsConfigFile = _translationsConfigFile;
const _globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};
exports.globals = _globals;
let _setImmediate = null;
function setImmediate(callback) {
    if (_setImmediate === null) {
        if (exports.globals.setImmediate) {
            _setImmediate = exports.globals.setImmediate.bind(exports.globals);
        }
        else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {
            _setImmediate = process.nextTick.bind(process);
        }
        else {
            _setImmediate = exports.globals.setTimeout.bind(exports.globals);
        }
    }
    return _setImmediate(callback);
}
exports.setImmediate = setImmediate;
var OperatingSystem;
(function (OperatingSystem) {
    OperatingSystem[OperatingSystem["Windows"] = 1] = "Windows";
    OperatingSystem[OperatingSystem["Macintosh"] = 2] = "Macintosh";
    OperatingSystem[OperatingSystem["Linux"] = 3] = "Linux";
})(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));
exports.userAgent = typeof navigator === 'object' ? navigator.userAgent : null;
exports.isChrome = (exports.userAgent === null || exports.userAgent === void 0 ? void 0 : exports.userAgent.indexOf('Chrome')) >= 0;
exports.isSafari = !exports.isChrome && (exports.userAgent === null || exports.userAgent === void 0 ? void 0 : exports.userAgent.indexOf('Safari')) >= 0;
//# sourceMappingURL=platform.js.map