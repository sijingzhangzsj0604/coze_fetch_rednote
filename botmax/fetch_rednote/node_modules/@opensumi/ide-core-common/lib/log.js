"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDebugLogger = exports.ILogger = exports.DebugLog = exports.ILoggerManagerClient = exports.LogServiceForClientPath = exports.ILogServiceManager = exports.SupportLogNamespace = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Verbose"] = 0] = "Verbose";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Critical"] = 5] = "Critical";
    LogLevel[LogLevel["Off"] = 6] = "Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var SupportLogNamespace;
(function (SupportLogNamespace) {
    // 主进程
    SupportLogNamespace["Main"] = "main";
    // 渲染进程
    SupportLogNamespace["Render"] = "render";
    // Node进程
    SupportLogNamespace["Node"] = "node";
    // 浏览器进程
    SupportLogNamespace["Browser"] = "browser";
    // 插件进程
    SupportLogNamespace["ExtensionHost"] = "extHost";
    // 应用层
    SupportLogNamespace["App"] = "app";
    // 其他未分类
    SupportLogNamespace["OTHER"] = "other";
})(SupportLogNamespace = exports.SupportLogNamespace || (exports.SupportLogNamespace = {}));
exports.ILogServiceManager = Symbol('ILogServiceManager');
exports.LogServiceForClientPath = 'LogServiceForClientPath';
exports.ILoggerManagerClient = Symbol('ILoggerManagerClient');
/**
 * 只输出在控制台，不会落盘
 * const debugLog = new DebugLog('FileService');
 *
 * @export
 * @class DebugLog
 * @implements {IDebugLog}
 */
const isNode = typeof process !== 'undefined' && process.release;
const isChrome = !isNode && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
class DebugLog {
    constructor(namespace) {
        this.isEnable = false;
        this.verbose = (...args) => {
            if (!this.isEnable) {
                return;
            }
            return console.debug(this.getPre('verbose', 'green'), ...args);
        };
        this.debug = (...args) => {
            if (!this.isEnable) {
                return;
            }
            return console.debug(this.getPre('debug', 'blue'), ...args);
        };
        this.log = (...args) => {
            if (!this.isEnable) {
                return;
            }
            return console.log(this.getPre('log', 'green'), ...args);
        };
        this.error = (...args) => 
        // 错误一直显示
        console.error(this.getPre('error', 'red'), ...args);
        this.warn = (...args) => {
            if (!this.isEnable) {
                return;
            }
            return console.warn(this.getPre('warn', 'yellow'), ...args);
        };
        this.info = (...args) => {
            if (!this.isEnable) {
                return;
            }
            return console.info(this.getPre('log', 'green'), ...args);
        };
        if (typeof process !== 'undefined' && process.env && process.env.KTLOG_SHOW_DEBUG) {
            this.isEnable = true;
        }
        this.namespace = namespace || '';
    }
    getPre(level, color) {
        const text = this.namespace ? `[${this.namespace}:${level}]` : `[${level}]`;
        return this.getColor(color, text);
    }
    getColor(color, message) {
        if (!isNode && !isChrome) {
            return message;
        }
        const colors = {
            reset: '\x1b[0m',
            // text color
            black: '\x1b[30m',
            red: '\x1b[31m',
            green: '\x1b[32m',
            yellow: '\x1b3[33m',
            blue: '\x1b[34m',
            magenta: '\x1b[35m',
            cyan: '\x1b[36m',
            white: '\x1b[37m',
            // background color
            blackBg: '\x1b[40m',
            redBg: '\x1b[41m',
            greenBg: '\x1b[42m',
            yellowBg: '\x1b[43m',
            blueBg: '\x1b[44m',
            magentaBg: '\x1b[45m',
            cyanBg: '\x1b[46m',
            whiteBg: '\x1b[47m',
        };
        return (colors[color] || '') + message + colors.reset;
    }
    destroy() { }
}
exports.DebugLog = DebugLog;
/**
 * 兼容旧logger 提供的类型，同 ILogServiceClient
 */
exports.ILogger = Symbol('ILogger');
/**
 * 只输出在控制台，不会落盘
 */
function getDebugLogger(namespace) {
    function showWarn() {
        // Do nothing
    }
    const debugLog = new DebugLog(namespace);
    return {
        get verbose() {
            showWarn();
            return debugLog.verbose;
        },
        get log() {
            showWarn();
            return debugLog.log;
        },
        get debug() {
            showWarn();
            return debugLog.debug;
        },
        get error() {
            showWarn();
            return debugLog.error;
        },
        get info() {
            showWarn();
            return debugLog.info;
        },
        get warn() {
            showWarn();
            return debugLog.warn;
        },
        destroy() { },
    };
}
exports.getDebugLogger = getDebugLogger;
//# sourceMappingURL=log.js.map