"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const command_2 = __importDefault(require("../extends/command"));
const account_1 = __importDefault(require("../implements/account"));
const update_1 = require("../utils/update");
const env_1 = require("../utils/env");
class Login extends command_2.default {
    run(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { flags } = yield this.parse(Login);
            const account = new account_1.default();
            account.eventTracker('login_start', { tags: Object.assign({}, flags) });
            account_1.default.checkTokenExist(this.id);
            const isLogin = account.isLogin(flags.environment);
            if (isLogin) {
                console.log('Already login, current user is: ' + account.getUserInfo());
                console.log('If you want to login with the other account, you can run ' +
                    this.success(`opdev logout`) +
                    '.');
                if (env_1.environment.length > 1) {
                    console.log('If you want to switch to the other env, you can run ' +
                        this.success(`opdev switch -e [env]`) +
                        '.');
                }
            }
            else {
                yield account.login({
                    environment: flags.environment,
                });
                if (params === null || params === void 0 ? void 0 : params.updateConfig) {
                    const loading = this.createLoading({});
                    loading.start();
                    yield (0, update_1.writeUpdateData)(undefined, false);
                    yield (0, update_1.writeFGData)();
                    loading.stop();
                }
                console.info(this.success('Success') + ' logged in');
            }
        });
    }
}
exports.default = Login;
Login.description = 'Login with feishu account';
Login.examples = [
    ['$ {{cli}} login -e feishu', 'login with feishu account'],
];
Login.flags = {
    environment: command_1.flags.enum({
        char: 'e',
        description: 'environment',
        options: env_1.environment,
    }),
    help: command_1.flags.help({
        char: 'h',
    }),
};
