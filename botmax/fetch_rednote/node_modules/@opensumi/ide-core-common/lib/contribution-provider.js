"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContributionProvider = exports.BaseContributionProvider = exports.ContributionProvider = void 0;
exports.ContributionProvider = Symbol('ContributionProvider');
class BaseContributionProvider {
    constructor(domain, injector) {
        this.domain = domain;
        this.injector = injector;
    }
    addContribution(...contributionsCls) {
        for (const contributionCls of contributionsCls) {
            this.injector.addProviders(contributionCls);
            if (this.services) {
                this.services.push(this.injector.get(contributionCls));
            }
        }
    }
    getContributions() {
        return this.injector.getFromDomain(this.domain);
    }
    reload() {
        this.services = this.injector.getFromDomain(this.domain);
        return this.services;
    }
}
exports.BaseContributionProvider = BaseContributionProvider;
/**
 * 使用工厂函数创建 ContributionProvider
 * @param injector 全局唯一的 injector，用来获取当前 Domain 的 Contribution、并注册 ContributionProvider
 * @param domain 用来区分 Contribution 的标识，也是 ContributionProvider 的 Token
 */
function createContributionProvider(injector, domain) {
    const contributionProvider = new BaseContributionProvider(domain, injector);
    injector.addProviders({
        token: domain,
        useValue: contributionProvider,
    });
}
exports.createContributionProvider = createContributionProvider;
//# sourceMappingURL=contribution-provider.js.map