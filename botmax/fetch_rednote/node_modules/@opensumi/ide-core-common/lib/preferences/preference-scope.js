"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCODE_WORKSPACE_CONFIGURATION_DIR_NAME = exports.DEFAULT_WORKSPACE_CONFIGURATION_DIR_NAME = exports.UserScope = exports.WorkspaceScope = exports.PreferenceScope = void 0;
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 2] = "Workspace";
    PreferenceScope[PreferenceScope["Folder"] = 3] = "Folder";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
exports.WorkspaceScope = {
    id: PreferenceScope.Workspace,
    label: 'preference.tab.workspace',
};
exports.UserScope = {
    id: PreferenceScope.User,
    label: 'preference.tab.user',
};
(function (PreferenceScope) {
    function is(scope) {
        return typeof scope === 'number' && getScopes().findIndex((s) => s === scope) >= 0;
    }
    PreferenceScope.is = is;
    function getScopes() {
        return Object.keys(PreferenceScope)
            .filter((k) => typeof PreferenceScope[k] === 'string')
            .map((v) => Number(v));
    }
    PreferenceScope.getScopes = getScopes;
    function getReversedScopes() {
        return getScopes().reverse();
    }
    PreferenceScope.getReversedScopes = getReversedScopes;
    function getScopeNames(scope) {
        const names = [];
        const allNames = Object.keys(PreferenceScope).filter((k) => typeof PreferenceScope[k] === 'number');
        if (scope) {
            for (const name of allNames) {
                if (PreferenceScope[name] <= scope) {
                    names.push(name);
                }
            }
        }
        return names;
    }
    PreferenceScope.getScopeNames = getScopeNames;
    // 转义 vscode 中对configuration中scope的定义
    function fromString(strScope) {
        switch (strScope) {
            case 'application':
                return PreferenceScope.User;
            case 'window':
                return PreferenceScope.Folder;
            case 'resource':
                return PreferenceScope.Folder;
        }
    }
    PreferenceScope.fromString = fromString;
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
exports.DEFAULT_WORKSPACE_CONFIGURATION_DIR_NAME = '.sumi';
exports.VSCODE_WORKSPACE_CONFIGURATION_DIR_NAME = '.vscode';
//# sourceMappingURL=preference-scope.js.map