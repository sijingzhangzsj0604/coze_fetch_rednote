"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nBrowser = void 0;
// 引入react插件，它封装了刷新i18n实例，以及渲染富文本节点的能力。
const env_1 = __importDefault(require("@bdeefe/feishu-devtools-core/libs/config/env"));
const intl_react_plugin_1 = require("@ies/intl-react-plugin");
const starling_intl_1 = require("@ies/starling_intl");
const common_1 = require("../common");
const params_1 = require("../common/params");
const en_US_json_1 = __importDefault(require("../locales/PAGE/en-US.json"));
const zh_CN_json_1 = __importDefault(require("../locales/PAGE/zh-CN.json"));
__exportStar(require("../common/index"), exports);
const resources = {
    'en-US': {
        translation: en_US_json_1.default,
    },
    'zh-CN': {
        translation: zh_CN_json_1.default,
    },
};
class I18nBrowser extends common_1.I18nBase {
    static init({ isOversea = env_1.default.oversea, opt = {}, }) {
        const I18nOrigin = new starling_intl_1.I18nConstructor();
        const I18nOpts = Object.assign({ lng: common_1.i18nStore.getLang(), resources, thirdParamFallback: true }, opt);
        I18nOrigin.use(intl_react_plugin_1.registerReactInstance).init(I18nOpts);
        const I18n = new I18nBrowser(I18nOrigin);
        // FIXME: 后续应该改成构建期间做了
        document.title = isOversea ? 'Lark Developer Tools' : '飞书开发者工具';
        if (isOversea) {
            const literalToReplace = new Map();
            // 这里有点 hack ，本质上还是需要在多语言时，保留品牌名 {brand} 切换
            literalToReplace.set(/飞书/g, ' Lark ');
            literalToReplace.set(/Feishu/g, 'Lark');
            I18n.setReplaceMap(literalToReplace);
        }
        return I18n;
    }
    setLang(lang) {
        return common_1.i18nStore.setLang(lang).then(() => {
            return super.setLang(lang);
        });
    }
    setLangWithQuery(lang, changeQuery, langOption) {
        if (changeQuery) {
            const params = (0, params_1.queryParams)(location.search);
            params['locale'] = lang;
            if (langOption) {
                params['langOption'] = langOption;
            }
            const queryString = Object.keys(params).reduce((res, cur, index) => res + `${index !== 0 ? '&' : ''}${cur}=${params[cur]}`, '?');
            history.replaceState({}, '', `${location.origin}${location.pathname}${queryString}`);
        }
        return this.setLang(lang);
    }
    onLangChange(fn) {
        common_1.i18nStore.onLangChange(fn);
    }
}
exports.I18nBrowser = I18nBrowser;
let I18n;
(() => {
    if (!I18n) {
        I18n = I18nBrowser.init({});
    }
})();
exports.default = I18n;
