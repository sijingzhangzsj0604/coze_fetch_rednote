export interface IteratorDefinedResult<T> {
    readonly done: false;
    readonly value: T;
}
export interface IteratorUndefinedResult {
    readonly done: true;
    readonly value: undefined;
}
export declare const FIN: IteratorUndefinedResult;
export type IteratorResult<T> = IteratorDefinedResult<T> | IteratorUndefinedResult;
export interface Iterator<T> {
    next(): IteratorResult<T>;
}
export declare function filter<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): Iterable<R>;
export declare function filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T>;
export declare function map<T, R>(iterable: Iterable<T>, fn: (t: T, index: number) => R): Iterable<R>;
//# sourceMappingURL=iterator.d.ts.map