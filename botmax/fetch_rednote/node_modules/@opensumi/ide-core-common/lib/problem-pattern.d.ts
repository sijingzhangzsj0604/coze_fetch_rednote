/** ******************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Diagnostic } from 'vscode';
import { IDisposable, URI } from '@opensumi/ide-utils';
import { ProblemMatcher } from './problem-matcher';
export declare enum ApplyToKind {
    allDocuments = 0,
    openDocuments = 1,
    closedDocuments = 2
}
declare enum DiagnosticSeverity {
    Error = 1,
    Warning = 2,
    Information = 3,
    Hint = 4
}
export declare namespace ApplyToKind {
    function fromString(value: string | undefined): ApplyToKind | undefined;
}
export declare enum ProblemLocationKind {
    File = 0,
    Location = 1
}
export declare namespace ProblemLocationKind {
    function fromString(value: string): ProblemLocationKind | undefined;
}
export declare namespace FileLocationKind {
    function fromString(value: string): FileLocationKind | undefined;
}
export declare enum FileLocationKind {
    Default = 0,
    Relative = 1,
    Absolute = 2,
    AutoDetect = 3
}
export interface ProblemPattern {
    regexp?: RegExp | string;
    kind?: ProblemLocationKind;
    file?: number;
    message?: number;
    location?: number;
    line?: number;
    character?: number;
    endLine?: number;
    endCharacter?: number;
    code?: number;
    severity?: number;
    loop?: boolean;
}
export interface CheckedProblemPattern extends ProblemPattern {
    /**
     * The regular expression to find a problem in the console output of an
     * executed task.
     */
    regexp: string;
}
export interface NamedProblemPattern extends ProblemPattern {
    /**
     * The name of the problem pattern.
     */
    name: string;
    /**
     * A human readable label
     */
    label?: string;
}
export declare namespace CheckedProblemPattern {
    function is(value: any): value is CheckedProblemPattern;
}
export type MultiLineCheckedProblemPattern = CheckedProblemPattern[];
export declare namespace MultiLineProblemPattern {
    function is(value: any): value is MultiLineProblemPattern;
}
export declare namespace MultiLineCheckedProblemPattern {
    function is(value: any): value is MultiLineCheckedProblemPattern;
}
export declare namespace NamedProblemPattern {
    function is(value: any): value is NamedProblemPattern;
}
export interface NamedMultiLineCheckedProblemPattern {
    /**
     * The name of the problem pattern.
     */
    name: string;
    /**
     * A human readable label
     */
    label?: string;
    /**
     * The actual patterns
     */
    patterns: MultiLineCheckedProblemPattern;
}
export declare namespace NamedMultiLineCheckedProblemPattern {
    function is(value: any): value is NamedMultiLineCheckedProblemPattern;
}
export type MultiLineProblemPattern = ProblemPattern[];
export interface NamedMultiLineProblemPattern {
    name: string;
    label: string;
    patterns: MultiLineProblemPattern;
}
export interface ProblemPatternContribution {
    name?: string;
    regexp: string;
    kind?: string;
    file?: number;
    message?: number;
    location?: number;
    line?: number;
    character?: number;
    column?: number;
    endLine?: number;
    endCharacter?: number;
    endColumn?: number;
    code?: number;
    severity?: number;
    loop?: boolean;
}
export declare namespace ProblemPattern {
    function fromProblemPatternContribution(value: ProblemPatternContribution): NamedProblemPattern;
}
export interface ProblemMatch {
    resource?: URI;
    description: ProblemMatcher;
}
export interface ProblemMatchData extends ProblemMatch {
    marker: Diagnostic;
}
export declare function rangeAreEqual(a: any, b: any): boolean;
export declare function diagnosticAreEquals(a?: Diagnostic, b?: Diagnostic): boolean;
export declare namespace ProblemMatchData {
    function is(data: ProblemMatch): data is ProblemMatchData;
}
export declare enum Severity {
    Ignore = 0,
    Error = 1,
    Warning = 2,
    Info = 3,
    Log = 4
}
export declare namespace Severity {
    function fromValue(value: string | undefined): Severity;
    function toDiagnosticSeverity(value: Severity): DiagnosticSeverity;
    function toString(severity: Severity | undefined): string;
    function toArray(): string[];
}
export interface WatchingPattern {
    regexp: RegExp | string;
    file?: number;
}
export declare const IProblemPatternRegistry: unique symbol;
export interface IProblemPatternRegistry {
    onReady(): Promise<void>;
    register(value: any | any[]): IDisposable;
    get(key: string): undefined | NamedProblemPattern | NamedProblemPattern[];
}
export declare class ProblemPatternRegistryImpl implements IProblemPatternRegistry {
    private readonly patterns;
    private readyPromise;
    constructor();
    protected init(): void;
    onReady(): Promise<void>;
    /**
     * Add a problem pattern to the registry.
     *
     * @param definition the problem pattern to be added.
     */
    register(value: ProblemPatternContribution | ProblemPatternContribution[]): IDisposable;
    /**
     * Finds the problem pattern(s) from the registry with the given name.
     *
     * @param key the name of the problem patterns
     * @return a problem pattern or an array of the problem patterns associated with the name. If no problem patterns are found, `undefined` is returned.
     */
    get(key: string): undefined | NamedProblemPattern | NamedProblemPattern[];
    private add;
    private fillDefaults;
}
export {};
//# sourceMappingURL=problem-pattern.d.ts.map