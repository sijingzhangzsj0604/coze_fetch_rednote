import { __read } from "tslib";
import { getDefaultDocument } from '../../utils';
import { applyBreadcrumb, applyDomAndKeyPress, domBreadcrumb, triggerHandlers } from './util';
export var BreadcrumbMonitor = function (document) {
    if (document === void 0) { document = getDefaultDocument(); }
    if (!document) {
        return;
    }
    return function (props, _cb) {
        var maxBreadcrumbs = props.maxBreadcrumbs, onAddBreadcrumb = props.onAddBreadcrumb, onMaxBreadcrumbs = props.onMaxBreadcrumbs, dom = props.dom;
        var _a = __read(applyDomAndKeyPress(100), 2), domEventHandler = _a[0], keypressHandler = _a[1];
        var _b = __read(applyBreadcrumb(maxBreadcrumbs, onAddBreadcrumb, onMaxBreadcrumbs), 2), getBreadcrumbs = _b[0], addBreadcrumb = _b[1];
        var createDomBreadcrumb = domBreadcrumb(addBreadcrumb);
        var handlers = [];
        if (dom) {
            handlers.push(domEventHandler('click', triggerHandlers(createDomBreadcrumb, 'dom')));
            handlers.push(keypressHandler(triggerHandlers(createDomBreadcrumb, 'dom')));
            document.addEventListener('click', handlers[0]);
            document.addEventListener('keypress', handlers[1]);
        }
        var teardown = function () {
            document.removeEventListener('click', handlers[0]);
            document.removeEventListener('keypress', handlers[1]);
        };
        return [getBreadcrumbs, addBreadcrumb, teardown];
    };
};
//# sourceMappingURL=index.js.map