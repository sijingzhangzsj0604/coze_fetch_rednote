import { TTIMonitorConstructor, NEWPerformanceLongTask } from './type';
/**
 * 劫持 XHR 和 fetch，监听当前页面未完成的 GET 请求数量
 */
export declare const applyIncompleteReq: (global?: Window | null | undefined, XMLHttpRequest?: {
    new (): XMLHttpRequest;
    prototype: XMLHttpRequest;
    readonly DONE: number;
    readonly HEADERS_RECEIVED: number;
    readonly LOADING: number;
    readonly OPENED: number;
    readonly UNSENT: number;
} | null | undefined) => readonly [Record<number, number>, () => void];
/**
 * 监听 longtask resource 和 网络请求
 * 返回 longtasks 数组、停止监听的函数、拿到最近一次请求大于2的时间的函数
 */
export declare const observeLongTaskAndNetAndResource: (global?: Window | null | undefined, XMLHttpRequest?: {
    new (): XMLHttpRequest;
    prototype: XMLHttpRequest;
    readonly DONE: number;
    readonly HEADERS_RECEIVED: number;
    readonly LOADING: number;
    readonly OPENED: number;
    readonly UNSENT: number;
} | null | undefined, PerformanceObserver?: {
    new (callback: PerformanceObserverCallback): PerformanceObserver;
    prototype: PerformanceObserver;
    readonly supportedEntryTypes: readonly string[];
} | null | undefined, MutationObserver?: {
    new (callback: MutationCallback): MutationObserver;
    prototype: MutationObserver;
} | null | undefined) => (precollect: PerformanceEntry[], scheduler: (earliestTime: number) => void, now: () => number) => readonly [NEWPerformanceLongTask[] & {
    notSupport?: boolean | undefined;
}, () => void, () => number];
export declare const TTIMonitor: TTIMonitorConstructor;
