"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modules = void 0;
const ModuleManager_1 = __importDefault(require("@bdeefe/feishu-devtools-core/libs/common/ModuleManager"));
const feishu_devtools_core_1 = require("@bdeefe/feishu-devtools-core");
const findDep_1 = __importDefault(require("@bdeefe/feishu-devtools-core/libs/utils/findDep"));
const Storage_1 = __importDefault(require("./Storage"));
const Preview_1 = __importDefault(require("./Preview"));
const Upload_1 = __importDefault(require("./Upload"));
const UI_1 = __importDefault(require("./UI"));
const EventTracker_1 = __importDefault(require("./EventTracker"));
const Service_1 = __importDefault(require("./Service"));
const Feedback_1 = __importDefault(require("./Feedback"));
const Account_1 = __importDefault(require("./Account"));
const Static_1 = __importDefault(require("./Static"));
const moduleMap = {
    [feishu_devtools_core_1.ModuleName.account]: Account_1.default,
    [feishu_devtools_core_1.ModuleName.ui]: UI_1.default,
    [feishu_devtools_core_1.ModuleName.storage]: Storage_1.default,
    [feishu_devtools_core_1.ModuleName.preview]: Preview_1.default,
    [feishu_devtools_core_1.ModuleName.upload]: Upload_1.default,
    [feishu_devtools_core_1.ModuleName.compile]: feishu_devtools_core_1.CompileModule,
    [feishu_devtools_core_1.ModuleName.service]: Service_1.default,
    [feishu_devtools_core_1.ModuleName.jssdk]: feishu_devtools_core_1.JSSDKModule,
    [feishu_devtools_core_1.ModuleName.feedback]: Feedback_1.default,
    [feishu_devtools_core_1.ModuleName.eventTracker]: EventTracker_1.default,
    [feishu_devtools_core_1.ModuleName.sniffer]: feishu_devtools_core_1.SnifferModule,
    [feishu_devtools_core_1.ModuleName.creator]: feishu_devtools_core_1.CreatorModule,
    [feishu_devtools_core_1.ModuleName.static]: Static_1.default,
};
class Modules {
    constructor(name) {
        this.modules = [];
        this.modulesMap = {};
        const manager = new ModuleManager_1.default();
        let modules = [];
        if (name) {
            modules = Array.isArray(name)
                ? name.reduce((prev, cur) => {
                    prev = Array.from(new Set([...prev, ...(0, findDep_1.default)(cur)]));
                    return prev;
                }, [])
                : (0, findDep_1.default)(name);
        }
        else {
            modules = Object.keys(moduleMap);
        }
        this.modules = modules.map((m) => {
            const Module = moduleMap[m];
            const module = new Module();
            this.modulesMap[m] = module;
            return module;
        });
        this.manager = manager;
        this.init();
    }
    init() {
        return this.manager.init(this.modules);
    }
}
exports.Modules = Modules;
