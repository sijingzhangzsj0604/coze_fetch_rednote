import { __read, __spreadArray } from "tslib";
/* eslint-disable @typescript-eslint/prefer-for-of */
/* eslint-disable @typescript-eslint/prefer-optional-chain */
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { arrayIncludes, hookObjectProperty } from '@slardar/sdk-template';
import { applyMutationObserver, now as absoluteNow } from '../../../utils';
/**
 * start 方法开启一个调度器，传入回调和调度时间
 * reschedule 重新以一个更长的时间调度
 * stop 停止调度
 */
export var applyScheduler = function (now) {
    var timerActiveTime = -Infinity;
    var timerId = undefined;
    var callback;
    var clearTime = function () { return window.clearTimeout(timerId); };
    var reschedule = function (earliestTime) {
        if (timerActiveTime > earliestTime || !callback) {
            return;
        }
        clearTime();
        timerId = window.setTimeout(callback, earliestTime - now());
        timerActiveTime = earliestTime;
    };
    var start = function (cb, earliestTime) {
        callback = cb;
        reschedule(earliestTime);
    };
    var stop = function () {
        clearTime();
        callback = undefined;
    };
    return [start, stop, reschedule];
};
/**
 * Computes the time (in milliseconds since requestStart) that the network was
 * last known to have >2 requests in-flight.
 */
export var calcLastNet2Busy = function (undoneReqStarts, observedResReqs, now) {
    if (undoneReqStarts.length > 2) {
        return now();
    }
    var endpoints = [];
    for (var i = 0; i < observedResReqs.length; i++) {
        endpoints.push([observedResReqs[i].start, 0 /* S */], [observedResReqs[i].end, 1 /* E */]);
    }
    for (var i = 0; i < undoneReqStarts.length; i++) {
        endpoints.push([undoneReqStarts[i], 0 /* S */]);
    }
    endpoints.sort(function (a, b) { return a[0] - b[0]; });
    var currentActive = undoneReqStarts.length;
    for (var i = endpoints.length - 1; i >= 0; i--) {
        var _a = __read(endpoints[i], 2), timestamp = _a[0], type = _a[1];
        switch (type) {
            case 0 /* S */:
                currentActive--;
                break;
            case 1 /* E */:
                currentActive++;
                if (currentActive > 2) {
                    return timestamp;
                }
                break;
        }
    }
    // If we reach here, we were never network 2-busy.
    return 0;
};
export var getRequestTimes = function (requestTimes) {
    var keys = Object.keys(requestTimes);
    var result = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (var i = 0; i < keys.length; i++) {
        var val = requestTimes[keys[i]];
        if (typeof val === 'number') {
            result.push(val);
        }
    }
    return result;
};
/**
 * 监听包含 ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'] 标签的 dom 变更
 */
export var observeResFetchMutations = function (MutationObserver, callback) {
    var requestCreatingNodeNames = ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'];
    function subtreeContainsNodeName(nodes, nodeNames) {
        for (var i = 0; i < nodes.length; i++) {
            if (arrayIncludes(nodeNames, nodes[i].nodeName.toLowerCase()) ||
                (nodes[i].children &&
                    subtreeContainsNodeName(nodes[i].children, nodeNames))) {
                return true;
            }
        }
        return false;
    }
    var _a = __read(applyMutationObserver(MutationObserver, function (mutations) {
        for (var i = 0; i < mutations.length; i++) {
            if ((mutations[i].type === 'childList' &&
                subtreeContainsNodeName(mutations[i].addedNodes, requestCreatingNodeNames)) ||
                (mutations[i].type === 'attributes' &&
                    arrayIncludes(requestCreatingNodeNames, mutations[i].target.nodeName.toLowerCase()))) {
                callback(mutations[i]);
            }
        }
    }), 2), observe = _a[0], disconnect = _a[1];
    return [
        function () {
            return observe(document, {
                attributes: true,
                childList: true,
                subtree: true,
                attributeFilter: ['href', 'src'],
            });
        },
        disconnect,
    ];
};
/**
 * Returns either a manually set min value or the time since
 * domContentLoadedEventEnd and navigationStart. If the
 * domContentLoadedEventEnd data isn't available, `null` is returned.
 * @return {number|null}
 */
export var getMinValue = function (timing) {
    var _a = timing || {}, domContentLoadedEventEnd = _a.domContentLoadedEventEnd, _b = _a.navigationStart, navigationStart = _b === void 0 ? 0 : _b;
    return domContentLoadedEventEnd ? domContentLoadedEventEnd - navigationStart : null;
};
/**
 * Computes the TTI value...
 * @param {number} searchStart
 * @param {number} minValue
 * @param {number} lastKnownNetwork2Busy
 * @param {number} currentTime
 * @param {!Array<{start: (number), end: (number)}>} longTasks
 * @return {number|null}
 */
export var computeTTI = function (searchStart, minValue, lastKnownNetwork2Busy, currentTime, longTasks) {
    // Have not reached network 2-quiet yet.
    if (currentTime - lastKnownNetwork2Busy < 5000) {
        return null;
    }
    var maybeFCI = longTasks.length === 0 ? searchStart : longTasks[longTasks.length - 1].end;
    // Main thread has not been quiet for long enough.
    if (currentTime - maybeFCI < 5000) {
        return null;
    }
    return Math.max(maybeFCI, minValue);
};
/**
 * 劫持 XHR.open 方法, 记录 method
 */
export var hookXHROpen = function (open) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._method = args[0];
        return open.apply(this, args);
    };
};
/**
 * 劫持 XHR.send 方法，回调 uniqId 为偶数
 */
export var hookXHRSend = function (send, before, after) {
    var uniqId = 0;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this._method !== 'GET') {
            return send.apply(this, args);
        }
        // No arrow function.
        var requestId = (uniqId += 2);
        before(requestId, absoluteNow());
        hookObjectProperty(this, 'onreadystatechange', function (onreadystatechange) {
            return function (e) {
                onreadystatechange && onreadystatechange.call(this, e);
                this.readyState === 4 && after(requestId);
            };
        })();
        return send.apply(this, args);
    };
};
/**
 * 劫持 fetch，回调 uniqId 为奇数
 */
export var hookFetch = function (_fetch, before, after) {
    var uniqId = 1;
    return function () {
        var _a, _b;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fetchMethod = ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.method) || ((_b = args[1]) === null || _b === void 0 ? void 0 : _b.method) || 'GET';
        if (fetchMethod !== 'GET') {
            return _fetch.apply(void 0, __spreadArray([], __read(args), false));
        }
        // eslint-disable-next-line compat/compat
        return new Promise(function (resolve, reject) {
            var requestId = (uniqId += 2);
            before(requestId, absoluteNow());
            _fetch.apply(void 0, __spreadArray([], __read(args), false)).then(function (value) {
                after(requestId);
                resolve(value);
            }, function (err) {
                after(requestId, err);
                reject(err);
            });
        });
    };
};
/**
 * 返回的 iterEntries 方法用于迭代监听到的 longtask 和 resource entries，
 * 将缓存监听到的 longTasks 和 network
 */
export var gatherLongTaskAndNetworks = function () {
    var longTasks = [];
    var networkRequests = [];
    var iterEntries = function (longTaskCb, resourceCb) {
        return function (entry) {
            var _a = entry, startTime = _a.startTime, duration = _a.duration, fetchStart = _a.fetchStart, responseEnd = _a.responseEnd, entryType = _a.entryType;
            if (entryType === 'longtask') {
                ;
                entry.start = startTime;
                entry.end = startTime + duration;
                longTasks.push(entry);
                longTaskCb && longTaskCb(entry);
            }
            else if (entryType === 'resource') {
                networkRequests.push({
                    start: fetchStart,
                    end: responseEnd,
                });
                resourceCb && resourceCb(entry);
            }
        };
    };
    return [longTasks, networkRequests, iterEntries];
};
//# sourceMappingURL=util.js.map