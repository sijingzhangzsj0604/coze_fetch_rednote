import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../utils/__test__/util';
import { getNetworkType, InjectNetworkTypePlugin } from '../inject-network-type';
test('getNetworkType', function (t) {
    t.is(getNetworkType(), '');
    t.is(getNetworkType({}), '');
    t.is(getNetworkType({
        effectiveType: '3g',
    }), '3g');
    t.is(getNetworkType({
        type: 'bluetooth',
    }), 'bluetooth');
    t.is(getNetworkType({
        effectiveType: '4g',
        type: 'wifi',
    }), '4g');
});
test('InjectNetworkTypePlugin', function (t) {
    var _a;
    var mockNetInfo = {
        effectiveType: '3g',
        type: 'wifi',
    };
    global.window = {
        navigator: {
            // @ts-expect-error
            connection: mockNetInfo,
        },
    };
    var client = createTestWebClient();
    InjectNetworkTypePlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({});
    client.start();
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
    });
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
        extra: {
            network_type: '3g',
        },
    });
    // @ts-expect-error
    mockNetInfo.effectiveType = '4g';
    (_a = mockNetInfo.onchange) === null || _a === void 0 ? void 0 : _a.call(mockNetInfo);
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'second-pid',
            source: 'user-set',
        },
    });
    t.assert(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'pageview',
        payload: {
            pid: 'second-pid',
            source: 'user-set',
        },
        extra: {
            network_type: '4g',
        },
    });
    // @ts-expect-error
    global.window = undefined;
});
//# sourceMappingURL=inject-network-type.spec.js.map