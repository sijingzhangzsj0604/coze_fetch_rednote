import { HttpReport, MonitorConstructor, HttpPayload } from '../../types';
declare type Cb = (ev: HttpReport) => void;
export interface AjaxMonitorConfig {
    autoWrap?: boolean;
    hookCbAtReq: (t: Cb | undefined) => Cb | undefined;
    ignoreUrls: (string | RegExp)[];
    collectBodyOnError: boolean;
    extraExtractor?: (body: string | any, related: HttpPayload) => {
        [key: string]: string;
    } | false;
    trace?: TraceConfig | boolean;
    setTraceHeader?: (url: string, cb: (key: string, value: string) => void) => void;
}
export interface FetchMonitorConfig extends AjaxMonitorConfig {
}
export interface TraceConfig {
    sampleRate?: number;
    origins: (string | RegExp)[];
}
export interface WrapXhr {
    (xhr: typeof XMLHttpRequest): typeof XMLHttpRequest;
}
export declare type AjaxMonitorConstructor = MonitorConstructor<AjaxMonitorConfig, HttpReport, [window: Window], [WrapXhr]>;
export interface NewXMLHttpRequest extends XMLHttpRequest {
    _url: string;
    _method: string;
    _start: number;
    _data: Parameters<XMLHttpRequest['send']>[0];
    _reqHeaders?: Record<string, string>;
}
export declare type GetLatestEntryByName = (name: string) => PerformanceResourceTiming | undefined;
export {};
