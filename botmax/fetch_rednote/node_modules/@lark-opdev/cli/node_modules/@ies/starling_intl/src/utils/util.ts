export function promiseQueue(executors: any[]) {
  return new Promise((resolve, reject) => {
    if (!Array.isArray(executors)) {
      executors = Array.from(executors)
    }
    if (executors.length <= 0) {
      return resolve([])
    }

    const res: any[] = []
    executors = executors.map((x, i) => () => {
      const p = typeof x === 'function' ? new Promise(x) : Promise.resolve(x)
      p.then(response => {
        res[i] = response
        if (i === executors.length - 1) {
          resolve(res)
        } else {
          executors[i + 1]()
        }
      }, reject)
    })
    executors[0]()
  })
}
