"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAliasCreator = exports.isFactoryCreator = exports.isClassCreator = exports.isValueCreator = exports.isToken = exports.isInjectableToken = exports.isAliasProvider = exports.isValueProvider = exports.isFactoryProvider = exports.isClassProvider = exports.isTypeProvider = void 0;
var declare_1 = require("../declare");
var injector_helper_1 = require("./injector-helper");
function isTypeProvider(provider) {
    return typeof provider === 'function';
}
exports.isTypeProvider = isTypeProvider;
function isClassProvider(provider) {
    return !!provider.useClass;
}
exports.isClassProvider = isClassProvider;
function isFactoryProvider(provider) {
    return !!provider.useFactory;
}
exports.isFactoryProvider = isFactoryProvider;
function isValueProvider(provider) {
    return Object.prototype.hasOwnProperty.call(provider, 'useValue');
}
exports.isValueProvider = isValueProvider;
function isAliasProvider(provider) {
    return Object.prototype.hasOwnProperty.call(provider, 'useAlias');
}
exports.isAliasProvider = isAliasProvider;
function isInjectableToken(token) {
    return typeof token === 'function' && (0, injector_helper_1.isInjectable)(token);
}
exports.isInjectableToken = isInjectableToken;
var errorConstructors = new Set([Object, String, Number, Boolean]);
var tokenTypes = new Set(['function', 'string', 'symbol']);
function isToken(token) {
    if (typeof token === 'function') {
        return !errorConstructors.has(token);
    }
    return tokenTypes.has(typeof token);
}
exports.isToken = isToken;
function isValueCreator(creator) {
    return creator.status === declare_1.CreatorStatus.done;
}
exports.isValueCreator = isValueCreator;
function isClassCreator(creator) {
    return !!creator.useClass;
}
exports.isClassCreator = isClassCreator;
function isFactoryCreator(creator) {
    return !!creator.useFactory;
}
exports.isFactoryCreator = isFactoryCreator;
function isAliasCreator(creator) {
    return Object.prototype.hasOwnProperty.call(creator, 'useAlias');
}
exports.isAliasCreator = isAliasCreator;
