import { __read } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { omit, safeVisit, safeCall, safeCallOrGet, safeSet, pick, hasKey, objectForIn, filterObjectValueBy, mergeDeepCopyArray, cloneArray, arrayIncludes, arrayRemove, applyRecord, mergeDeepConcatArray, } from '../object-array';
var Foo = /** @class */ (function () {
    function Foo(id) {
        this.id = id;
    }
    Foo.prototype.bar = function () {
        return this.id;
    };
    return Foo;
}());
test('omit', function (t) {
    var obj = {
        a: '123',
        b: '456',
        c: '789',
    };
    t.deepEqual(omit(obj, 'a', 'b', 'c'), {});
    t.deepEqual(omit(obj, 'a', 'b'), { c: '789' });
    t.deepEqual(omit(obj, 'b'), { a: '123', c: '789' });
    t.deepEqual(omit(3, 'a'), 3);
    t.deepEqual(omit(null), null);
});
test('hasKey', function (t) {
    var obj = { name: 'a' };
    t.assert(hasKey(obj, 'name'));
    t.false(hasKey(obj, 'name1'));
});
test('objectForIn', function (t) {
    var callback = sinon.fake();
    var obj = { name: 'a', age: 16 };
    objectForIn(obj, callback);
    t.assert(callback.calledTwice);
    t.is(callback.args[0][0], 'name');
    t.is(callback.args[0][1], 'a');
    t.is(callback.args[1][0], 'age');
    t.is(callback.args[1][1], 16);
});
test('filterObjectValueby', function (t) {
    var obj = { name: 'a', age: 16 };
    t.deepEqual(filterObjectValueBy(obj, function (v) { return typeof v === 'string'; }), {
        name: 'a',
    });
    t.deepEqual(filterObjectValueBy(obj, function (v) { return typeof v === 'number'; }), {
        age: 16,
    });
    t.deepEqual(filterObjectValueBy(obj, function (v) { return typeof v === 'function'; }), {});
    t.deepEqual(filterObjectValueBy(obj, function (v) { return Boolean(v); }), obj);
    t.deepEqual(filterObjectValueBy(obj, 3), obj);
    t.deepEqual(filterObjectValueBy(3, 3), 3);
});
test('mergeDeepCopyArray', function (t) {
    var foo = new Foo('foo.bar');
    var pojo = { pojo: true };
    var target = { name: 'a', location: { country: 'China' }, record: [1, 2, 3] };
    var source = { age: 16, location: { city: 'Beijing' }, record: [/TEST/, '1', '2', '3', pojo, foo] };
    var result = mergeDeepCopyArray(target, source);
    source.record.unshift('0');
    t.deepEqual(result, {
        name: 'a',
        age: 16,
        location: {
            country: 'China',
            city: 'Beijing',
        },
        record: [/TEST/, '1', '2', '3', pojo, foo],
    });
    t.is(result.record[4], pojo);
    t.is(result.record[5], foo);
    t.is(result.record[5].bar(), 'foo.bar');
});
test('mergeDeepConcatArray', function (t) {
    var A = /** @class */ (function () {
        function A() {
        }
        return A;
    }());
    var B = /** @class */ (function () {
        function B() {
        }
        return B;
    }());
    var a = new A();
    var b = new B();
    var f = function () { };
    var foo = new Foo('foo.bar');
    var pojo = { pojo: true };
    var arr = [1, 2, 3];
    var target = { name: 'a', location: { country: 'China' }, record: [1, 2, 3, a, arr] };
    var source = { age: 16, location: { city: 'Beijing' }, record: [/TEST/, 1, 2, 3, '1', '2', '3', pojo, foo, f, b] };
    var result = mergeDeepConcatArray(target, source);
    source.record.unshift('0');
    t.deepEqual(result, {
        name: 'a',
        age: 16,
        location: {
            country: 'China',
            city: 'Beijing',
        },
        record: [1, 2, 3, a, [1, 2, 3], /TEST/, 1, 2, 3, '1', '2', '3', pojo, foo, f, b],
    });
    t.not(result.record[4], arr);
    t.not(result.record[12], pojo);
    t.is(result.record[13], foo);
    t.is(result.record[13].bar(), 'foo.bar');
    t.is(result.record[14], f);
    t.is(result.record[15], b);
    var e = { obj: {}, flag: false, name: false };
    var d = { flag: { list: [], value: '1' }, name: false };
    var g = { obj: { a: 1 } };
    var finalResult = mergeDeepConcatArray(e, d, g);
    t.deepEqual(finalResult, {
        obj: {
            a: 1,
        },
        flag: { list: [], value: '1' },
        name: false,
    });
    var target2 = { fetch: { ignoreUrls: ['/collect/batch'] } };
    var source2 = { fetch: { trace: { sample: 1 } } };
    var result2 = mergeDeepConcatArray(target2, {}, source2);
    t.deepEqual(result2, {
        fetch: {
            ignoreUrls: ['/collect/batch'],
            trace: { sample: 1 },
        },
    });
});
test('cloneArray', function (t) {
    var origin = [1, 2, 3];
    var clone = cloneArray(origin);
    t.deepEqual(clone, origin);
    t.not(clone, origin);
    t.deepEqual(cloneArray([]), []);
});
test('arrayIncludes', function (t) {
    var array = ['name', 1];
    t.assert(arrayIncludes(array, 'name'));
    t.assert(arrayIncludes(array, 1));
    t.false(arrayIncludes(array, 'name1'));
    t.false(arrayIncludes(array, '1'));
    t.false(arrayIncludes([], 1));
    t.false(arrayIncludes(3, 1));
});
test('arrayRemove', function (t) {
    var original = [1, 2, 3];
    var removed = arrayRemove(original, 2);
    t.deepEqual(original, [1, 2, 3]);
    t.deepEqual(removed, [1, 3]);
    t.deepEqual(arrayRemove(original, 5), original);
    t.deepEqual(arrayRemove(original, undefined), original);
    t.deepEqual(arrayRemove([], 2), []);
    t.deepEqual(arrayRemove(undefined, 2), undefined);
    t.deepEqual(arrayRemove(null, 2), null);
    t.deepEqual(arrayRemove(3, 2), 3);
});
test('safeVisit - empty', function (t) {
    var obj = {};
    safeVisit(obj, 'a', function (target, property) {
        t.is(target, obj);
        t.is(property, 'a');
    });
});
test('safeVisit - simple path', function (t) {
    var obj = {
        a: 3,
        b: 5,
        c: {
            d: {
                e: {
                    v: 999,
                },
            },
        },
    };
    t.plan(2);
    safeVisit(obj, 'a', function (target, property) {
        t.is(target[property], 3);
    });
    safeVisit(obj, 'c.d.e.v', function (target, property) {
        t.is(target[property], 999);
    });
    safeVisit(obj, 'c.d.f.v', function () {
        t.true(0);
    });
});
test('safeSet', function (t) {
    var obj = {
        d: 5,
    };
    safeSet(obj, 'd', 15);
    t.is(obj.d, 15);
    safeSet(obj, 'a', { b: { c: 5 } });
    safeSet(obj, 'a.b.c', 15);
    t.is(obj.a.b.c, 15);
    safeSet(obj, 'a.c.c', 15);
    t.is(obj.a.b.c, 15);
});
test('safeCall', function (t) {
    var obj = {
        a: {
            b: {
                c: sinon.fake.throws(new Error('nothing')),
            },
        },
    };
    safeCall(obj, 'a.b.c', [3, 4, 5]);
    t.true(obj.a.b.c.called);
    t.deepEqual(obj.a.b.c.args[0], [3, 4, 5]);
});
test('safeCallOrGet', function (t) {
    var obj = {
        a: {
            b: {
                c: sinon.fake.throws(new Error('nothing')),
            },
            d: 3,
        },
    };
    safeCallOrGet(obj, 'a.b.c', [3, 4, 5]);
    t.true(obj.a.b.c.called);
    t.deepEqual(obj.a.b.c.args[0], [3, 4, 5]);
    t.is(safeCallOrGet(obj, 'a.d'), 3);
});
test('applyRecord', function (t) {
    var _a = __read(applyRecord(), 3), record = _a[0], set = _a[1], del = _a[2];
    t.deepEqual(record, {});
    set('name', 'a');
    t.deepEqual(record, { name: 'a' });
    set('age', 16);
    t.deepEqual(record, { name: 'a', age: 16 });
    set('name', 16);
    del('age');
    t.deepEqual(record, { name: 16 });
});
test('pick', function (t) {
    var obj = {
        a: 123,
        b: '123',
        c: { key: true },
    };
    t.deepEqual(pick(obj, ['b', 'c']), {
        b: '123',
        c: { key: true },
    });
});
//# sourceMappingURL=object-array.spec.js.map