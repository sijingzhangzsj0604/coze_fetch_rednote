import { CallBack, MabyTuple, MonitorConstructor } from '../types';
export declare const applyMutationObserver: (MutationObserver: false | {
    new (callback: MutationCallback): MutationObserver;
    prototype: MutationObserver;
} | null | undefined, callback: MutationCallback) => readonly [(target?: false | Node | null | undefined, options?: MutationObserverInit | undefined) => void, () => false | void | null | undefined];
export declare const applyAnimationFrame: (document?: Document | undefined, originRAF?: ((callback: FrameRequestCallback) => number) | undefined, originCAF?: ((handle: number) => void) | undefined, force?: boolean | undefined) => readonly [(cb: FrameRequestCallback) => void, (callback: FrameRequestCallback) => number, (handle: number) => void];
export declare const applyPerformance: (performance: Performance | undefined | null | false) => readonly [PerformanceTiming | undefined, () => number, (type: string) => PerformanceEntryList, () => void, (name: string) => PerformanceEntryList];
export declare const applyPerformanceObserver: <C extends PerformanceEntry = PerformanceEntry>(PerformanceObserver: false | {
    new (callback: PerformanceObserverCallback): PerformanceObserver;
    prototype: PerformanceObserver;
    readonly supportedEntryTypes: readonly string[];
} | null | undefined, callback: (entry: C, index: number, array: C[], ob: PerformanceObserver) => void, once?: boolean | undefined, onFail?: (() => void) | undefined) => readonly [(...types: string[]) => void, () => false | void | null | undefined];
export declare const applyMonitor: <O, S, D extends any[], R extends void | any[] | undefined>(monitorCtor: MonitorConstructor<O, S, D, R>, props?: O, cb?: CallBack<S> | undefined, deps?: MabyTuple<D>) => R;
export declare const applyUpdate: <T extends {}>(init: T) => readonly [T, (newObj: Partial<T>) => void];
export declare const applyRequestIdleCallback: (win: Window | undefined) => (callback: IdleRequestCallback, options?: IdleRequestOptions | undefined) => number;
