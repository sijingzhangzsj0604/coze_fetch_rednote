import { ModuleDesc, ModuleName, ModuleEventMap, ModuleCmdMap, CmdFun } from '../types/protocol';
import { StartOptions } from '../types/devtools';
import { Request } from '../types/auto';
import { BlockEnvData, BlockStartData } from '../types/block';
import { AppType } from '../types/commonData';
export declare enum EventEnum {
    sendMessage = "Devtools.sendMessage"
}
export interface EventMap extends ModuleEventMap<EventEnum> {
    [EventEnum.sendMessage]: {
        type: '';
        params: object;
    };
}
export declare enum CmdEnum {
    start = "Devtools.start",
    cutConnect = "Devtools.cutConnect",
    startBlock = "Devtools.startBlock",
    blockInitInfo = "Devtools.blockInitInfo",
    setTrack = "Devtools.setTrack",
    stopAudit = "Devtools.stopAudit",
    sendCDPMessage = "Devtools.sendCDPMessage",
    startWSServer = "Devtools.startWSServer",
    startH5DevtoolServer = "Devtools.startH5DevtoolsServer",
    setWatch = "Devtools.setWatch",
    useNewCompiler = "Devtools.useNewCompiler",
    refresh = "Devtools.refresh",
    reConnect = "Devtools.reConnect",
    refreshDom = "Devtools.refreshDom"
}
declare type CmdStart = (m: ModuleName.devtools, cmd: CmdEnum.start, opt: StartOptions) => Promise<void>;
declare type CmdCutConnect = (m: ModuleName.devtools, cmd: CmdEnum.cutConnect) => void;
declare type CmdBlockStart = (m: ModuleName.devtools, cmd: CmdEnum.startBlock, opt: {
    compilePath: string;
    appType?: AppType;
}) => Promise<BlockStartData>;
declare type CmdBlockInitInfo = (m: ModuleName.devtools, cmd: CmdEnum.blockInitInfo, compilePath?: string) => BlockEnvData;
declare type CmdSetTrack = (m: ModuleName.devtools, cmd: CmdEnum.setTrack, opt: {
    track: (...params: any[]) => void;
}) => void;
declare type CmdStopAudit = (m: ModuleName.devtools, cmd: CmdEnum.stopAudit, opt: {
    outputPath: string;
    outputType: ('json' | 'html')[];
    reqData: Request;
}) => void;
declare type CmdSendCDPMessage = (m: ModuleName.devtools, cmd: CmdEnum.sendCDPMessage, opt: {
    method: string;
    params?: any;
}, to: 'devtools' | 'view') => void;
declare type CmdStartH5DevtoolServer = (m: ModuleName.devtools, cmd: CmdEnum.startH5DevtoolServer) => Promise<{
    url: string;
}>;
declare type CmdSetWatch = (m: ModuleName.devtools, cmd: CmdEnum.setWatch, watch: boolean) => void;
declare type CmdUseNewCompiler = (m: ModuleName.devtools, cmd: CmdEnum.useNewCompiler) => void;
declare type CmdRefresh = (m: ModuleName.devtools, cmd: CmdEnum.refresh) => Promise<void>;
declare type CmdReConnect = (m: ModuleName.devtools, cmd: CmdEnum.reConnect) => Promise<void>;
declare type CmdRefreshDom = (m: ModuleName.devtools, cmd: CmdEnum.refreshDom) => void;
export declare type Command = CmdStart & CmdCutConnect & CmdBlockStart & CmdSetTrack & CmdStopAudit & CmdSendCDPMessage & CmdBlockInitInfo & CmdStartH5DevtoolServer & CmdSetWatch & CmdUseNewCompiler & CmdRefresh & CmdReConnect & CmdRefreshDom;
export interface CmdMap extends ModuleCmdMap<CmdEnum> {
    [CmdEnum.start]: CmdFun<CmdStart>;
    [CmdEnum.cutConnect]: CmdFun<CmdCutConnect>;
    [CmdEnum.startBlock]: CmdFun<CmdBlockStart>;
    [CmdEnum.blockInitInfo]: CmdFun<CmdBlockInitInfo>;
    [CmdEnum.setTrack]: CmdFun<CmdSetTrack>;
    [CmdEnum.stopAudit]: CmdFun<CmdStopAudit>;
    [CmdEnum.sendCDPMessage]: CmdFun<CmdSendCDPMessage>;
    [CmdEnum.startH5DevtoolServer]: CmdFun<CmdStartH5DevtoolServer>;
    [CmdEnum.setWatch]: CmdFun<CmdSetWatch>;
    [CmdEnum.useNewCompiler]: CmdFun<CmdUseNewCompiler>;
    [CmdEnum.refresh]: CmdFun<CmdRefresh>;
    [CmdEnum.reConnect]: CmdFun<CmdReConnect>;
    [CmdEnum.refreshDom]: CmdFun<CmdRefreshDom>;
}
export declare const DevtoolsDesc: ModuleDesc<EventMap, CmdMap, ModuleName.simulator | ModuleName.storage | ModuleName.account | ModuleName.ui | ModuleName.eventTracker | ModuleName.compile | ModuleName.service | ModuleName.sniffer | ModuleName.debugger | ModuleName.performance>;
export {};
