/**
 * report cpu and memory as a custom event
 *
 */
import { CustomPayload, CustomReport, MonitorConstructor } from '@slardar/sdk-web';
import { ElectronClient } from '../../types';
import { SampleUserConfig } from './sampleController';
export declare const PC_PERF_PLUGIN_NAME = "pcPerf";
export declare type PcPerfReport = CustomReport;
declare type PcPerfConfigItem = Partial<{
    collectInterval: SampleUserConfig['collectInterval'];
    sampleRate: SampleUserConfig['sampleRate'];
    async: SampleUserConfig['async'];
    transSucCb: SampleUserConfig['transSucCb'];
    extraMetrics: CustomPayload['metrics'];
    categories: CustomPayload['categories'];
}> & {
    dataGetter: (() => CustomPayload['metrics']) | (() => Promise<CustomPayload['metrics']>);
};
export declare type PcPerfUserConfig = {
    cpu: PcPerfConfigItem | false;
    memory: PcPerfConfigItem | false;
};
export interface PcPerfMonitorPluginConfig {
    [PC_PERF_PLUGIN_NAME]: PcPerfUserConfig;
}
export declare type WithSampleController<C extends ElectronClient> = C & {};
export declare function PcPerfMonitorPlugin<C extends ElectronClient>(client: C): void;
interface TearDown {
    (): void;
}
declare type Name = 'cpu' | 'memory';
declare const wrapperFunc: () => {
    startAction: (name: Name, options?: {
        isImmediately: boolean;
    }) => boolean;
    stopAction: (name: Name, options?: {
        isReportAll: boolean;
    }) => boolean;
    pauseAction: (name: Name, options?: {
        capacity: number;
    }) => boolean;
    update: (name: Name, updateConfig: Partial<SampleUserConfig>, options?: {
        isReStartImmediately?: boolean | undefined;
        startOptions?: {
            isImmediately: boolean;
        } | undefined;
        stopOptions?: {
            isReportAll: boolean;
        } | undefined;
    }) => void;
    getState: (name: Name) => import("./sampleController").State;
    getQueueSize: (name: Name) => number;
};
export declare type PcPerfConstructor = MonitorConstructor<PcPerfUserConfig, PcPerfReport, [
], [
    ReturnType<typeof wrapperFunc>,
    TearDown
]>;
export declare const PcPerfMonitor: PcPerfConstructor;
export {};
