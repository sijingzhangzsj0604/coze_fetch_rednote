import { IDisposable, MaybePromise, Event, URI } from '@opensumi/ide-utils';
import { ContributionProvider } from './contribution-provider';
export declare const StorageProvider: unique symbol;
export type StorageProvider = (storageId: URI) => Promise<IStorage>;
export declare const StorageResolverContribution: unique symbol;
export interface StorageResolverContribution {
    resolve(storageId: URI): MaybePromise<void | IStorage>;
}
export interface IStorage extends IDisposable {
    readonly items: Map<string, string>;
    readonly size: number;
    readonly onDidChangeStorage: Event<string>;
    readonly whenReady: Promise<any>;
    init(storageId: string): Promise<IStorage | void>;
    get(key: string, fallbackValue: string): string;
    get(key: string, fallbackValue?: string): string | undefined;
    get<T>(key: string, fallbackValue?: T): T;
    getBoolean(key: string, fallbackValue: boolean): boolean;
    getBoolean(key: string, fallbackValue?: boolean): boolean | undefined;
    getNumber(key: string, fallbackValue: number): number;
    getNumber(key: string, fallbackValue?: number): number | undefined;
    set(key: string, value: object | string | boolean | number | undefined | null): Promise<void>;
    delete(key: string): Promise<void>;
    close(): Promise<void>;
    reConnectInit(): Promise<void>;
}
export declare const STORAGE_SCHEMA: {
    SCOPE: string;
    GLOBAL: string;
};
export declare const STORAGE_NAMESPACE: {
    WORKBENCH: URI;
    EXTENSIONS: URI;
    EXPLORER: URI;
    LAYOUT: URI;
    RECENT_DATA: URI;
    DEBUG: URI;
    OUTLINE: URI;
    GLOBAL_LAYOUT: URI;
    GLOBAL_EXTENSIONS: URI;
    GLOBAL_RECENT_DATA: URI;
};
export declare class DefaultStorageProvider {
    protected readonly resolversProvider: ContributionProvider<StorageResolverContribution>;
    private storageCacheMap;
    /**
     * 返回对应storageId的Storage类
     */
    get(storageId: URI): Promise<IStorage | void>;
}
export declare namespace StoragePaths {
    const WINDOWS_APP_DATA_DIR = "AppData";
    const WINDOWS_ROAMING_DIR = "Roaming";
    const DEFAULT_STORAGE_DIR_NAME = ".sumi";
    const DEFAULT_DATA_DIR_NAME = "datas";
    const MARKETPLACE_DIR = "extensions";
    const EXTENSIONS_LOGS_DIR = "extensions";
    const EXTENSIONS_GLOBAL_STORAGE_DIR = "extension-storage";
    const EXTENSIONS_WORKSPACE_STORAGE_DIR = "workspace-storage";
}
//# sourceMappingURL=storage.d.ts.map