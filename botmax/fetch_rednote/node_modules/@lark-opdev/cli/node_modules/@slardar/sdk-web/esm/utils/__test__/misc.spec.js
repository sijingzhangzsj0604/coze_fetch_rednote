import { __awaiter, __generator, __read } from "tslib";
import ava from 'ava';
import sinon from 'sinon';
import { invokeCallbackOnce, onceHidden, onPageLoad, onPageUnload, getConfig, onDOMContentLoaded } from '../misc';
var browserEnv = require('browser-env');
var test = ava;
test.beforeEach(function (t) {
    t.context.clock = sinon.useFakeTimers();
});
test.afterEach(function (t) {
    t.context.clock.restore();
});
test('invokeCallbackOnce', function (t) {
    var cb = sinon.fake();
    var _a = __read(invokeCallbackOnce(cb), 1), onceCb = _a[0];
    t.assert(cb.notCalled);
    onceCb({});
    t.assert(cb.calledOnce);
    onceCb({});
    t.assert(cb.calledOnce);
    onceCb({});
    onceCb({});
    t.assert(cb.calledOnce);
});
test.serial('onPageLoad - no window', function (t) {
    t.assert(typeof window === 'undefined');
    var cb = sinon.fake();
    onPageLoad(cb);
    t.assert(cb.notCalled);
});
test.serial('onDOMContentLoaded - no window', function (t) {
    t.assert(typeof window === 'undefined');
    var cb = sinon.fake();
    onDOMContentLoaded(cb);
    t.assert(cb.notCalled);
});
test.serial('onPageLoad - loading', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var cb, sb;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                browserEnv();
                cb = sinon.fake();
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('loading');
                onPageLoad(cb);
                t.assert(cb.notCalled);
                window.dispatchEvent(new window.Event('load'));
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(cb.called);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('onPageLoad - complete', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('complete');
    onPageLoad(cb);
    t.assert(cb.called);
    sb.restore();
});
test.serial('onDOMContentLoaded - loading', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var cb, sb;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                browserEnv();
                cb = sinon.fake();
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('loading');
                onDOMContentLoaded(cb);
                t.assert(cb.notCalled);
                window.dispatchEvent(new window.Event('DOMContentLoaded'));
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(cb.called);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('onDOMContentLoaded - interactive', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('interactive');
    onDOMContentLoaded(cb);
    t.assert(cb.called);
    sb.restore();
});
test.serial('onDOMContentLoaded - complete', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('complete');
    onDOMContentLoaded(cb);
    t.assert(cb.called);
    sb.restore();
});
test.serial('onPageUnload - unload', function (t) {
    var cb = sinon.fake();
    onPageUnload(cb);
    t.assert(cb.notCalled);
    window.dispatchEvent(new window.Event('unload'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('beforeunload'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('pagehide'));
    t.assert(cb.calledOnce);
});
test.serial('onPageUnload - beforeunload', function (t) {
    var cb = sinon.fake();
    onPageUnload(cb);
    t.assert(cb.notCalled);
    window.dispatchEvent(new window.Event('beforeunload'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('unload'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('pagehide'));
    t.assert(cb.calledOnce);
});
test.serial('onPageUnload - pagehide', function (t) {
    var cb = sinon.fake();
    onPageUnload(cb);
    t.assert(cb.notCalled);
    window.dispatchEvent(new window.Event('pagehide'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('beforeunload'));
    t.assert(cb.calledOnce);
    window.dispatchEvent(new window.Event('unload'));
    t.assert(cb.calledOnce);
});
test.serial('onceHidden', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('prerender');
    onceHidden(cb);
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.restore();
});
test.serial('onceHidden - once', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('prerender');
    onceHidden(cb);
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.restore();
});
test.serial('onceHidden - forever', function (t) {
    var cb = sinon.fake();
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('prerender');
    onceHidden(cb, false);
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.notCalled);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledOnce);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(cb.calledTwice);
    sb.restore();
});
test.serial('getConfig', function (t) {
    t.falsy(getConfig(undefined, { a: 1 }));
    t.falsy(getConfig(null, { a: 1 }));
    t.falsy(getConfig(false, { a: 1 }));
    t.deepEqual(getConfig({}, { a: 1, b: 2 }), { a: 1, b: 2 });
    t.deepEqual(getConfig({ a: 2 }, { a: 1 }), { a: 2 });
    t.deepEqual(getConfig({ b: 1 }, { a: 1, b: 2 }), { a: 1, b: 1 });
});
//# sourceMappingURL=misc.spec.js.map