import I18next, { IntlInitOptions } from './i18n'
import { IntlMessageFormat } from '@ies/intl-icu-plugin'
import types, { isTypes } from '../plugins/types'
import logger from '../utils/logger'
import { formatLang } from '../plugins/process'
import { Callback, TFunction, FallbackLng, i18n, TFunctionKeys, StringMap } from 'i18next'
import { promiseQueue } from '../utils/util'

export enum IntlModuleType {
  intl3rdParty = 'intl3rdParty',
  backend = 'backend',
  logger = 'logger',
  languageDetector = 'languageDetector',
  postProcessor = 'postProcessor',
  i18nFormat = 'i18nFormat',
  '3rdParty' = '3rdParty'
}

export interface IntlModule<T extends keyof typeof IntlModuleType = keyof typeof IntlModuleType> {
  type: T
  name?: string
  init?: (i18n: any) => void | Promise<any>
}

export type IntlThirdPartyModule = IntlModule<'intl3rdParty'>

const optionKeywords = [
  'lngs',
  'ns',
  'keySeparator',
  'nsSeparator',
  'interpolation',
  'defaultValue'
]

/**
 * I18n实例
 * 自定义配置
 */
class Intl {
  plugins: IntlModule[]
  i18nInstance: I18next
  ignoreWarning: boolean
  constructor() {
    this.plugins = []
    this.i18nInstance = new I18next()
  }
  use(plugin: IntlModule) {
    if (!this.plugins.includes(plugin)) {
      this.plugins.push(plugin)
      return this
    }
    logger.warn(`Plugin: ${plugin.name} has beeninit installed.`)
    return this
  }
  async init(
    config: IntlInitOptions,
    initCallback?: Callback
  ): Promise<{ err: Error; t: TFunction }> {
    // ignore warning
    this.ignoreWarning = config.ignoreWarning

    this.i18nInstance._handleConfigs(config as any)
    this.i18nInstance._handlePlugins(this.plugins)

    try {
      const { err, t } = await this.i18nInstance.createInstance()
      // 接入 Intl thirdParty 类型 Plugin
      const intlThirdPartyArray = this.plugins.filter(p => p.type === IntlModuleType.intl3rdParty)

      await promiseQueue(
        intlThirdPartyArray.map(async intlThirdParty => {
          if (!intlThirdParty || typeof intlThirdParty.init !== 'function') {
            return
          }

          const initFunction =
            (intlThirdParty as IntlThirdPartyModule).init instanceof Promise
              ? (intlThirdParty as IntlThirdPartyModule).init
              : async context =>
                  Promise.resolve((intlThirdParty as IntlThirdPartyModule).init(context))

          await initFunction(this)
          return
        })
      )

      typeof initCallback === 'function' && initCallback(err, t)
      return { err, t }
    } catch (err) {
      logger.error(`The instance init error: ${err}`)
      return { err, t: (key: string) => key }
    }
  }
  get language() {
    return (this.i18nInstance || {}).language
  }
  setLang(lng: string, callback?: Callback) {
    const formatLng = formatLang(lng, this.plugins.filter(isTypes(types.LAMGUAGE_TRANSFORMER)))
    this.i18nInstance.changeLanguage(formatLng, callback)
  }
  getLanguages(): FallbackLng {
    return this.i18nInstance.getLanguages()
  }
  setLangWithPromise(lng: string) {
    const formatLng = formatLang(lng, this.plugins.filter(isTypes(types.LAMGUAGE_TRANSFORMER)))
    return this.i18nInstance.changeLanguageWithPromise(formatLng)
  }
  dir(lng: string) {
    return this.i18nInstance.getDir(lng)
  }
  t = <TKeys extends TFunctionKeys = string, TInterpolationMap extends object = StringMap>(
    keys: TKeys | TKeys[],
    options?: TInterpolationMap,
    fallbackText?: string
  ) => {
    if (!this.ignoreWarning && (!this.i18nInstance || !this.i18nInstance.init)) {
      logger.error(
        `The instance has not been initialized: i18n.t('${keys}'${
          options ? ',' + JSON.stringify(options) : ''
        });`
      )
      return fallbackText ?? (Array.isArray(keys) ? keys[0] : keys)
    }
    // 有人给 key 传空字符串?
    if (!keys || (typeof keys === 'string' && !keys.trim())) {
      return ''
    }

    return this.i18nInstance.t(keys, options, fallbackText)
  }
  addResourceBundle(lng: string, ns: string, resources: any, deep?: boolean, overwrite?: boolean) {
    // to to something validate
    return this.i18nInstance.addResourceBundle(lng, ns, resources, deep, overwrite)
  }
}

export default Intl
export { IntlMessageFormat }
